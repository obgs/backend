// Code generated by ent, DO NOT EDIT.

package statdescription

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/99designs/gqlgen/graphql"
	"github.com/obgs/backend/internal/ent/schema/guidgql"
	"github.com/obgs/backend/internal/ent/schema/stat"
)

const (
	// Label holds the string label denoting the statdescription type in the database.
	Label = "stat_description"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldOrderNumber holds the string denoting the order_number field in the database.
	FieldOrderNumber = "order_number"
	// EdgeGameVersion holds the string denoting the game_version edge name in mutations.
	EdgeGameVersion = "game_version"
	// EdgeStats holds the string denoting the stats edge name in mutations.
	EdgeStats = "stats"
	// Table holds the table name of the statdescription in the database.
	Table = "stat_descriptions"
	// GameVersionTable is the table that holds the game_version relation/edge. The primary key declared below.
	GameVersionTable = "stat_description_game_version"
	// GameVersionInverseTable is the table name for the GameVersion entity.
	// It exists in this package in order to avoid circular dependency with the "gameversion" package.
	GameVersionInverseTable = "game_versions"
	// StatsTable is the table that holds the stats relation/edge.
	StatsTable = "statistics"
	// StatsInverseTable is the table name for the Statistic entity.
	// It exists in this package in order to avoid circular dependency with the "statistic" package.
	StatsInverseTable = "statistics"
	// StatsColumn is the table column denoting the stats relation/edge.
	StatsColumn = "stat_description_stats"
)

// Columns holds all SQL columns for statdescription fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldName,
	FieldDescription,
	FieldMetadata,
	FieldOrderNumber,
}

var (
	// GameVersionPrimaryKey and GameVersionColumn2 are the table columns denoting the
	// primary key for the game_version relation (M2M).
	GameVersionPrimaryKey = []string{"stat_description_id", "game_version_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultDescription holds the default value on creation for the "description" field.
	DefaultDescription string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() guidgql.GUID
)

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type stat.StatType) error {
	switch _type.String() {
	case "numeric", "enum", "aggregate":
		return nil
	default:
		return fmt.Errorf("statdescription: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the StatDescription queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByMetadata orders the results by the metadata field.
func ByMetadata(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMetadata, opts...).ToFunc()
}

// ByOrderNumber orders the results by the order_number field.
func ByOrderNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderNumber, opts...).ToFunc()
}

// ByGameVersionCount orders the results by game_version count.
func ByGameVersionCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGameVersionStep(), opts...)
	}
}

// ByGameVersion orders the results by game_version terms.
func ByGameVersion(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGameVersionStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByStatsCount orders the results by stats count.
func ByStatsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStatsStep(), opts...)
	}
}

// ByStats orders the results by stats terms.
func ByStats(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStatsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newGameVersionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GameVersionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, GameVersionTable, GameVersionPrimaryKey...),
	)
}
func newStatsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StatsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StatsTable, StatsColumn),
	)
}

var (
	// stat.StatType must implement graphql.Marshaler.
	_ graphql.Marshaler = (*stat.StatType)(nil)
	// stat.StatType must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*stat.StatType)(nil)
)
