// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/obgs/backend/internal/ent/schema/guidgql"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldAvatarURL holds the string denoting the avatar_url field in the database.
	FieldAvatarURL = "avatar_url"
	// EdgePlayers holds the string denoting the players edge name in mutations.
	EdgePlayers = "players"
	// EdgeMainPlayer holds the string denoting the main_player edge name in mutations.
	EdgeMainPlayer = "main_player"
	// EdgeSentSupervisionRequests holds the string denoting the sent_supervision_requests edge name in mutations.
	EdgeSentSupervisionRequests = "sent_supervision_requests"
	// EdgeSupervisionRequestApprovals holds the string denoting the supervision_request_approvals edge name in mutations.
	EdgeSupervisionRequestApprovals = "supervision_request_approvals"
	// EdgeGroupMemberships holds the string denoting the group_memberships edge name in mutations.
	EdgeGroupMemberships = "group_memberships"
	// EdgeGroupMembershipApplications holds the string denoting the group_membership_applications edge name in mutations.
	EdgeGroupMembershipApplications = "group_membership_applications"
	// EdgeGames holds the string denoting the games edge name in mutations.
	EdgeGames = "games"
	// EdgeFavoriteGames holds the string denoting the favorite_games edge name in mutations.
	EdgeFavoriteGames = "favorite_games"
	// Table holds the table name of the user in the database.
	Table = "users"
	// PlayersTable is the table that holds the players relation/edge. The primary key declared below.
	PlayersTable = "user_players"
	// PlayersInverseTable is the table name for the Player entity.
	// It exists in this package in order to avoid circular dependency with the "player" package.
	PlayersInverseTable = "players"
	// MainPlayerTable is the table that holds the main_player relation/edge.
	MainPlayerTable = "players"
	// MainPlayerInverseTable is the table name for the Player entity.
	// It exists in this package in order to avoid circular dependency with the "player" package.
	MainPlayerInverseTable = "players"
	// MainPlayerColumn is the table column denoting the main_player relation/edge.
	MainPlayerColumn = "user_main_player"
	// SentSupervisionRequestsTable is the table that holds the sent_supervision_requests relation/edge.
	SentSupervisionRequestsTable = "player_supervision_requests"
	// SentSupervisionRequestsInverseTable is the table name for the PlayerSupervisionRequest entity.
	// It exists in this package in order to avoid circular dependency with the "playersupervisionrequest" package.
	SentSupervisionRequestsInverseTable = "player_supervision_requests"
	// SentSupervisionRequestsColumn is the table column denoting the sent_supervision_requests relation/edge.
	SentSupervisionRequestsColumn = "user_sent_supervision_requests"
	// SupervisionRequestApprovalsTable is the table that holds the supervision_request_approvals relation/edge.
	SupervisionRequestApprovalsTable = "player_supervision_request_approvals"
	// SupervisionRequestApprovalsInverseTable is the table name for the PlayerSupervisionRequestApproval entity.
	// It exists in this package in order to avoid circular dependency with the "playersupervisionrequestapproval" package.
	SupervisionRequestApprovalsInverseTable = "player_supervision_request_approvals"
	// SupervisionRequestApprovalsColumn is the table column denoting the supervision_request_approvals relation/edge.
	SupervisionRequestApprovalsColumn = "user_supervision_request_approvals"
	// GroupMembershipsTable is the table that holds the group_memberships relation/edge.
	GroupMembershipsTable = "group_memberships"
	// GroupMembershipsInverseTable is the table name for the GroupMembership entity.
	// It exists in this package in order to avoid circular dependency with the "groupmembership" package.
	GroupMembershipsInverseTable = "group_memberships"
	// GroupMembershipsColumn is the table column denoting the group_memberships relation/edge.
	GroupMembershipsColumn = "user_group_memberships"
	// GroupMembershipApplicationsTable is the table that holds the group_membership_applications relation/edge.
	GroupMembershipApplicationsTable = "group_membership_applications"
	// GroupMembershipApplicationsInverseTable is the table name for the GroupMembershipApplication entity.
	// It exists in this package in order to avoid circular dependency with the "groupmembershipapplication" package.
	GroupMembershipApplicationsInverseTable = "group_membership_applications"
	// GroupMembershipApplicationsColumn is the table column denoting the group_membership_applications relation/edge.
	GroupMembershipApplicationsColumn = "user_group_membership_applications"
	// GamesTable is the table that holds the games relation/edge.
	GamesTable = "games"
	// GamesInverseTable is the table name for the Game entity.
	// It exists in this package in order to avoid circular dependency with the "game" package.
	GamesInverseTable = "games"
	// GamesColumn is the table column denoting the games relation/edge.
	GamesColumn = "user_games"
	// FavoriteGamesTable is the table that holds the favorite_games relation/edge.
	FavoriteGamesTable = "game_favorites"
	// FavoriteGamesInverseTable is the table name for the GameFavorite entity.
	// It exists in this package in order to avoid circular dependency with the "gamefavorite" package.
	FavoriteGamesInverseTable = "game_favorites"
	// FavoriteGamesColumn is the table column denoting the favorite_games relation/edge.
	FavoriteGamesColumn = "user_favorite_games"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldEmail,
	FieldPassword,
	FieldAvatarURL,
}

var (
	// PlayersPrimaryKey and PlayersColumn2 are the table columns denoting the
	// primary key for the players relation (M2M).
	PlayersPrimaryKey = []string{"user_id", "player_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// DefaultAvatarURL holds the default value on creation for the "avatar_url" field.
	DefaultAvatarURL string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() guidgql.GUID
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByAvatarURL orders the results by the avatar_url field.
func ByAvatarURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatarURL, opts...).ToFunc()
}

// ByPlayersCount orders the results by players count.
func ByPlayersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPlayersStep(), opts...)
	}
}

// ByPlayers orders the results by players terms.
func ByPlayers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlayersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMainPlayerField orders the results by main_player field.
func ByMainPlayerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMainPlayerStep(), sql.OrderByField(field, opts...))
	}
}

// BySentSupervisionRequestsCount orders the results by sent_supervision_requests count.
func BySentSupervisionRequestsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSentSupervisionRequestsStep(), opts...)
	}
}

// BySentSupervisionRequests orders the results by sent_supervision_requests terms.
func BySentSupervisionRequests(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSentSupervisionRequestsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySupervisionRequestApprovalsCount orders the results by supervision_request_approvals count.
func BySupervisionRequestApprovalsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSupervisionRequestApprovalsStep(), opts...)
	}
}

// BySupervisionRequestApprovals orders the results by supervision_request_approvals terms.
func BySupervisionRequestApprovals(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSupervisionRequestApprovalsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGroupMembershipsCount orders the results by group_memberships count.
func ByGroupMembershipsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGroupMembershipsStep(), opts...)
	}
}

// ByGroupMemberships orders the results by group_memberships terms.
func ByGroupMemberships(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupMembershipsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGroupMembershipApplicationsCount orders the results by group_membership_applications count.
func ByGroupMembershipApplicationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGroupMembershipApplicationsStep(), opts...)
	}
}

// ByGroupMembershipApplications orders the results by group_membership_applications terms.
func ByGroupMembershipApplications(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupMembershipApplicationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGamesCount orders the results by games count.
func ByGamesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGamesStep(), opts...)
	}
}

// ByGames orders the results by games terms.
func ByGames(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGamesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFavoriteGamesCount orders the results by favorite_games count.
func ByFavoriteGamesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFavoriteGamesStep(), opts...)
	}
}

// ByFavoriteGames orders the results by favorite_games terms.
func ByFavoriteGames(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFavoriteGamesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPlayersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlayersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, PlayersTable, PlayersPrimaryKey...),
	)
}
func newMainPlayerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MainPlayerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, MainPlayerTable, MainPlayerColumn),
	)
}
func newSentSupervisionRequestsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SentSupervisionRequestsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SentSupervisionRequestsTable, SentSupervisionRequestsColumn),
	)
}
func newSupervisionRequestApprovalsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SupervisionRequestApprovalsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SupervisionRequestApprovalsTable, SupervisionRequestApprovalsColumn),
	)
}
func newGroupMembershipsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroupMembershipsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GroupMembershipsTable, GroupMembershipsColumn),
	)
}
func newGroupMembershipApplicationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroupMembershipApplicationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GroupMembershipApplicationsTable, GroupMembershipApplicationsColumn),
	)
}
func newGamesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GamesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GamesTable, GamesColumn),
	)
}
func newFavoriteGamesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FavoriteGamesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FavoriteGamesTable, FavoriteGamesColumn),
	)
}
