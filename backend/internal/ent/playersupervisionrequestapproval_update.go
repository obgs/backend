// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/obgs/backend/internal/ent/playersupervisionrequest"
	"github.com/obgs/backend/internal/ent/playersupervisionrequestapproval"
	"github.com/obgs/backend/internal/ent/predicate"
	"github.com/obgs/backend/internal/ent/schema/guidgql"
	"github.com/obgs/backend/internal/ent/user"
)

// PlayerSupervisionRequestApprovalUpdate is the builder for updating PlayerSupervisionRequestApproval entities.
type PlayerSupervisionRequestApprovalUpdate struct {
	config
	hooks    []Hook
	mutation *PlayerSupervisionRequestApprovalMutation
}

// Where appends a list predicates to the PlayerSupervisionRequestApprovalUpdate builder.
func (psrau *PlayerSupervisionRequestApprovalUpdate) Where(ps ...predicate.PlayerSupervisionRequestApproval) *PlayerSupervisionRequestApprovalUpdate {
	psrau.mutation.Where(ps...)
	return psrau
}

// SetApproved sets the "approved" field.
func (psrau *PlayerSupervisionRequestApprovalUpdate) SetApproved(b bool) *PlayerSupervisionRequestApprovalUpdate {
	psrau.mutation.SetApproved(b)
	return psrau
}

// SetNillableApproved sets the "approved" field if the given value is not nil.
func (psrau *PlayerSupervisionRequestApprovalUpdate) SetNillableApproved(b *bool) *PlayerSupervisionRequestApprovalUpdate {
	if b != nil {
		psrau.SetApproved(*b)
	}
	return psrau
}

// ClearApproved clears the value of the "approved" field.
func (psrau *PlayerSupervisionRequestApprovalUpdate) ClearApproved() *PlayerSupervisionRequestApprovalUpdate {
	psrau.mutation.ClearApproved()
	return psrau
}

// SetApproverID sets the "approver" edge to the User entity by ID.
func (psrau *PlayerSupervisionRequestApprovalUpdate) SetApproverID(id guidgql.GUID) *PlayerSupervisionRequestApprovalUpdate {
	psrau.mutation.SetApproverID(id)
	return psrau
}

// SetApprover sets the "approver" edge to the User entity.
func (psrau *PlayerSupervisionRequestApprovalUpdate) SetApprover(u *User) *PlayerSupervisionRequestApprovalUpdate {
	return psrau.SetApproverID(u.ID)
}

// SetSupervisionRequestID sets the "supervision_request" edge to the PlayerSupervisionRequest entity by ID.
func (psrau *PlayerSupervisionRequestApprovalUpdate) SetSupervisionRequestID(id guidgql.GUID) *PlayerSupervisionRequestApprovalUpdate {
	psrau.mutation.SetSupervisionRequestID(id)
	return psrau
}

// SetSupervisionRequest sets the "supervision_request" edge to the PlayerSupervisionRequest entity.
func (psrau *PlayerSupervisionRequestApprovalUpdate) SetSupervisionRequest(p *PlayerSupervisionRequest) *PlayerSupervisionRequestApprovalUpdate {
	return psrau.SetSupervisionRequestID(p.ID)
}

// Mutation returns the PlayerSupervisionRequestApprovalMutation object of the builder.
func (psrau *PlayerSupervisionRequestApprovalUpdate) Mutation() *PlayerSupervisionRequestApprovalMutation {
	return psrau.mutation
}

// ClearApprover clears the "approver" edge to the User entity.
func (psrau *PlayerSupervisionRequestApprovalUpdate) ClearApprover() *PlayerSupervisionRequestApprovalUpdate {
	psrau.mutation.ClearApprover()
	return psrau
}

// ClearSupervisionRequest clears the "supervision_request" edge to the PlayerSupervisionRequest entity.
func (psrau *PlayerSupervisionRequestApprovalUpdate) ClearSupervisionRequest() *PlayerSupervisionRequestApprovalUpdate {
	psrau.mutation.ClearSupervisionRequest()
	return psrau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (psrau *PlayerSupervisionRequestApprovalUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, psrau.sqlSave, psrau.mutation, psrau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psrau *PlayerSupervisionRequestApprovalUpdate) SaveX(ctx context.Context) int {
	affected, err := psrau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (psrau *PlayerSupervisionRequestApprovalUpdate) Exec(ctx context.Context) error {
	_, err := psrau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psrau *PlayerSupervisionRequestApprovalUpdate) ExecX(ctx context.Context) {
	if err := psrau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psrau *PlayerSupervisionRequestApprovalUpdate) check() error {
	if _, ok := psrau.mutation.ApproverID(); psrau.mutation.ApproverCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PlayerSupervisionRequestApproval.approver"`)
	}
	if _, ok := psrau.mutation.SupervisionRequestID(); psrau.mutation.SupervisionRequestCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PlayerSupervisionRequestApproval.supervision_request"`)
	}
	return nil
}

func (psrau *PlayerSupervisionRequestApprovalUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := psrau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(playersupervisionrequestapproval.Table, playersupervisionrequestapproval.Columns, sqlgraph.NewFieldSpec(playersupervisionrequestapproval.FieldID, field.TypeString))
	if ps := psrau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psrau.mutation.Approved(); ok {
		_spec.SetField(playersupervisionrequestapproval.FieldApproved, field.TypeBool, value)
	}
	if psrau.mutation.ApprovedCleared() {
		_spec.ClearField(playersupervisionrequestapproval.FieldApproved, field.TypeBool)
	}
	if psrau.mutation.ApproverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playersupervisionrequestapproval.ApproverTable,
			Columns: []string{playersupervisionrequestapproval.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psrau.mutation.ApproverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playersupervisionrequestapproval.ApproverTable,
			Columns: []string{playersupervisionrequestapproval.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psrau.mutation.SupervisionRequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playersupervisionrequestapproval.SupervisionRequestTable,
			Columns: []string{playersupervisionrequestapproval.SupervisionRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playersupervisionrequest.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psrau.mutation.SupervisionRequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playersupervisionrequestapproval.SupervisionRequestTable,
			Columns: []string{playersupervisionrequestapproval.SupervisionRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playersupervisionrequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, psrau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playersupervisionrequestapproval.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	psrau.mutation.done = true
	return n, nil
}

// PlayerSupervisionRequestApprovalUpdateOne is the builder for updating a single PlayerSupervisionRequestApproval entity.
type PlayerSupervisionRequestApprovalUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlayerSupervisionRequestApprovalMutation
}

// SetApproved sets the "approved" field.
func (psrauo *PlayerSupervisionRequestApprovalUpdateOne) SetApproved(b bool) *PlayerSupervisionRequestApprovalUpdateOne {
	psrauo.mutation.SetApproved(b)
	return psrauo
}

// SetNillableApproved sets the "approved" field if the given value is not nil.
func (psrauo *PlayerSupervisionRequestApprovalUpdateOne) SetNillableApproved(b *bool) *PlayerSupervisionRequestApprovalUpdateOne {
	if b != nil {
		psrauo.SetApproved(*b)
	}
	return psrauo
}

// ClearApproved clears the value of the "approved" field.
func (psrauo *PlayerSupervisionRequestApprovalUpdateOne) ClearApproved() *PlayerSupervisionRequestApprovalUpdateOne {
	psrauo.mutation.ClearApproved()
	return psrauo
}

// SetApproverID sets the "approver" edge to the User entity by ID.
func (psrauo *PlayerSupervisionRequestApprovalUpdateOne) SetApproverID(id guidgql.GUID) *PlayerSupervisionRequestApprovalUpdateOne {
	psrauo.mutation.SetApproverID(id)
	return psrauo
}

// SetApprover sets the "approver" edge to the User entity.
func (psrauo *PlayerSupervisionRequestApprovalUpdateOne) SetApprover(u *User) *PlayerSupervisionRequestApprovalUpdateOne {
	return psrauo.SetApproverID(u.ID)
}

// SetSupervisionRequestID sets the "supervision_request" edge to the PlayerSupervisionRequest entity by ID.
func (psrauo *PlayerSupervisionRequestApprovalUpdateOne) SetSupervisionRequestID(id guidgql.GUID) *PlayerSupervisionRequestApprovalUpdateOne {
	psrauo.mutation.SetSupervisionRequestID(id)
	return psrauo
}

// SetSupervisionRequest sets the "supervision_request" edge to the PlayerSupervisionRequest entity.
func (psrauo *PlayerSupervisionRequestApprovalUpdateOne) SetSupervisionRequest(p *PlayerSupervisionRequest) *PlayerSupervisionRequestApprovalUpdateOne {
	return psrauo.SetSupervisionRequestID(p.ID)
}

// Mutation returns the PlayerSupervisionRequestApprovalMutation object of the builder.
func (psrauo *PlayerSupervisionRequestApprovalUpdateOne) Mutation() *PlayerSupervisionRequestApprovalMutation {
	return psrauo.mutation
}

// ClearApprover clears the "approver" edge to the User entity.
func (psrauo *PlayerSupervisionRequestApprovalUpdateOne) ClearApprover() *PlayerSupervisionRequestApprovalUpdateOne {
	psrauo.mutation.ClearApprover()
	return psrauo
}

// ClearSupervisionRequest clears the "supervision_request" edge to the PlayerSupervisionRequest entity.
func (psrauo *PlayerSupervisionRequestApprovalUpdateOne) ClearSupervisionRequest() *PlayerSupervisionRequestApprovalUpdateOne {
	psrauo.mutation.ClearSupervisionRequest()
	return psrauo
}

// Where appends a list predicates to the PlayerSupervisionRequestApprovalUpdate builder.
func (psrauo *PlayerSupervisionRequestApprovalUpdateOne) Where(ps ...predicate.PlayerSupervisionRequestApproval) *PlayerSupervisionRequestApprovalUpdateOne {
	psrauo.mutation.Where(ps...)
	return psrauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (psrauo *PlayerSupervisionRequestApprovalUpdateOne) Select(field string, fields ...string) *PlayerSupervisionRequestApprovalUpdateOne {
	psrauo.fields = append([]string{field}, fields...)
	return psrauo
}

// Save executes the query and returns the updated PlayerSupervisionRequestApproval entity.
func (psrauo *PlayerSupervisionRequestApprovalUpdateOne) Save(ctx context.Context) (*PlayerSupervisionRequestApproval, error) {
	return withHooks(ctx, psrauo.sqlSave, psrauo.mutation, psrauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (psrauo *PlayerSupervisionRequestApprovalUpdateOne) SaveX(ctx context.Context) *PlayerSupervisionRequestApproval {
	node, err := psrauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (psrauo *PlayerSupervisionRequestApprovalUpdateOne) Exec(ctx context.Context) error {
	_, err := psrauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psrauo *PlayerSupervisionRequestApprovalUpdateOne) ExecX(ctx context.Context) {
	if err := psrauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psrauo *PlayerSupervisionRequestApprovalUpdateOne) check() error {
	if _, ok := psrauo.mutation.ApproverID(); psrauo.mutation.ApproverCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PlayerSupervisionRequestApproval.approver"`)
	}
	if _, ok := psrauo.mutation.SupervisionRequestID(); psrauo.mutation.SupervisionRequestCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PlayerSupervisionRequestApproval.supervision_request"`)
	}
	return nil
}

func (psrauo *PlayerSupervisionRequestApprovalUpdateOne) sqlSave(ctx context.Context) (_node *PlayerSupervisionRequestApproval, err error) {
	if err := psrauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(playersupervisionrequestapproval.Table, playersupervisionrequestapproval.Columns, sqlgraph.NewFieldSpec(playersupervisionrequestapproval.FieldID, field.TypeString))
	id, ok := psrauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PlayerSupervisionRequestApproval.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := psrauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, playersupervisionrequestapproval.FieldID)
		for _, f := range fields {
			if !playersupervisionrequestapproval.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != playersupervisionrequestapproval.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := psrauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := psrauo.mutation.Approved(); ok {
		_spec.SetField(playersupervisionrequestapproval.FieldApproved, field.TypeBool, value)
	}
	if psrauo.mutation.ApprovedCleared() {
		_spec.ClearField(playersupervisionrequestapproval.FieldApproved, field.TypeBool)
	}
	if psrauo.mutation.ApproverCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playersupervisionrequestapproval.ApproverTable,
			Columns: []string{playersupervisionrequestapproval.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psrauo.mutation.ApproverIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playersupervisionrequestapproval.ApproverTable,
			Columns: []string{playersupervisionrequestapproval.ApproverColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if psrauo.mutation.SupervisionRequestCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playersupervisionrequestapproval.SupervisionRequestTable,
			Columns: []string{playersupervisionrequestapproval.SupervisionRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playersupervisionrequest.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := psrauo.mutation.SupervisionRequestIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   playersupervisionrequestapproval.SupervisionRequestTable,
			Columns: []string{playersupervisionrequestapproval.SupervisionRequestColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(playersupervisionrequest.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PlayerSupervisionRequestApproval{config: psrauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, psrauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{playersupervisionrequestapproval.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	psrauo.mutation.done = true
	return _node, nil
}
