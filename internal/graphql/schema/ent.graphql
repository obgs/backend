directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Game implements Node {
  id: ID!
  name: String!
  minPlayers: Int!
  maxPlayers: Int!
  description: String
  boardgamegeekURL: String
  author: User!
}
"""A connection to a list of items."""
type GameConnection {
  """A list of edges."""
  edges: [GameEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type GameEdge {
  """The item at the end of the edge."""
  node: Game
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
GameWhereInput is used for filtering Game objects.
Input was generated by ent.
"""
input GameWhereInput {
  not: GameWhereInput
  and: [GameWhereInput!]
  or: [GameWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """min_players field predicates"""
  minPlayers: Int
  minPlayersNEQ: Int
  minPlayersIn: [Int!]
  minPlayersNotIn: [Int!]
  minPlayersGT: Int
  minPlayersGTE: Int
  minPlayersLT: Int
  minPlayersLTE: Int
  """max_players field predicates"""
  maxPlayers: Int
  maxPlayersNEQ: Int
  maxPlayersIn: [Int!]
  maxPlayersNotIn: [Int!]
  maxPlayersGT: Int
  maxPlayersGTE: Int
  maxPlayersLT: Int
  maxPlayersLTE: Int
  """author edge predicates"""
  hasAuthor: Boolean
  hasAuthorWith: [UserWhereInput!]
}
type Group implements Node {
  id: ID!
  name: String!
  description: String!
  logoURL: String!
  settings: GroupSettings!
  members(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for GroupMemberships returned from the connection."""
    where: GroupMembershipWhereInput
  ): GroupMembershipConnection!
  applications: [GroupMembershipApplication!]
}
"""A connection to a list of items."""
type GroupConnection {
  """A list of edges."""
  edges: [GroupEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type GroupEdge {
  """The item at the end of the edge."""
  node: Group
  """A cursor for use in pagination."""
  cursor: Cursor!
}
type GroupMembership implements Node {
  id: ID!
  role: GroupMembershipRole!
  group: Group!
  user: User!
}
type GroupMembershipApplication implements Node {
  id: ID!
  message: String!
  user: User!
  group: Group!
}
"""A connection to a list of items."""
type GroupMembershipConnection {
  """A list of edges."""
  edges: [GroupMembershipEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type GroupMembershipEdge {
  """The item at the end of the edge."""
  node: GroupMembership
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""GroupMembershipRole is enum for the field role"""
enum GroupMembershipRole @goModel(model: "github.com/open-boardgame-stats/backend/internal/ent/enums.Role") {
  owner
  admin
  member
}
"""
GroupMembershipWhereInput is used for filtering GroupMembership objects.
Input was generated by ent.
"""
input GroupMembershipWhereInput {
  not: GroupMembershipWhereInput
  and: [GroupMembershipWhereInput!]
  or: [GroupMembershipWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """role field predicates"""
  role: GroupMembershipRole
  roleNEQ: GroupMembershipRole
  roleIn: [GroupMembershipRole!]
  roleNotIn: [GroupMembershipRole!]
  """group edge predicates"""
  hasGroup: Boolean
  hasGroupWith: [GroupWhereInput!]
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
}
type GroupSettings implements Node {
  id: ID!
  visibility: GroupSettingsVisibility!
  joinPolicy: GroupSettingsJoinPolicy!
  minimumRoleToInvite: GroupMembershipRole
}
"""GroupSettingsJoinPolicy is enum for the field join_policy"""
enum GroupSettingsJoinPolicy @goModel(model: "github.com/open-boardgame-stats/backend/internal/ent/groupsettings.JoinPolicy") {
  OPEN
  INVITE_ONLY
  APPLICATION_ONLY
  INVITE_OR_APPLICATION
}
"""GroupSettingsVisibility is enum for the field visibility"""
enum GroupSettingsVisibility @goModel(model: "github.com/open-boardgame-stats/backend/internal/ent/groupsettings.Visibility") {
  PUBLIC
  PRIVATE
}
"""
GroupSettingsWhereInput is used for filtering GroupSettings objects.
Input was generated by ent.
"""
input GroupSettingsWhereInput {
  not: GroupSettingsWhereInput
  and: [GroupSettingsWhereInput!]
  or: [GroupSettingsWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """visibility field predicates"""
  visibility: GroupSettingsVisibility
  visibilityNEQ: GroupSettingsVisibility
  visibilityIn: [GroupSettingsVisibility!]
  visibilityNotIn: [GroupSettingsVisibility!]
  """join_policy field predicates"""
  joinPolicy: GroupSettingsJoinPolicy
  joinPolicyNEQ: GroupSettingsJoinPolicy
  joinPolicyIn: [GroupSettingsJoinPolicy!]
  joinPolicyNotIn: [GroupSettingsJoinPolicy!]
}
"""
GroupWhereInput is used for filtering Group objects.
Input was generated by ent.
"""
input GroupWhereInput {
  not: GroupWhereInput
  and: [GroupWhereInput!]
  or: [GroupWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """settings edge predicates"""
  hasSettings: Boolean
  hasSettingsWith: [GroupSettingsWhereInput!]
  """members edge predicates"""
  hasMembers: Boolean
  hasMembersWith: [GroupMembershipWhereInput!]
}
type Match implements Node {
  id: ID!
  game: Game!
  players: [Player!]!
  stats: [Statistic!]
}
"""A connection to a list of items."""
type MatchConnection {
  """A list of edges."""
  edges: [MatchEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type MatchEdge {
  """The item at the end of the edge."""
  node: Match
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
MatchWhereInput is used for filtering Match objects.
Input was generated by ent.
"""
input MatchWhereInput {
  not: MatchWhereInput
  and: [MatchWhereInput!]
  or: [MatchWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """game edge predicates"""
  hasGame: Boolean
  hasGameWith: [GameWhereInput!]
  """players edge predicates"""
  hasPlayers: Boolean
  hasPlayersWith: [PlayerWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/open-boardgame-stats/backend/internal/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Player implements Node {
  id: ID!
  name: String!
  owner: User
  supervisors: [User!]
  supervisionRequests: [PlayerSupervisionRequest!]
  matches: [Match!]
}
"""A connection to a list of items."""
type PlayerConnection {
  """A list of edges."""
  edges: [PlayerEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type PlayerEdge {
  """The item at the end of the edge."""
  node: Player
  """A cursor for use in pagination."""
  cursor: Cursor!
}
type PlayerSupervisionRequest implements Node {
  id: ID!
  message: String
  sender: User!
  player: Player!
  approvals: [PlayerSupervisionRequestApproval!]
}
type PlayerSupervisionRequestApproval implements Node {
  id: ID!
  approved: Boolean
  approver: User!
  supervisionRequest: PlayerSupervisionRequest!
}
"""
PlayerSupervisionRequestApprovalWhereInput is used for filtering PlayerSupervisionRequestApproval objects.
Input was generated by ent.
"""
input PlayerSupervisionRequestApprovalWhereInput {
  not: PlayerSupervisionRequestApprovalWhereInput
  and: [PlayerSupervisionRequestApprovalWhereInput!]
  or: [PlayerSupervisionRequestApprovalWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """approved field predicates"""
  approved: Boolean
  approvedNEQ: Boolean
  approvedIsNil: Boolean
  approvedNotNil: Boolean
  """approver edge predicates"""
  hasApprover: Boolean
  hasApproverWith: [UserWhereInput!]
  """supervision_request edge predicates"""
  hasSupervisionRequest: Boolean
  hasSupervisionRequestWith: [PlayerSupervisionRequestWhereInput!]
}
"""
PlayerSupervisionRequestWhereInput is used for filtering PlayerSupervisionRequest objects.
Input was generated by ent.
"""
input PlayerSupervisionRequestWhereInput {
  not: PlayerSupervisionRequestWhereInput
  and: [PlayerSupervisionRequestWhereInput!]
  or: [PlayerSupervisionRequestWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """sender edge predicates"""
  hasSender: Boolean
  hasSenderWith: [UserWhereInput!]
  """player edge predicates"""
  hasPlayer: Boolean
  hasPlayerWith: [PlayerWhereInput!]
  """approvals edge predicates"""
  hasApprovals: Boolean
  hasApprovalsWith: [PlayerSupervisionRequestApprovalWhereInput!]
}
"""
PlayerWhereInput is used for filtering Player objects.
Input was generated by ent.
"""
input PlayerWhereInput {
  not: PlayerWhereInput
  and: [PlayerWhereInput!]
  or: [PlayerWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [UserWhereInput!]
  """supervisors edge predicates"""
  hasSupervisors: Boolean
  hasSupervisorsWith: [UserWhereInput!]
  """supervision_requests edge predicates"""
  hasSupervisionRequests: Boolean
  hasSupervisionRequestsWith: [PlayerSupervisionRequestWhereInput!]
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  games(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Games returned from the connection."""
    where: GameWhereInput
  ): GameConnection!
  groups(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Groups returned from the connection."""
    where: GroupWhereInput
  ): GroupConnection!
  matches(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Matches returned from the connection."""
    where: MatchWhereInput
  ): MatchConnection!
  players(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Players returned from the connection."""
    where: PlayerWhereInput
  ): PlayerConnection!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Users returned from the connection."""
    where: UserWhereInput
  ): UserConnection!
}
type StatDescription implements Node {
  id: ID!
  type: StatDescriptionStatType!
  name: String!
  description: String
  metadata: String
  orderNumber: Int!
}
"""StatDescriptionStatType is enum for the field type"""
enum StatDescriptionStatType @goModel(model: "github.com/open-boardgame-stats/backend/internal/ent/schema/stat.StatType") {
  numeric
  enum
}
type Statistic implements Node {
  id: ID!
  value: String!
  match: Match!
  statDescription: StatDescription!
  player: Player!
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  name: String
  email: String
  avatarURL: String
  addPlayerIDs: [ID!]
  removePlayerIDs: [ID!]
  clearMainPlayer: Boolean
  mainPlayerID: ID
}
type User implements Node {
  id: ID!
  name: String!
  email: String!
  avatarURL: String!
  players: [Player!]
  mainPlayer: Player
  groupMemberships: [GroupMembership!]
  groupMembershipApplications: [GroupMembershipApplication!]
  games: [Game!]
}
"""A connection to a list of items."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """email field predicates"""
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """players edge predicates"""
  hasPlayers: Boolean
  hasPlayersWith: [PlayerWhereInput!]
  """main_player edge predicates"""
  hasMainPlayer: Boolean
  hasMainPlayerWith: [PlayerWhereInput!]
  """group_memberships edge predicates"""
  hasGroupMemberships: Boolean
  hasGroupMembershipsWith: [GroupMembershipWhereInput!]
  """games edge predicates"""
  hasGames: Boolean
  hasGamesWith: [GameWhereInput!]
}
