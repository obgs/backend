// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"github.com/open-boardgame-stats/backend/internal/ent"
	"github.com/open-boardgame-stats/backend/internal/ent/enums"
	"github.com/open-boardgame-stats/backend/internal/ent/groupsettings"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/stat"
)

type CreateGameInput struct {
	Name             string                  `json:"name"`
	MinPlayers       int                     `json:"minPlayers"`
	MaxPlayers       int                     `json:"maxPlayers"`
	Description      *string                 `json:"description"`
	BoardgamegeekURL *string                 `json:"boardgamegeekURL"`
	StatDescriptions []*StatDescriptionInput `json:"statDescriptions"`
}

type CreateMatchInput struct {
	GameID    guidgql.GUID    `json:"gameId"`
	PlayerIds []*guidgql.GUID `json:"playerIds"`
	Stats     []*StatInput    `json:"stats"`
}

type CreateOrUpdateGroupInput struct {
	ID          *guidgql.GUID       `json:"id"`
	Name        string              `json:"name"`
	Description *string             `json:"description"`
	LogoURL     string              `json:"logoUrl"`
	Settings    *GroupSettingsInput `json:"settings"`
}

type CreatePlayerInput struct {
	Name string `json:"name"`
}

type EnumStatInput struct {
	PossibleValues []string `json:"possibleValues"`
}

type Favorites struct {
	Total int         `json:"total"`
	Users []*ent.User `json:"users"`
}

type GroupApplicationInput struct {
	GroupID guidgql.GUID `json:"groupId"`
	Message *string      `json:"message"`
}

type GroupSettingsInput struct {
	Visibility          groupsettings.Visibility `json:"visibility"`
	JoinPolicy          groupsettings.JoinPolicy `json:"joinPolicy"`
	MinimumRoleToInvite *enums.Role              `json:"minimumRoleToInvite"`
}

type RequestPlayerSupervisionInput struct {
	PlayerID guidgql.GUID `json:"playerId"`
	Message  *string      `json:"message"`
}

type ResolvePlayerSupervisionRequestInput struct {
	RequestID guidgql.GUID `json:"requestId"`
	Approved  bool         `json:"approved"`
}

type StatDescriptionInput struct {
	Type        stat.StatType `json:"type"`
	Name        string        `json:"name"`
	Description *string       `json:"description"`
	// Possible values for this stat. Provide this only for enum type, otherwise an error will be thrown
	EnumStatInput *EnumStatInput `json:"enumStatInput"`
}

type StatInput struct {
	// The StatDescription ID of the stat to be created
	StatID   guidgql.GUID `json:"statId"`
	Value    string       `json:"value"`
	PlayerID guidgql.GUID `json:"playerId"`
}
