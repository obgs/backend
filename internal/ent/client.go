// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/open-boardgame-stats/backend/internal/ent/migrate"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"

	"github.com/open-boardgame-stats/backend/internal/ent/enumstat"
	"github.com/open-boardgame-stats/backend/internal/ent/enumstatdescription"
	"github.com/open-boardgame-stats/backend/internal/ent/game"
	"github.com/open-boardgame-stats/backend/internal/ent/gamefavorite"
	"github.com/open-boardgame-stats/backend/internal/ent/group"
	"github.com/open-boardgame-stats/backend/internal/ent/groupmembership"
	"github.com/open-boardgame-stats/backend/internal/ent/groupmembershipapplication"
	"github.com/open-boardgame-stats/backend/internal/ent/groupsettings"
	"github.com/open-boardgame-stats/backend/internal/ent/match"
	"github.com/open-boardgame-stats/backend/internal/ent/numericalstat"
	"github.com/open-boardgame-stats/backend/internal/ent/numericalstatdescription"
	"github.com/open-boardgame-stats/backend/internal/ent/player"
	"github.com/open-boardgame-stats/backend/internal/ent/playersupervisionrequest"
	"github.com/open-boardgame-stats/backend/internal/ent/playersupervisionrequestapproval"
	"github.com/open-boardgame-stats/backend/internal/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// EnumStat is the client for interacting with the EnumStat builders.
	EnumStat *EnumStatClient
	// EnumStatDescription is the client for interacting with the EnumStatDescription builders.
	EnumStatDescription *EnumStatDescriptionClient
	// Game is the client for interacting with the Game builders.
	Game *GameClient
	// GameFavorite is the client for interacting with the GameFavorite builders.
	GameFavorite *GameFavoriteClient
	// Group is the client for interacting with the Group builders.
	Group *GroupClient
	// GroupMembership is the client for interacting with the GroupMembership builders.
	GroupMembership *GroupMembershipClient
	// GroupMembershipApplication is the client for interacting with the GroupMembershipApplication builders.
	GroupMembershipApplication *GroupMembershipApplicationClient
	// GroupSettings is the client for interacting with the GroupSettings builders.
	GroupSettings *GroupSettingsClient
	// Match is the client for interacting with the Match builders.
	Match *MatchClient
	// NumericalStat is the client for interacting with the NumericalStat builders.
	NumericalStat *NumericalStatClient
	// NumericalStatDescription is the client for interacting with the NumericalStatDescription builders.
	NumericalStatDescription *NumericalStatDescriptionClient
	// Player is the client for interacting with the Player builders.
	Player *PlayerClient
	// PlayerSupervisionRequest is the client for interacting with the PlayerSupervisionRequest builders.
	PlayerSupervisionRequest *PlayerSupervisionRequestClient
	// PlayerSupervisionRequestApproval is the client for interacting with the PlayerSupervisionRequestApproval builders.
	PlayerSupervisionRequestApproval *PlayerSupervisionRequestApprovalClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.EnumStat = NewEnumStatClient(c.config)
	c.EnumStatDescription = NewEnumStatDescriptionClient(c.config)
	c.Game = NewGameClient(c.config)
	c.GameFavorite = NewGameFavoriteClient(c.config)
	c.Group = NewGroupClient(c.config)
	c.GroupMembership = NewGroupMembershipClient(c.config)
	c.GroupMembershipApplication = NewGroupMembershipApplicationClient(c.config)
	c.GroupSettings = NewGroupSettingsClient(c.config)
	c.Match = NewMatchClient(c.config)
	c.NumericalStat = NewNumericalStatClient(c.config)
	c.NumericalStatDescription = NewNumericalStatDescriptionClient(c.config)
	c.Player = NewPlayerClient(c.config)
	c.PlayerSupervisionRequest = NewPlayerSupervisionRequestClient(c.config)
	c.PlayerSupervisionRequestApproval = NewPlayerSupervisionRequestApprovalClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                              ctx,
		config:                           cfg,
		EnumStat:                         NewEnumStatClient(cfg),
		EnumStatDescription:              NewEnumStatDescriptionClient(cfg),
		Game:                             NewGameClient(cfg),
		GameFavorite:                     NewGameFavoriteClient(cfg),
		Group:                            NewGroupClient(cfg),
		GroupMembership:                  NewGroupMembershipClient(cfg),
		GroupMembershipApplication:       NewGroupMembershipApplicationClient(cfg),
		GroupSettings:                    NewGroupSettingsClient(cfg),
		Match:                            NewMatchClient(cfg),
		NumericalStat:                    NewNumericalStatClient(cfg),
		NumericalStatDescription:         NewNumericalStatDescriptionClient(cfg),
		Player:                           NewPlayerClient(cfg),
		PlayerSupervisionRequest:         NewPlayerSupervisionRequestClient(cfg),
		PlayerSupervisionRequestApproval: NewPlayerSupervisionRequestApprovalClient(cfg),
		User:                             NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                              ctx,
		config:                           cfg,
		EnumStat:                         NewEnumStatClient(cfg),
		EnumStatDescription:              NewEnumStatDescriptionClient(cfg),
		Game:                             NewGameClient(cfg),
		GameFavorite:                     NewGameFavoriteClient(cfg),
		Group:                            NewGroupClient(cfg),
		GroupMembership:                  NewGroupMembershipClient(cfg),
		GroupMembershipApplication:       NewGroupMembershipApplicationClient(cfg),
		GroupSettings:                    NewGroupSettingsClient(cfg),
		Match:                            NewMatchClient(cfg),
		NumericalStat:                    NewNumericalStatClient(cfg),
		NumericalStatDescription:         NewNumericalStatDescriptionClient(cfg),
		Player:                           NewPlayerClient(cfg),
		PlayerSupervisionRequest:         NewPlayerSupervisionRequestClient(cfg),
		PlayerSupervisionRequestApproval: NewPlayerSupervisionRequestApprovalClient(cfg),
		User:                             NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		EnumStat.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.EnumStat.Use(hooks...)
	c.EnumStatDescription.Use(hooks...)
	c.Game.Use(hooks...)
	c.GameFavorite.Use(hooks...)
	c.Group.Use(hooks...)
	c.GroupMembership.Use(hooks...)
	c.GroupMembershipApplication.Use(hooks...)
	c.GroupSettings.Use(hooks...)
	c.Match.Use(hooks...)
	c.NumericalStat.Use(hooks...)
	c.NumericalStatDescription.Use(hooks...)
	c.Player.Use(hooks...)
	c.PlayerSupervisionRequest.Use(hooks...)
	c.PlayerSupervisionRequestApproval.Use(hooks...)
	c.User.Use(hooks...)
}

// EnumStatClient is a client for the EnumStat schema.
type EnumStatClient struct {
	config
}

// NewEnumStatClient returns a client for the EnumStat from the given config.
func NewEnumStatClient(c config) *EnumStatClient {
	return &EnumStatClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `enumstat.Hooks(f(g(h())))`.
func (c *EnumStatClient) Use(hooks ...Hook) {
	c.hooks.EnumStat = append(c.hooks.EnumStat, hooks...)
}

// Create returns a builder for creating a EnumStat entity.
func (c *EnumStatClient) Create() *EnumStatCreate {
	mutation := newEnumStatMutation(c.config, OpCreate)
	return &EnumStatCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EnumStat entities.
func (c *EnumStatClient) CreateBulk(builders ...*EnumStatCreate) *EnumStatCreateBulk {
	return &EnumStatCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EnumStat.
func (c *EnumStatClient) Update() *EnumStatUpdate {
	mutation := newEnumStatMutation(c.config, OpUpdate)
	return &EnumStatUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EnumStatClient) UpdateOne(es *EnumStat) *EnumStatUpdateOne {
	mutation := newEnumStatMutation(c.config, OpUpdateOne, withEnumStat(es))
	return &EnumStatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EnumStatClient) UpdateOneID(id guidgql.GUID) *EnumStatUpdateOne {
	mutation := newEnumStatMutation(c.config, OpUpdateOne, withEnumStatID(id))
	return &EnumStatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EnumStat.
func (c *EnumStatClient) Delete() *EnumStatDelete {
	mutation := newEnumStatMutation(c.config, OpDelete)
	return &EnumStatDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EnumStatClient) DeleteOne(es *EnumStat) *EnumStatDeleteOne {
	return c.DeleteOneID(es.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EnumStatClient) DeleteOneID(id guidgql.GUID) *EnumStatDeleteOne {
	builder := c.Delete().Where(enumstat.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EnumStatDeleteOne{builder}
}

// Query returns a query builder for EnumStat.
func (c *EnumStatClient) Query() *EnumStatQuery {
	return &EnumStatQuery{
		config: c.config,
	}
}

// Get returns a EnumStat entity by its id.
func (c *EnumStatClient) Get(ctx context.Context, id guidgql.GUID) (*EnumStat, error) {
	return c.Query().Where(enumstat.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EnumStatClient) GetX(ctx context.Context, id guidgql.GUID) *EnumStat {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMatch queries the match edge of a EnumStat.
func (c *EnumStatClient) QueryMatch(es *EnumStat) *MatchQuery {
	query := &MatchQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := es.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enumstat.Table, enumstat.FieldID, id),
			sqlgraph.To(match.Table, match.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enumstat.MatchTable, enumstat.MatchColumn),
		)
		fromV = sqlgraph.Neighbors(es.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnumStatDescription queries the enum_stat_description edge of a EnumStat.
func (c *EnumStatClient) QueryEnumStatDescription(es *EnumStat) *EnumStatDescriptionQuery {
	query := &EnumStatDescriptionQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := es.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enumstat.Table, enumstat.FieldID, id),
			sqlgraph.To(enumstatdescription.Table, enumstatdescription.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enumstat.EnumStatDescriptionTable, enumstat.EnumStatDescriptionColumn),
		)
		fromV = sqlgraph.Neighbors(es.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlayer queries the player edge of a EnumStat.
func (c *EnumStatClient) QueryPlayer(es *EnumStat) *PlayerQuery {
	query := &PlayerQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := es.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enumstat.Table, enumstat.FieldID, id),
			sqlgraph.To(player.Table, player.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enumstat.PlayerTable, enumstat.PlayerColumn),
		)
		fromV = sqlgraph.Neighbors(es.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EnumStatClient) Hooks() []Hook {
	return c.hooks.EnumStat
}

// EnumStatDescriptionClient is a client for the EnumStatDescription schema.
type EnumStatDescriptionClient struct {
	config
}

// NewEnumStatDescriptionClient returns a client for the EnumStatDescription from the given config.
func NewEnumStatDescriptionClient(c config) *EnumStatDescriptionClient {
	return &EnumStatDescriptionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `enumstatdescription.Hooks(f(g(h())))`.
func (c *EnumStatDescriptionClient) Use(hooks ...Hook) {
	c.hooks.EnumStatDescription = append(c.hooks.EnumStatDescription, hooks...)
}

// Create returns a builder for creating a EnumStatDescription entity.
func (c *EnumStatDescriptionClient) Create() *EnumStatDescriptionCreate {
	mutation := newEnumStatDescriptionMutation(c.config, OpCreate)
	return &EnumStatDescriptionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EnumStatDescription entities.
func (c *EnumStatDescriptionClient) CreateBulk(builders ...*EnumStatDescriptionCreate) *EnumStatDescriptionCreateBulk {
	return &EnumStatDescriptionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EnumStatDescription.
func (c *EnumStatDescriptionClient) Update() *EnumStatDescriptionUpdate {
	mutation := newEnumStatDescriptionMutation(c.config, OpUpdate)
	return &EnumStatDescriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EnumStatDescriptionClient) UpdateOne(esd *EnumStatDescription) *EnumStatDescriptionUpdateOne {
	mutation := newEnumStatDescriptionMutation(c.config, OpUpdateOne, withEnumStatDescription(esd))
	return &EnumStatDescriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EnumStatDescriptionClient) UpdateOneID(id guidgql.GUID) *EnumStatDescriptionUpdateOne {
	mutation := newEnumStatDescriptionMutation(c.config, OpUpdateOne, withEnumStatDescriptionID(id))
	return &EnumStatDescriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EnumStatDescription.
func (c *EnumStatDescriptionClient) Delete() *EnumStatDescriptionDelete {
	mutation := newEnumStatDescriptionMutation(c.config, OpDelete)
	return &EnumStatDescriptionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EnumStatDescriptionClient) DeleteOne(esd *EnumStatDescription) *EnumStatDescriptionDeleteOne {
	return c.DeleteOneID(esd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EnumStatDescriptionClient) DeleteOneID(id guidgql.GUID) *EnumStatDescriptionDeleteOne {
	builder := c.Delete().Where(enumstatdescription.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EnumStatDescriptionDeleteOne{builder}
}

// Query returns a query builder for EnumStatDescription.
func (c *EnumStatDescriptionClient) Query() *EnumStatDescriptionQuery {
	return &EnumStatDescriptionQuery{
		config: c.config,
	}
}

// Get returns a EnumStatDescription entity by its id.
func (c *EnumStatDescriptionClient) Get(ctx context.Context, id guidgql.GUID) (*EnumStatDescription, error) {
	return c.Query().Where(enumstatdescription.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EnumStatDescriptionClient) GetX(ctx context.Context, id guidgql.GUID) *EnumStatDescription {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGame queries the game edge of a EnumStatDescription.
func (c *EnumStatDescriptionClient) QueryGame(esd *EnumStatDescription) *GameQuery {
	query := &GameQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := esd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enumstatdescription.Table, enumstatdescription.FieldID, id),
			sqlgraph.To(game.Table, game.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, enumstatdescription.GameTable, enumstatdescription.GamePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(esd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnumStats queries the enum_stats edge of a EnumStatDescription.
func (c *EnumStatDescriptionClient) QueryEnumStats(esd *EnumStatDescription) *EnumStatQuery {
	query := &EnumStatQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := esd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(enumstatdescription.Table, enumstatdescription.FieldID, id),
			sqlgraph.To(enumstat.Table, enumstat.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enumstatdescription.EnumStatsTable, enumstatdescription.EnumStatsColumn),
		)
		fromV = sqlgraph.Neighbors(esd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EnumStatDescriptionClient) Hooks() []Hook {
	return c.hooks.EnumStatDescription
}

// GameClient is a client for the Game schema.
type GameClient struct {
	config
}

// NewGameClient returns a client for the Game from the given config.
func NewGameClient(c config) *GameClient {
	return &GameClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `game.Hooks(f(g(h())))`.
func (c *GameClient) Use(hooks ...Hook) {
	c.hooks.Game = append(c.hooks.Game, hooks...)
}

// Create returns a builder for creating a Game entity.
func (c *GameClient) Create() *GameCreate {
	mutation := newGameMutation(c.config, OpCreate)
	return &GameCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Game entities.
func (c *GameClient) CreateBulk(builders ...*GameCreate) *GameCreateBulk {
	return &GameCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Game.
func (c *GameClient) Update() *GameUpdate {
	mutation := newGameMutation(c.config, OpUpdate)
	return &GameUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GameClient) UpdateOne(ga *Game) *GameUpdateOne {
	mutation := newGameMutation(c.config, OpUpdateOne, withGame(ga))
	return &GameUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GameClient) UpdateOneID(id guidgql.GUID) *GameUpdateOne {
	mutation := newGameMutation(c.config, OpUpdateOne, withGameID(id))
	return &GameUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Game.
func (c *GameClient) Delete() *GameDelete {
	mutation := newGameMutation(c.config, OpDelete)
	return &GameDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GameClient) DeleteOne(ga *Game) *GameDeleteOne {
	return c.DeleteOneID(ga.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GameClient) DeleteOneID(id guidgql.GUID) *GameDeleteOne {
	builder := c.Delete().Where(game.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GameDeleteOne{builder}
}

// Query returns a query builder for Game.
func (c *GameClient) Query() *GameQuery {
	return &GameQuery{
		config: c.config,
	}
}

// Get returns a Game entity by its id.
func (c *GameClient) Get(ctx context.Context, id guidgql.GUID) (*Game, error) {
	return c.Query().Where(game.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GameClient) GetX(ctx context.Context, id guidgql.GUID) *Game {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAuthor queries the author edge of a Game.
func (c *GameClient) QueryAuthor(ga *Game) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(game.Table, game.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, game.AuthorTable, game.AuthorColumn),
		)
		fromV = sqlgraph.Neighbors(ga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFavorites queries the favorites edge of a Game.
func (c *GameClient) QueryFavorites(ga *Game) *GameFavoriteQuery {
	query := &GameFavoriteQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(game.Table, game.FieldID, id),
			sqlgraph.To(gamefavorite.Table, gamefavorite.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, game.FavoritesTable, game.FavoritesColumn),
		)
		fromV = sqlgraph.Neighbors(ga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNumericalStatDescriptions queries the numerical_stat_descriptions edge of a Game.
func (c *GameClient) QueryNumericalStatDescriptions(ga *Game) *NumericalStatDescriptionQuery {
	query := &NumericalStatDescriptionQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(game.Table, game.FieldID, id),
			sqlgraph.To(numericalstatdescription.Table, numericalstatdescription.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, game.NumericalStatDescriptionsTable, game.NumericalStatDescriptionsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnumStatDescriptions queries the enum_stat_descriptions edge of a Game.
func (c *GameClient) QueryEnumStatDescriptions(ga *Game) *EnumStatDescriptionQuery {
	query := &EnumStatDescriptionQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(game.Table, game.FieldID, id),
			sqlgraph.To(enumstatdescription.Table, enumstatdescription.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, game.EnumStatDescriptionsTable, game.EnumStatDescriptionsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMatches queries the matches edge of a Game.
func (c *GameClient) QueryMatches(ga *Game) *MatchQuery {
	query := &MatchQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(game.Table, game.FieldID, id),
			sqlgraph.To(match.Table, match.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, game.MatchesTable, game.MatchesColumn),
		)
		fromV = sqlgraph.Neighbors(ga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GameClient) Hooks() []Hook {
	return c.hooks.Game
}

// GameFavoriteClient is a client for the GameFavorite schema.
type GameFavoriteClient struct {
	config
}

// NewGameFavoriteClient returns a client for the GameFavorite from the given config.
func NewGameFavoriteClient(c config) *GameFavoriteClient {
	return &GameFavoriteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `gamefavorite.Hooks(f(g(h())))`.
func (c *GameFavoriteClient) Use(hooks ...Hook) {
	c.hooks.GameFavorite = append(c.hooks.GameFavorite, hooks...)
}

// Create returns a builder for creating a GameFavorite entity.
func (c *GameFavoriteClient) Create() *GameFavoriteCreate {
	mutation := newGameFavoriteMutation(c.config, OpCreate)
	return &GameFavoriteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GameFavorite entities.
func (c *GameFavoriteClient) CreateBulk(builders ...*GameFavoriteCreate) *GameFavoriteCreateBulk {
	return &GameFavoriteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GameFavorite.
func (c *GameFavoriteClient) Update() *GameFavoriteUpdate {
	mutation := newGameFavoriteMutation(c.config, OpUpdate)
	return &GameFavoriteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GameFavoriteClient) UpdateOne(gf *GameFavorite) *GameFavoriteUpdateOne {
	mutation := newGameFavoriteMutation(c.config, OpUpdateOne, withGameFavorite(gf))
	return &GameFavoriteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GameFavoriteClient) UpdateOneID(id guidgql.GUID) *GameFavoriteUpdateOne {
	mutation := newGameFavoriteMutation(c.config, OpUpdateOne, withGameFavoriteID(id))
	return &GameFavoriteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GameFavorite.
func (c *GameFavoriteClient) Delete() *GameFavoriteDelete {
	mutation := newGameFavoriteMutation(c.config, OpDelete)
	return &GameFavoriteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GameFavoriteClient) DeleteOne(gf *GameFavorite) *GameFavoriteDeleteOne {
	return c.DeleteOneID(gf.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GameFavoriteClient) DeleteOneID(id guidgql.GUID) *GameFavoriteDeleteOne {
	builder := c.Delete().Where(gamefavorite.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GameFavoriteDeleteOne{builder}
}

// Query returns a query builder for GameFavorite.
func (c *GameFavoriteClient) Query() *GameFavoriteQuery {
	return &GameFavoriteQuery{
		config: c.config,
	}
}

// Get returns a GameFavorite entity by its id.
func (c *GameFavoriteClient) Get(ctx context.Context, id guidgql.GUID) (*GameFavorite, error) {
	return c.Query().Where(gamefavorite.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GameFavoriteClient) GetX(ctx context.Context, id guidgql.GUID) *GameFavorite {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGame queries the game edge of a GameFavorite.
func (c *GameFavoriteClient) QueryGame(gf *GameFavorite) *GameQuery {
	query := &GameQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(gamefavorite.Table, gamefavorite.FieldID, id),
			sqlgraph.To(game.Table, game.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, gamefavorite.GameTable, gamefavorite.GameColumn),
		)
		fromV = sqlgraph.Neighbors(gf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a GameFavorite.
func (c *GameFavoriteClient) QueryUser(gf *GameFavorite) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(gamefavorite.Table, gamefavorite.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, gamefavorite.UserTable, gamefavorite.UserColumn),
		)
		fromV = sqlgraph.Neighbors(gf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GameFavoriteClient) Hooks() []Hook {
	return c.hooks.GameFavorite
}

// GroupClient is a client for the Group schema.
type GroupClient struct {
	config
}

// NewGroupClient returns a client for the Group from the given config.
func NewGroupClient(c config) *GroupClient {
	return &GroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `group.Hooks(f(g(h())))`.
func (c *GroupClient) Use(hooks ...Hook) {
	c.hooks.Group = append(c.hooks.Group, hooks...)
}

// Create returns a builder for creating a Group entity.
func (c *GroupClient) Create() *GroupCreate {
	mutation := newGroupMutation(c.config, OpCreate)
	return &GroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Group entities.
func (c *GroupClient) CreateBulk(builders ...*GroupCreate) *GroupCreateBulk {
	return &GroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Group.
func (c *GroupClient) Update() *GroupUpdate {
	mutation := newGroupMutation(c.config, OpUpdate)
	return &GroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupClient) UpdateOne(gr *Group) *GroupUpdateOne {
	mutation := newGroupMutation(c.config, OpUpdateOne, withGroup(gr))
	return &GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupClient) UpdateOneID(id guidgql.GUID) *GroupUpdateOne {
	mutation := newGroupMutation(c.config, OpUpdateOne, withGroupID(id))
	return &GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Group.
func (c *GroupClient) Delete() *GroupDelete {
	mutation := newGroupMutation(c.config, OpDelete)
	return &GroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GroupClient) DeleteOne(gr *Group) *GroupDeleteOne {
	return c.DeleteOneID(gr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GroupClient) DeleteOneID(id guidgql.GUID) *GroupDeleteOne {
	builder := c.Delete().Where(group.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupDeleteOne{builder}
}

// Query returns a query builder for Group.
func (c *GroupClient) Query() *GroupQuery {
	return &GroupQuery{
		config: c.config,
	}
}

// Get returns a Group entity by its id.
func (c *GroupClient) Get(ctx context.Context, id guidgql.GUID) (*Group, error) {
	return c.Query().Where(group.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupClient) GetX(ctx context.Context, id guidgql.GUID) *Group {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySettings queries the settings edge of a Group.
func (c *GroupClient) QuerySettings(gr *Group) *GroupSettingsQuery {
	query := &GroupSettingsQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, id),
			sqlgraph.To(groupsettings.Table, groupsettings.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, group.SettingsTable, group.SettingsColumn),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMembers queries the members edge of a Group.
func (c *GroupClient) QueryMembers(gr *Group) *GroupMembershipQuery {
	query := &GroupMembershipQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, id),
			sqlgraph.To(groupmembership.Table, groupmembership.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, group.MembersTable, group.MembersColumn),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApplications queries the applications edge of a Group.
func (c *GroupClient) QueryApplications(gr *Group) *GroupMembershipApplicationQuery {
	query := &GroupMembershipApplicationQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, id),
			sqlgraph.To(groupmembershipapplication.Table, groupmembershipapplication.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, group.ApplicationsTable, group.ApplicationsColumn),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GroupClient) Hooks() []Hook {
	return c.hooks.Group
}

// GroupMembershipClient is a client for the GroupMembership schema.
type GroupMembershipClient struct {
	config
}

// NewGroupMembershipClient returns a client for the GroupMembership from the given config.
func NewGroupMembershipClient(c config) *GroupMembershipClient {
	return &GroupMembershipClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `groupmembership.Hooks(f(g(h())))`.
func (c *GroupMembershipClient) Use(hooks ...Hook) {
	c.hooks.GroupMembership = append(c.hooks.GroupMembership, hooks...)
}

// Create returns a builder for creating a GroupMembership entity.
func (c *GroupMembershipClient) Create() *GroupMembershipCreate {
	mutation := newGroupMembershipMutation(c.config, OpCreate)
	return &GroupMembershipCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GroupMembership entities.
func (c *GroupMembershipClient) CreateBulk(builders ...*GroupMembershipCreate) *GroupMembershipCreateBulk {
	return &GroupMembershipCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GroupMembership.
func (c *GroupMembershipClient) Update() *GroupMembershipUpdate {
	mutation := newGroupMembershipMutation(c.config, OpUpdate)
	return &GroupMembershipUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupMembershipClient) UpdateOne(gm *GroupMembership) *GroupMembershipUpdateOne {
	mutation := newGroupMembershipMutation(c.config, OpUpdateOne, withGroupMembership(gm))
	return &GroupMembershipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupMembershipClient) UpdateOneID(id guidgql.GUID) *GroupMembershipUpdateOne {
	mutation := newGroupMembershipMutation(c.config, OpUpdateOne, withGroupMembershipID(id))
	return &GroupMembershipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GroupMembership.
func (c *GroupMembershipClient) Delete() *GroupMembershipDelete {
	mutation := newGroupMembershipMutation(c.config, OpDelete)
	return &GroupMembershipDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GroupMembershipClient) DeleteOne(gm *GroupMembership) *GroupMembershipDeleteOne {
	return c.DeleteOneID(gm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GroupMembershipClient) DeleteOneID(id guidgql.GUID) *GroupMembershipDeleteOne {
	builder := c.Delete().Where(groupmembership.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupMembershipDeleteOne{builder}
}

// Query returns a query builder for GroupMembership.
func (c *GroupMembershipClient) Query() *GroupMembershipQuery {
	return &GroupMembershipQuery{
		config: c.config,
	}
}

// Get returns a GroupMembership entity by its id.
func (c *GroupMembershipClient) Get(ctx context.Context, id guidgql.GUID) (*GroupMembership, error) {
	return c.Query().Where(groupmembership.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupMembershipClient) GetX(ctx context.Context, id guidgql.GUID) *GroupMembership {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGroup queries the group edge of a GroupMembership.
func (c *GroupMembershipClient) QueryGroup(gm *GroupMembership) *GroupQuery {
	query := &GroupQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(groupmembership.Table, groupmembership.FieldID, id),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, groupmembership.GroupTable, groupmembership.GroupColumn),
		)
		fromV = sqlgraph.Neighbors(gm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a GroupMembership.
func (c *GroupMembershipClient) QueryUser(gm *GroupMembership) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(groupmembership.Table, groupmembership.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, groupmembership.UserTable, groupmembership.UserColumn),
		)
		fromV = sqlgraph.Neighbors(gm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GroupMembershipClient) Hooks() []Hook {
	return c.hooks.GroupMembership
}

// GroupMembershipApplicationClient is a client for the GroupMembershipApplication schema.
type GroupMembershipApplicationClient struct {
	config
}

// NewGroupMembershipApplicationClient returns a client for the GroupMembershipApplication from the given config.
func NewGroupMembershipApplicationClient(c config) *GroupMembershipApplicationClient {
	return &GroupMembershipApplicationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `groupmembershipapplication.Hooks(f(g(h())))`.
func (c *GroupMembershipApplicationClient) Use(hooks ...Hook) {
	c.hooks.GroupMembershipApplication = append(c.hooks.GroupMembershipApplication, hooks...)
}

// Create returns a builder for creating a GroupMembershipApplication entity.
func (c *GroupMembershipApplicationClient) Create() *GroupMembershipApplicationCreate {
	mutation := newGroupMembershipApplicationMutation(c.config, OpCreate)
	return &GroupMembershipApplicationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GroupMembershipApplication entities.
func (c *GroupMembershipApplicationClient) CreateBulk(builders ...*GroupMembershipApplicationCreate) *GroupMembershipApplicationCreateBulk {
	return &GroupMembershipApplicationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GroupMembershipApplication.
func (c *GroupMembershipApplicationClient) Update() *GroupMembershipApplicationUpdate {
	mutation := newGroupMembershipApplicationMutation(c.config, OpUpdate)
	return &GroupMembershipApplicationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupMembershipApplicationClient) UpdateOne(gma *GroupMembershipApplication) *GroupMembershipApplicationUpdateOne {
	mutation := newGroupMembershipApplicationMutation(c.config, OpUpdateOne, withGroupMembershipApplication(gma))
	return &GroupMembershipApplicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupMembershipApplicationClient) UpdateOneID(id guidgql.GUID) *GroupMembershipApplicationUpdateOne {
	mutation := newGroupMembershipApplicationMutation(c.config, OpUpdateOne, withGroupMembershipApplicationID(id))
	return &GroupMembershipApplicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GroupMembershipApplication.
func (c *GroupMembershipApplicationClient) Delete() *GroupMembershipApplicationDelete {
	mutation := newGroupMembershipApplicationMutation(c.config, OpDelete)
	return &GroupMembershipApplicationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GroupMembershipApplicationClient) DeleteOne(gma *GroupMembershipApplication) *GroupMembershipApplicationDeleteOne {
	return c.DeleteOneID(gma.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GroupMembershipApplicationClient) DeleteOneID(id guidgql.GUID) *GroupMembershipApplicationDeleteOne {
	builder := c.Delete().Where(groupmembershipapplication.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupMembershipApplicationDeleteOne{builder}
}

// Query returns a query builder for GroupMembershipApplication.
func (c *GroupMembershipApplicationClient) Query() *GroupMembershipApplicationQuery {
	return &GroupMembershipApplicationQuery{
		config: c.config,
	}
}

// Get returns a GroupMembershipApplication entity by its id.
func (c *GroupMembershipApplicationClient) Get(ctx context.Context, id guidgql.GUID) (*GroupMembershipApplication, error) {
	return c.Query().Where(groupmembershipapplication.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupMembershipApplicationClient) GetX(ctx context.Context, id guidgql.GUID) *GroupMembershipApplication {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a GroupMembershipApplication.
func (c *GroupMembershipApplicationClient) QueryUser(gma *GroupMembershipApplication) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gma.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(groupmembershipapplication.Table, groupmembershipapplication.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, groupmembershipapplication.UserTable, groupmembershipapplication.UserColumn),
		)
		fromV = sqlgraph.Neighbors(gma.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroup queries the group edge of a GroupMembershipApplication.
func (c *GroupMembershipApplicationClient) QueryGroup(gma *GroupMembershipApplication) *GroupQuery {
	query := &GroupQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gma.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(groupmembershipapplication.Table, groupmembershipapplication.FieldID, id),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, groupmembershipapplication.GroupTable, groupmembershipapplication.GroupColumn),
		)
		fromV = sqlgraph.Neighbors(gma.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GroupMembershipApplicationClient) Hooks() []Hook {
	return c.hooks.GroupMembershipApplication
}

// GroupSettingsClient is a client for the GroupSettings schema.
type GroupSettingsClient struct {
	config
}

// NewGroupSettingsClient returns a client for the GroupSettings from the given config.
func NewGroupSettingsClient(c config) *GroupSettingsClient {
	return &GroupSettingsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `groupsettings.Hooks(f(g(h())))`.
func (c *GroupSettingsClient) Use(hooks ...Hook) {
	c.hooks.GroupSettings = append(c.hooks.GroupSettings, hooks...)
}

// Create returns a builder for creating a GroupSettings entity.
func (c *GroupSettingsClient) Create() *GroupSettingsCreate {
	mutation := newGroupSettingsMutation(c.config, OpCreate)
	return &GroupSettingsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GroupSettings entities.
func (c *GroupSettingsClient) CreateBulk(builders ...*GroupSettingsCreate) *GroupSettingsCreateBulk {
	return &GroupSettingsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GroupSettings.
func (c *GroupSettingsClient) Update() *GroupSettingsUpdate {
	mutation := newGroupSettingsMutation(c.config, OpUpdate)
	return &GroupSettingsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupSettingsClient) UpdateOne(gs *GroupSettings) *GroupSettingsUpdateOne {
	mutation := newGroupSettingsMutation(c.config, OpUpdateOne, withGroupSettings(gs))
	return &GroupSettingsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupSettingsClient) UpdateOneID(id guidgql.GUID) *GroupSettingsUpdateOne {
	mutation := newGroupSettingsMutation(c.config, OpUpdateOne, withGroupSettingsID(id))
	return &GroupSettingsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GroupSettings.
func (c *GroupSettingsClient) Delete() *GroupSettingsDelete {
	mutation := newGroupSettingsMutation(c.config, OpDelete)
	return &GroupSettingsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GroupSettingsClient) DeleteOne(gs *GroupSettings) *GroupSettingsDeleteOne {
	return c.DeleteOneID(gs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GroupSettingsClient) DeleteOneID(id guidgql.GUID) *GroupSettingsDeleteOne {
	builder := c.Delete().Where(groupsettings.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupSettingsDeleteOne{builder}
}

// Query returns a query builder for GroupSettings.
func (c *GroupSettingsClient) Query() *GroupSettingsQuery {
	return &GroupSettingsQuery{
		config: c.config,
	}
}

// Get returns a GroupSettings entity by its id.
func (c *GroupSettingsClient) Get(ctx context.Context, id guidgql.GUID) (*GroupSettings, error) {
	return c.Query().Where(groupsettings.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupSettingsClient) GetX(ctx context.Context, id guidgql.GUID) *GroupSettings {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGroup queries the group edge of a GroupSettings.
func (c *GroupSettingsClient) QueryGroup(gs *GroupSettings) *GroupQuery {
	query := &GroupQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(groupsettings.Table, groupsettings.FieldID, id),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, groupsettings.GroupTable, groupsettings.GroupColumn),
		)
		fromV = sqlgraph.Neighbors(gs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GroupSettingsClient) Hooks() []Hook {
	return c.hooks.GroupSettings
}

// MatchClient is a client for the Match schema.
type MatchClient struct {
	config
}

// NewMatchClient returns a client for the Match from the given config.
func NewMatchClient(c config) *MatchClient {
	return &MatchClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `match.Hooks(f(g(h())))`.
func (c *MatchClient) Use(hooks ...Hook) {
	c.hooks.Match = append(c.hooks.Match, hooks...)
}

// Create returns a builder for creating a Match entity.
func (c *MatchClient) Create() *MatchCreate {
	mutation := newMatchMutation(c.config, OpCreate)
	return &MatchCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Match entities.
func (c *MatchClient) CreateBulk(builders ...*MatchCreate) *MatchCreateBulk {
	return &MatchCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Match.
func (c *MatchClient) Update() *MatchUpdate {
	mutation := newMatchMutation(c.config, OpUpdate)
	return &MatchUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MatchClient) UpdateOne(m *Match) *MatchUpdateOne {
	mutation := newMatchMutation(c.config, OpUpdateOne, withMatch(m))
	return &MatchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MatchClient) UpdateOneID(id guidgql.GUID) *MatchUpdateOne {
	mutation := newMatchMutation(c.config, OpUpdateOne, withMatchID(id))
	return &MatchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Match.
func (c *MatchClient) Delete() *MatchDelete {
	mutation := newMatchMutation(c.config, OpDelete)
	return &MatchDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MatchClient) DeleteOne(m *Match) *MatchDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MatchClient) DeleteOneID(id guidgql.GUID) *MatchDeleteOne {
	builder := c.Delete().Where(match.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MatchDeleteOne{builder}
}

// Query returns a query builder for Match.
func (c *MatchClient) Query() *MatchQuery {
	return &MatchQuery{
		config: c.config,
	}
}

// Get returns a Match entity by its id.
func (c *MatchClient) Get(ctx context.Context, id guidgql.GUID) (*Match, error) {
	return c.Query().Where(match.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MatchClient) GetX(ctx context.Context, id guidgql.GUID) *Match {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGame queries the game edge of a Match.
func (c *MatchClient) QueryGame(m *Match) *GameQuery {
	query := &GameQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(match.Table, match.FieldID, id),
			sqlgraph.To(game.Table, game.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, match.GameTable, match.GameColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlayers queries the players edge of a Match.
func (c *MatchClient) QueryPlayers(m *Match) *PlayerQuery {
	query := &PlayerQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(match.Table, match.FieldID, id),
			sqlgraph.To(player.Table, player.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, match.PlayersTable, match.PlayersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNumericalStats queries the numerical_stats edge of a Match.
func (c *MatchClient) QueryNumericalStats(m *Match) *NumericalStatQuery {
	query := &NumericalStatQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(match.Table, match.FieldID, id),
			sqlgraph.To(numericalstat.Table, numericalstat.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, match.NumericalStatsTable, match.NumericalStatsColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnumStats queries the enum_stats edge of a Match.
func (c *MatchClient) QueryEnumStats(m *Match) *EnumStatQuery {
	query := &EnumStatQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(match.Table, match.FieldID, id),
			sqlgraph.To(enumstat.Table, enumstat.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, match.EnumStatsTable, match.EnumStatsColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MatchClient) Hooks() []Hook {
	return c.hooks.Match
}

// NumericalStatClient is a client for the NumericalStat schema.
type NumericalStatClient struct {
	config
}

// NewNumericalStatClient returns a client for the NumericalStat from the given config.
func NewNumericalStatClient(c config) *NumericalStatClient {
	return &NumericalStatClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `numericalstat.Hooks(f(g(h())))`.
func (c *NumericalStatClient) Use(hooks ...Hook) {
	c.hooks.NumericalStat = append(c.hooks.NumericalStat, hooks...)
}

// Create returns a builder for creating a NumericalStat entity.
func (c *NumericalStatClient) Create() *NumericalStatCreate {
	mutation := newNumericalStatMutation(c.config, OpCreate)
	return &NumericalStatCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NumericalStat entities.
func (c *NumericalStatClient) CreateBulk(builders ...*NumericalStatCreate) *NumericalStatCreateBulk {
	return &NumericalStatCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NumericalStat.
func (c *NumericalStatClient) Update() *NumericalStatUpdate {
	mutation := newNumericalStatMutation(c.config, OpUpdate)
	return &NumericalStatUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NumericalStatClient) UpdateOne(ns *NumericalStat) *NumericalStatUpdateOne {
	mutation := newNumericalStatMutation(c.config, OpUpdateOne, withNumericalStat(ns))
	return &NumericalStatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NumericalStatClient) UpdateOneID(id guidgql.GUID) *NumericalStatUpdateOne {
	mutation := newNumericalStatMutation(c.config, OpUpdateOne, withNumericalStatID(id))
	return &NumericalStatUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NumericalStat.
func (c *NumericalStatClient) Delete() *NumericalStatDelete {
	mutation := newNumericalStatMutation(c.config, OpDelete)
	return &NumericalStatDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NumericalStatClient) DeleteOne(ns *NumericalStat) *NumericalStatDeleteOne {
	return c.DeleteOneID(ns.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NumericalStatClient) DeleteOneID(id guidgql.GUID) *NumericalStatDeleteOne {
	builder := c.Delete().Where(numericalstat.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NumericalStatDeleteOne{builder}
}

// Query returns a query builder for NumericalStat.
func (c *NumericalStatClient) Query() *NumericalStatQuery {
	return &NumericalStatQuery{
		config: c.config,
	}
}

// Get returns a NumericalStat entity by its id.
func (c *NumericalStatClient) Get(ctx context.Context, id guidgql.GUID) (*NumericalStat, error) {
	return c.Query().Where(numericalstat.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NumericalStatClient) GetX(ctx context.Context, id guidgql.GUID) *NumericalStat {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMatch queries the match edge of a NumericalStat.
func (c *NumericalStatClient) QueryMatch(ns *NumericalStat) *MatchQuery {
	query := &MatchQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ns.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(numericalstat.Table, numericalstat.FieldID, id),
			sqlgraph.To(match.Table, match.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, numericalstat.MatchTable, numericalstat.MatchColumn),
		)
		fromV = sqlgraph.Neighbors(ns.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNumericalStatDescription queries the numerical_stat_description edge of a NumericalStat.
func (c *NumericalStatClient) QueryNumericalStatDescription(ns *NumericalStat) *NumericalStatDescriptionQuery {
	query := &NumericalStatDescriptionQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ns.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(numericalstat.Table, numericalstat.FieldID, id),
			sqlgraph.To(numericalstatdescription.Table, numericalstatdescription.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, numericalstat.NumericalStatDescriptionTable, numericalstat.NumericalStatDescriptionColumn),
		)
		fromV = sqlgraph.Neighbors(ns.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlayer queries the player edge of a NumericalStat.
func (c *NumericalStatClient) QueryPlayer(ns *NumericalStat) *PlayerQuery {
	query := &PlayerQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ns.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(numericalstat.Table, numericalstat.FieldID, id),
			sqlgraph.To(player.Table, player.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, numericalstat.PlayerTable, numericalstat.PlayerColumn),
		)
		fromV = sqlgraph.Neighbors(ns.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NumericalStatClient) Hooks() []Hook {
	return c.hooks.NumericalStat
}

// NumericalStatDescriptionClient is a client for the NumericalStatDescription schema.
type NumericalStatDescriptionClient struct {
	config
}

// NewNumericalStatDescriptionClient returns a client for the NumericalStatDescription from the given config.
func NewNumericalStatDescriptionClient(c config) *NumericalStatDescriptionClient {
	return &NumericalStatDescriptionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `numericalstatdescription.Hooks(f(g(h())))`.
func (c *NumericalStatDescriptionClient) Use(hooks ...Hook) {
	c.hooks.NumericalStatDescription = append(c.hooks.NumericalStatDescription, hooks...)
}

// Create returns a builder for creating a NumericalStatDescription entity.
func (c *NumericalStatDescriptionClient) Create() *NumericalStatDescriptionCreate {
	mutation := newNumericalStatDescriptionMutation(c.config, OpCreate)
	return &NumericalStatDescriptionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NumericalStatDescription entities.
func (c *NumericalStatDescriptionClient) CreateBulk(builders ...*NumericalStatDescriptionCreate) *NumericalStatDescriptionCreateBulk {
	return &NumericalStatDescriptionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NumericalStatDescription.
func (c *NumericalStatDescriptionClient) Update() *NumericalStatDescriptionUpdate {
	mutation := newNumericalStatDescriptionMutation(c.config, OpUpdate)
	return &NumericalStatDescriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NumericalStatDescriptionClient) UpdateOne(nsd *NumericalStatDescription) *NumericalStatDescriptionUpdateOne {
	mutation := newNumericalStatDescriptionMutation(c.config, OpUpdateOne, withNumericalStatDescription(nsd))
	return &NumericalStatDescriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NumericalStatDescriptionClient) UpdateOneID(id guidgql.GUID) *NumericalStatDescriptionUpdateOne {
	mutation := newNumericalStatDescriptionMutation(c.config, OpUpdateOne, withNumericalStatDescriptionID(id))
	return &NumericalStatDescriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NumericalStatDescription.
func (c *NumericalStatDescriptionClient) Delete() *NumericalStatDescriptionDelete {
	mutation := newNumericalStatDescriptionMutation(c.config, OpDelete)
	return &NumericalStatDescriptionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NumericalStatDescriptionClient) DeleteOne(nsd *NumericalStatDescription) *NumericalStatDescriptionDeleteOne {
	return c.DeleteOneID(nsd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NumericalStatDescriptionClient) DeleteOneID(id guidgql.GUID) *NumericalStatDescriptionDeleteOne {
	builder := c.Delete().Where(numericalstatdescription.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NumericalStatDescriptionDeleteOne{builder}
}

// Query returns a query builder for NumericalStatDescription.
func (c *NumericalStatDescriptionClient) Query() *NumericalStatDescriptionQuery {
	return &NumericalStatDescriptionQuery{
		config: c.config,
	}
}

// Get returns a NumericalStatDescription entity by its id.
func (c *NumericalStatDescriptionClient) Get(ctx context.Context, id guidgql.GUID) (*NumericalStatDescription, error) {
	return c.Query().Where(numericalstatdescription.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NumericalStatDescriptionClient) GetX(ctx context.Context, id guidgql.GUID) *NumericalStatDescription {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGame queries the game edge of a NumericalStatDescription.
func (c *NumericalStatDescriptionClient) QueryGame(nsd *NumericalStatDescription) *GameQuery {
	query := &GameQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nsd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(numericalstatdescription.Table, numericalstatdescription.FieldID, id),
			sqlgraph.To(game.Table, game.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, numericalstatdescription.GameTable, numericalstatdescription.GamePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(nsd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNumericalStats queries the numerical_stats edge of a NumericalStatDescription.
func (c *NumericalStatDescriptionClient) QueryNumericalStats(nsd *NumericalStatDescription) *NumericalStatQuery {
	query := &NumericalStatQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nsd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(numericalstatdescription.Table, numericalstatdescription.FieldID, id),
			sqlgraph.To(numericalstat.Table, numericalstat.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, numericalstatdescription.NumericalStatsTable, numericalstatdescription.NumericalStatsColumn),
		)
		fromV = sqlgraph.Neighbors(nsd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NumericalStatDescriptionClient) Hooks() []Hook {
	return c.hooks.NumericalStatDescription
}

// PlayerClient is a client for the Player schema.
type PlayerClient struct {
	config
}

// NewPlayerClient returns a client for the Player from the given config.
func NewPlayerClient(c config) *PlayerClient {
	return &PlayerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `player.Hooks(f(g(h())))`.
func (c *PlayerClient) Use(hooks ...Hook) {
	c.hooks.Player = append(c.hooks.Player, hooks...)
}

// Create returns a builder for creating a Player entity.
func (c *PlayerClient) Create() *PlayerCreate {
	mutation := newPlayerMutation(c.config, OpCreate)
	return &PlayerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Player entities.
func (c *PlayerClient) CreateBulk(builders ...*PlayerCreate) *PlayerCreateBulk {
	return &PlayerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Player.
func (c *PlayerClient) Update() *PlayerUpdate {
	mutation := newPlayerMutation(c.config, OpUpdate)
	return &PlayerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlayerClient) UpdateOne(pl *Player) *PlayerUpdateOne {
	mutation := newPlayerMutation(c.config, OpUpdateOne, withPlayer(pl))
	return &PlayerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlayerClient) UpdateOneID(id guidgql.GUID) *PlayerUpdateOne {
	mutation := newPlayerMutation(c.config, OpUpdateOne, withPlayerID(id))
	return &PlayerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Player.
func (c *PlayerClient) Delete() *PlayerDelete {
	mutation := newPlayerMutation(c.config, OpDelete)
	return &PlayerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlayerClient) DeleteOne(pl *Player) *PlayerDeleteOne {
	return c.DeleteOneID(pl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PlayerClient) DeleteOneID(id guidgql.GUID) *PlayerDeleteOne {
	builder := c.Delete().Where(player.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlayerDeleteOne{builder}
}

// Query returns a query builder for Player.
func (c *PlayerClient) Query() *PlayerQuery {
	return &PlayerQuery{
		config: c.config,
	}
}

// Get returns a Player entity by its id.
func (c *PlayerClient) Get(ctx context.Context, id guidgql.GUID) (*Player, error) {
	return c.Query().Where(player.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlayerClient) GetX(ctx context.Context, id guidgql.GUID) *Player {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a Player.
func (c *PlayerClient) QueryOwner(pl *Player) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(player.Table, player.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, player.OwnerTable, player.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySupervisors queries the supervisors edge of a Player.
func (c *PlayerClient) QuerySupervisors(pl *Player) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(player.Table, player.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, player.SupervisorsTable, player.SupervisorsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySupervisionRequests queries the supervision_requests edge of a Player.
func (c *PlayerClient) QuerySupervisionRequests(pl *Player) *PlayerSupervisionRequestQuery {
	query := &PlayerSupervisionRequestQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(player.Table, player.FieldID, id),
			sqlgraph.To(playersupervisionrequest.Table, playersupervisionrequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, player.SupervisionRequestsTable, player.SupervisionRequestsColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMatches queries the matches edge of a Player.
func (c *PlayerClient) QueryMatches(pl *Player) *MatchQuery {
	query := &MatchQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(player.Table, player.FieldID, id),
			sqlgraph.To(match.Table, match.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, player.MatchesTable, player.MatchesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNumericalStats queries the numerical_stats edge of a Player.
func (c *PlayerClient) QueryNumericalStats(pl *Player) *NumericalStatQuery {
	query := &NumericalStatQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(player.Table, player.FieldID, id),
			sqlgraph.To(numericalstat.Table, numericalstat.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, player.NumericalStatsTable, player.NumericalStatsColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEnumStats queries the enum_stats edge of a Player.
func (c *PlayerClient) QueryEnumStats(pl *Player) *EnumStatQuery {
	query := &EnumStatQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(player.Table, player.FieldID, id),
			sqlgraph.To(enumstat.Table, enumstat.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, player.EnumStatsTable, player.EnumStatsColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlayerClient) Hooks() []Hook {
	return c.hooks.Player
}

// PlayerSupervisionRequestClient is a client for the PlayerSupervisionRequest schema.
type PlayerSupervisionRequestClient struct {
	config
}

// NewPlayerSupervisionRequestClient returns a client for the PlayerSupervisionRequest from the given config.
func NewPlayerSupervisionRequestClient(c config) *PlayerSupervisionRequestClient {
	return &PlayerSupervisionRequestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `playersupervisionrequest.Hooks(f(g(h())))`.
func (c *PlayerSupervisionRequestClient) Use(hooks ...Hook) {
	c.hooks.PlayerSupervisionRequest = append(c.hooks.PlayerSupervisionRequest, hooks...)
}

// Create returns a builder for creating a PlayerSupervisionRequest entity.
func (c *PlayerSupervisionRequestClient) Create() *PlayerSupervisionRequestCreate {
	mutation := newPlayerSupervisionRequestMutation(c.config, OpCreate)
	return &PlayerSupervisionRequestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PlayerSupervisionRequest entities.
func (c *PlayerSupervisionRequestClient) CreateBulk(builders ...*PlayerSupervisionRequestCreate) *PlayerSupervisionRequestCreateBulk {
	return &PlayerSupervisionRequestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PlayerSupervisionRequest.
func (c *PlayerSupervisionRequestClient) Update() *PlayerSupervisionRequestUpdate {
	mutation := newPlayerSupervisionRequestMutation(c.config, OpUpdate)
	return &PlayerSupervisionRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlayerSupervisionRequestClient) UpdateOne(psr *PlayerSupervisionRequest) *PlayerSupervisionRequestUpdateOne {
	mutation := newPlayerSupervisionRequestMutation(c.config, OpUpdateOne, withPlayerSupervisionRequest(psr))
	return &PlayerSupervisionRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlayerSupervisionRequestClient) UpdateOneID(id guidgql.GUID) *PlayerSupervisionRequestUpdateOne {
	mutation := newPlayerSupervisionRequestMutation(c.config, OpUpdateOne, withPlayerSupervisionRequestID(id))
	return &PlayerSupervisionRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PlayerSupervisionRequest.
func (c *PlayerSupervisionRequestClient) Delete() *PlayerSupervisionRequestDelete {
	mutation := newPlayerSupervisionRequestMutation(c.config, OpDelete)
	return &PlayerSupervisionRequestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlayerSupervisionRequestClient) DeleteOne(psr *PlayerSupervisionRequest) *PlayerSupervisionRequestDeleteOne {
	return c.DeleteOneID(psr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PlayerSupervisionRequestClient) DeleteOneID(id guidgql.GUID) *PlayerSupervisionRequestDeleteOne {
	builder := c.Delete().Where(playersupervisionrequest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlayerSupervisionRequestDeleteOne{builder}
}

// Query returns a query builder for PlayerSupervisionRequest.
func (c *PlayerSupervisionRequestClient) Query() *PlayerSupervisionRequestQuery {
	return &PlayerSupervisionRequestQuery{
		config: c.config,
	}
}

// Get returns a PlayerSupervisionRequest entity by its id.
func (c *PlayerSupervisionRequestClient) Get(ctx context.Context, id guidgql.GUID) (*PlayerSupervisionRequest, error) {
	return c.Query().Where(playersupervisionrequest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlayerSupervisionRequestClient) GetX(ctx context.Context, id guidgql.GUID) *PlayerSupervisionRequest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySender queries the sender edge of a PlayerSupervisionRequest.
func (c *PlayerSupervisionRequestClient) QuerySender(psr *PlayerSupervisionRequest) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := psr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(playersupervisionrequest.Table, playersupervisionrequest.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, playersupervisionrequest.SenderTable, playersupervisionrequest.SenderColumn),
		)
		fromV = sqlgraph.Neighbors(psr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlayer queries the player edge of a PlayerSupervisionRequest.
func (c *PlayerSupervisionRequestClient) QueryPlayer(psr *PlayerSupervisionRequest) *PlayerQuery {
	query := &PlayerQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := psr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(playersupervisionrequest.Table, playersupervisionrequest.FieldID, id),
			sqlgraph.To(player.Table, player.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, playersupervisionrequest.PlayerTable, playersupervisionrequest.PlayerColumn),
		)
		fromV = sqlgraph.Neighbors(psr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApprovals queries the approvals edge of a PlayerSupervisionRequest.
func (c *PlayerSupervisionRequestClient) QueryApprovals(psr *PlayerSupervisionRequest) *PlayerSupervisionRequestApprovalQuery {
	query := &PlayerSupervisionRequestApprovalQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := psr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(playersupervisionrequest.Table, playersupervisionrequest.FieldID, id),
			sqlgraph.To(playersupervisionrequestapproval.Table, playersupervisionrequestapproval.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, playersupervisionrequest.ApprovalsTable, playersupervisionrequest.ApprovalsColumn),
		)
		fromV = sqlgraph.Neighbors(psr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlayerSupervisionRequestClient) Hooks() []Hook {
	return c.hooks.PlayerSupervisionRequest
}

// PlayerSupervisionRequestApprovalClient is a client for the PlayerSupervisionRequestApproval schema.
type PlayerSupervisionRequestApprovalClient struct {
	config
}

// NewPlayerSupervisionRequestApprovalClient returns a client for the PlayerSupervisionRequestApproval from the given config.
func NewPlayerSupervisionRequestApprovalClient(c config) *PlayerSupervisionRequestApprovalClient {
	return &PlayerSupervisionRequestApprovalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `playersupervisionrequestapproval.Hooks(f(g(h())))`.
func (c *PlayerSupervisionRequestApprovalClient) Use(hooks ...Hook) {
	c.hooks.PlayerSupervisionRequestApproval = append(c.hooks.PlayerSupervisionRequestApproval, hooks...)
}

// Create returns a builder for creating a PlayerSupervisionRequestApproval entity.
func (c *PlayerSupervisionRequestApprovalClient) Create() *PlayerSupervisionRequestApprovalCreate {
	mutation := newPlayerSupervisionRequestApprovalMutation(c.config, OpCreate)
	return &PlayerSupervisionRequestApprovalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PlayerSupervisionRequestApproval entities.
func (c *PlayerSupervisionRequestApprovalClient) CreateBulk(builders ...*PlayerSupervisionRequestApprovalCreate) *PlayerSupervisionRequestApprovalCreateBulk {
	return &PlayerSupervisionRequestApprovalCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PlayerSupervisionRequestApproval.
func (c *PlayerSupervisionRequestApprovalClient) Update() *PlayerSupervisionRequestApprovalUpdate {
	mutation := newPlayerSupervisionRequestApprovalMutation(c.config, OpUpdate)
	return &PlayerSupervisionRequestApprovalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlayerSupervisionRequestApprovalClient) UpdateOne(psra *PlayerSupervisionRequestApproval) *PlayerSupervisionRequestApprovalUpdateOne {
	mutation := newPlayerSupervisionRequestApprovalMutation(c.config, OpUpdateOne, withPlayerSupervisionRequestApproval(psra))
	return &PlayerSupervisionRequestApprovalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlayerSupervisionRequestApprovalClient) UpdateOneID(id guidgql.GUID) *PlayerSupervisionRequestApprovalUpdateOne {
	mutation := newPlayerSupervisionRequestApprovalMutation(c.config, OpUpdateOne, withPlayerSupervisionRequestApprovalID(id))
	return &PlayerSupervisionRequestApprovalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PlayerSupervisionRequestApproval.
func (c *PlayerSupervisionRequestApprovalClient) Delete() *PlayerSupervisionRequestApprovalDelete {
	mutation := newPlayerSupervisionRequestApprovalMutation(c.config, OpDelete)
	return &PlayerSupervisionRequestApprovalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlayerSupervisionRequestApprovalClient) DeleteOne(psra *PlayerSupervisionRequestApproval) *PlayerSupervisionRequestApprovalDeleteOne {
	return c.DeleteOneID(psra.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PlayerSupervisionRequestApprovalClient) DeleteOneID(id guidgql.GUID) *PlayerSupervisionRequestApprovalDeleteOne {
	builder := c.Delete().Where(playersupervisionrequestapproval.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlayerSupervisionRequestApprovalDeleteOne{builder}
}

// Query returns a query builder for PlayerSupervisionRequestApproval.
func (c *PlayerSupervisionRequestApprovalClient) Query() *PlayerSupervisionRequestApprovalQuery {
	return &PlayerSupervisionRequestApprovalQuery{
		config: c.config,
	}
}

// Get returns a PlayerSupervisionRequestApproval entity by its id.
func (c *PlayerSupervisionRequestApprovalClient) Get(ctx context.Context, id guidgql.GUID) (*PlayerSupervisionRequestApproval, error) {
	return c.Query().Where(playersupervisionrequestapproval.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlayerSupervisionRequestApprovalClient) GetX(ctx context.Context, id guidgql.GUID) *PlayerSupervisionRequestApproval {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApprover queries the approver edge of a PlayerSupervisionRequestApproval.
func (c *PlayerSupervisionRequestApprovalClient) QueryApprover(psra *PlayerSupervisionRequestApproval) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := psra.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(playersupervisionrequestapproval.Table, playersupervisionrequestapproval.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, playersupervisionrequestapproval.ApproverTable, playersupervisionrequestapproval.ApproverColumn),
		)
		fromV = sqlgraph.Neighbors(psra.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySupervisionRequest queries the supervision_request edge of a PlayerSupervisionRequestApproval.
func (c *PlayerSupervisionRequestApprovalClient) QuerySupervisionRequest(psra *PlayerSupervisionRequestApproval) *PlayerSupervisionRequestQuery {
	query := &PlayerSupervisionRequestQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := psra.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(playersupervisionrequestapproval.Table, playersupervisionrequestapproval.FieldID, id),
			sqlgraph.To(playersupervisionrequest.Table, playersupervisionrequest.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, playersupervisionrequestapproval.SupervisionRequestTable, playersupervisionrequestapproval.SupervisionRequestColumn),
		)
		fromV = sqlgraph.Neighbors(psra.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlayerSupervisionRequestApprovalClient) Hooks() []Hook {
	return c.hooks.PlayerSupervisionRequestApproval
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id guidgql.GUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id guidgql.GUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id guidgql.GUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id guidgql.GUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPlayers queries the players edge of a User.
func (c *UserClient) QueryPlayers(u *User) *PlayerQuery {
	query := &PlayerQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(player.Table, player.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.PlayersTable, user.PlayersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMainPlayer queries the main_player edge of a User.
func (c *UserClient) QueryMainPlayer(u *User) *PlayerQuery {
	query := &PlayerQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(player.Table, player.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.MainPlayerTable, user.MainPlayerColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySentSupervisionRequests queries the sent_supervision_requests edge of a User.
func (c *UserClient) QuerySentSupervisionRequests(u *User) *PlayerSupervisionRequestQuery {
	query := &PlayerSupervisionRequestQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(playersupervisionrequest.Table, playersupervisionrequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SentSupervisionRequestsTable, user.SentSupervisionRequestsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySupervisionRequestApprovals queries the supervision_request_approvals edge of a User.
func (c *UserClient) QuerySupervisionRequestApprovals(u *User) *PlayerSupervisionRequestApprovalQuery {
	query := &PlayerSupervisionRequestApprovalQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(playersupervisionrequestapproval.Table, playersupervisionrequestapproval.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SupervisionRequestApprovalsTable, user.SupervisionRequestApprovalsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroupMemberships queries the group_memberships edge of a User.
func (c *UserClient) QueryGroupMemberships(u *User) *GroupMembershipQuery {
	query := &GroupMembershipQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(groupmembership.Table, groupmembership.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.GroupMembershipsTable, user.GroupMembershipsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroupMembershipApplications queries the group_membership_applications edge of a User.
func (c *UserClient) QueryGroupMembershipApplications(u *User) *GroupMembershipApplicationQuery {
	query := &GroupMembershipApplicationQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(groupmembershipapplication.Table, groupmembershipapplication.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.GroupMembershipApplicationsTable, user.GroupMembershipApplicationsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGames queries the games edge of a User.
func (c *UserClient) QueryGames(u *User) *GameQuery {
	query := &GameQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(game.Table, game.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.GamesTable, user.GamesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFavoriteGames queries the favorite_games edge of a User.
func (c *UserClient) QueryFavoriteGames(u *User) *GameFavoriteQuery {
	query := &GameFavoriteQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(gamefavorite.Table, gamefavorite.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.FavoriteGamesTable, user.FavoriteGamesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
