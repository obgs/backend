// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/open-boardgame-stats/backend/internal/ent/migrate"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/open-boardgame-stats/backend/internal/ent/game"
	"github.com/open-boardgame-stats/backend/internal/ent/gamefavorite"
	"github.com/open-boardgame-stats/backend/internal/ent/gameversion"
	"github.com/open-boardgame-stats/backend/internal/ent/group"
	"github.com/open-boardgame-stats/backend/internal/ent/groupmembership"
	"github.com/open-boardgame-stats/backend/internal/ent/groupmembershipapplication"
	"github.com/open-boardgame-stats/backend/internal/ent/groupsettings"
	"github.com/open-boardgame-stats/backend/internal/ent/match"
	"github.com/open-boardgame-stats/backend/internal/ent/player"
	"github.com/open-boardgame-stats/backend/internal/ent/playersupervisionrequest"
	"github.com/open-boardgame-stats/backend/internal/ent/playersupervisionrequestapproval"
	"github.com/open-boardgame-stats/backend/internal/ent/statdescription"
	"github.com/open-boardgame-stats/backend/internal/ent/statistic"
	"github.com/open-boardgame-stats/backend/internal/ent/user"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Game is the client for interacting with the Game builders.
	Game *GameClient
	// GameFavorite is the client for interacting with the GameFavorite builders.
	GameFavorite *GameFavoriteClient
	// GameVersion is the client for interacting with the GameVersion builders.
	GameVersion *GameVersionClient
	// Group is the client for interacting with the Group builders.
	Group *GroupClient
	// GroupMembership is the client for interacting with the GroupMembership builders.
	GroupMembership *GroupMembershipClient
	// GroupMembershipApplication is the client for interacting with the GroupMembershipApplication builders.
	GroupMembershipApplication *GroupMembershipApplicationClient
	// GroupSettings is the client for interacting with the GroupSettings builders.
	GroupSettings *GroupSettingsClient
	// Match is the client for interacting with the Match builders.
	Match *MatchClient
	// Player is the client for interacting with the Player builders.
	Player *PlayerClient
	// PlayerSupervisionRequest is the client for interacting with the PlayerSupervisionRequest builders.
	PlayerSupervisionRequest *PlayerSupervisionRequestClient
	// PlayerSupervisionRequestApproval is the client for interacting with the PlayerSupervisionRequestApproval builders.
	PlayerSupervisionRequestApproval *PlayerSupervisionRequestApprovalClient
	// StatDescription is the client for interacting with the StatDescription builders.
	StatDescription *StatDescriptionClient
	// Statistic is the client for interacting with the Statistic builders.
	Statistic *StatisticClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Game = NewGameClient(c.config)
	c.GameFavorite = NewGameFavoriteClient(c.config)
	c.GameVersion = NewGameVersionClient(c.config)
	c.Group = NewGroupClient(c.config)
	c.GroupMembership = NewGroupMembershipClient(c.config)
	c.GroupMembershipApplication = NewGroupMembershipApplicationClient(c.config)
	c.GroupSettings = NewGroupSettingsClient(c.config)
	c.Match = NewMatchClient(c.config)
	c.Player = NewPlayerClient(c.config)
	c.PlayerSupervisionRequest = NewPlayerSupervisionRequestClient(c.config)
	c.PlayerSupervisionRequestApproval = NewPlayerSupervisionRequestApprovalClient(c.config)
	c.StatDescription = NewStatDescriptionClient(c.config)
	c.Statistic = NewStatisticClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                              ctx,
		config:                           cfg,
		Game:                             NewGameClient(cfg),
		GameFavorite:                     NewGameFavoriteClient(cfg),
		GameVersion:                      NewGameVersionClient(cfg),
		Group:                            NewGroupClient(cfg),
		GroupMembership:                  NewGroupMembershipClient(cfg),
		GroupMembershipApplication:       NewGroupMembershipApplicationClient(cfg),
		GroupSettings:                    NewGroupSettingsClient(cfg),
		Match:                            NewMatchClient(cfg),
		Player:                           NewPlayerClient(cfg),
		PlayerSupervisionRequest:         NewPlayerSupervisionRequestClient(cfg),
		PlayerSupervisionRequestApproval: NewPlayerSupervisionRequestApprovalClient(cfg),
		StatDescription:                  NewStatDescriptionClient(cfg),
		Statistic:                        NewStatisticClient(cfg),
		User:                             NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                              ctx,
		config:                           cfg,
		Game:                             NewGameClient(cfg),
		GameFavorite:                     NewGameFavoriteClient(cfg),
		GameVersion:                      NewGameVersionClient(cfg),
		Group:                            NewGroupClient(cfg),
		GroupMembership:                  NewGroupMembershipClient(cfg),
		GroupMembershipApplication:       NewGroupMembershipApplicationClient(cfg),
		GroupSettings:                    NewGroupSettingsClient(cfg),
		Match:                            NewMatchClient(cfg),
		Player:                           NewPlayerClient(cfg),
		PlayerSupervisionRequest:         NewPlayerSupervisionRequestClient(cfg),
		PlayerSupervisionRequestApproval: NewPlayerSupervisionRequestApprovalClient(cfg),
		StatDescription:                  NewStatDescriptionClient(cfg),
		Statistic:                        NewStatisticClient(cfg),
		User:                             NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Game.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Game, c.GameFavorite, c.GameVersion, c.Group, c.GroupMembership,
		c.GroupMembershipApplication, c.GroupSettings, c.Match, c.Player,
		c.PlayerSupervisionRequest, c.PlayerSupervisionRequestApproval,
		c.StatDescription, c.Statistic, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Game, c.GameFavorite, c.GameVersion, c.Group, c.GroupMembership,
		c.GroupMembershipApplication, c.GroupSettings, c.Match, c.Player,
		c.PlayerSupervisionRequest, c.PlayerSupervisionRequestApproval,
		c.StatDescription, c.Statistic, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *GameMutation:
		return c.Game.mutate(ctx, m)
	case *GameFavoriteMutation:
		return c.GameFavorite.mutate(ctx, m)
	case *GameVersionMutation:
		return c.GameVersion.mutate(ctx, m)
	case *GroupMutation:
		return c.Group.mutate(ctx, m)
	case *GroupMembershipMutation:
		return c.GroupMembership.mutate(ctx, m)
	case *GroupMembershipApplicationMutation:
		return c.GroupMembershipApplication.mutate(ctx, m)
	case *GroupSettingsMutation:
		return c.GroupSettings.mutate(ctx, m)
	case *MatchMutation:
		return c.Match.mutate(ctx, m)
	case *PlayerMutation:
		return c.Player.mutate(ctx, m)
	case *PlayerSupervisionRequestMutation:
		return c.PlayerSupervisionRequest.mutate(ctx, m)
	case *PlayerSupervisionRequestApprovalMutation:
		return c.PlayerSupervisionRequestApproval.mutate(ctx, m)
	case *StatDescriptionMutation:
		return c.StatDescription.mutate(ctx, m)
	case *StatisticMutation:
		return c.Statistic.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// GameClient is a client for the Game schema.
type GameClient struct {
	config
}

// NewGameClient returns a client for the Game from the given config.
func NewGameClient(c config) *GameClient {
	return &GameClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `game.Hooks(f(g(h())))`.
func (c *GameClient) Use(hooks ...Hook) {
	c.hooks.Game = append(c.hooks.Game, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `game.Intercept(f(g(h())))`.
func (c *GameClient) Intercept(interceptors ...Interceptor) {
	c.inters.Game = append(c.inters.Game, interceptors...)
}

// Create returns a builder for creating a Game entity.
func (c *GameClient) Create() *GameCreate {
	mutation := newGameMutation(c.config, OpCreate)
	return &GameCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Game entities.
func (c *GameClient) CreateBulk(builders ...*GameCreate) *GameCreateBulk {
	return &GameCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Game.
func (c *GameClient) Update() *GameUpdate {
	mutation := newGameMutation(c.config, OpUpdate)
	return &GameUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GameClient) UpdateOne(ga *Game) *GameUpdateOne {
	mutation := newGameMutation(c.config, OpUpdateOne, withGame(ga))
	return &GameUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GameClient) UpdateOneID(id guidgql.GUID) *GameUpdateOne {
	mutation := newGameMutation(c.config, OpUpdateOne, withGameID(id))
	return &GameUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Game.
func (c *GameClient) Delete() *GameDelete {
	mutation := newGameMutation(c.config, OpDelete)
	return &GameDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GameClient) DeleteOne(ga *Game) *GameDeleteOne {
	return c.DeleteOneID(ga.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GameClient) DeleteOneID(id guidgql.GUID) *GameDeleteOne {
	builder := c.Delete().Where(game.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GameDeleteOne{builder}
}

// Query returns a query builder for Game.
func (c *GameClient) Query() *GameQuery {
	return &GameQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGame},
		inters: c.Interceptors(),
	}
}

// Get returns a Game entity by its id.
func (c *GameClient) Get(ctx context.Context, id guidgql.GUID) (*Game, error) {
	return c.Query().Where(game.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GameClient) GetX(ctx context.Context, id guidgql.GUID) *Game {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAuthor queries the author edge of a Game.
func (c *GameClient) QueryAuthor(ga *Game) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(game.Table, game.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, game.AuthorTable, game.AuthorColumn),
		)
		fromV = sqlgraph.Neighbors(ga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFavorites queries the favorites edge of a Game.
func (c *GameClient) QueryFavorites(ga *Game) *GameFavoriteQuery {
	query := (&GameFavoriteClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(game.Table, game.FieldID, id),
			sqlgraph.To(gamefavorite.Table, gamefavorite.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, game.FavoritesTable, game.FavoritesColumn),
		)
		fromV = sqlgraph.Neighbors(ga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVersions queries the versions edge of a Game.
func (c *GameClient) QueryVersions(ga *Game) *GameVersionQuery {
	query := (&GameVersionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ga.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(game.Table, game.FieldID, id),
			sqlgraph.To(gameversion.Table, gameversion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, game.VersionsTable, game.VersionsColumn),
		)
		fromV = sqlgraph.Neighbors(ga.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GameClient) Hooks() []Hook {
	return c.hooks.Game
}

// Interceptors returns the client interceptors.
func (c *GameClient) Interceptors() []Interceptor {
	return c.inters.Game
}

func (c *GameClient) mutate(ctx context.Context, m *GameMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GameCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GameUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GameUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GameDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Game mutation op: %q", m.Op())
	}
}

// GameFavoriteClient is a client for the GameFavorite schema.
type GameFavoriteClient struct {
	config
}

// NewGameFavoriteClient returns a client for the GameFavorite from the given config.
func NewGameFavoriteClient(c config) *GameFavoriteClient {
	return &GameFavoriteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `gamefavorite.Hooks(f(g(h())))`.
func (c *GameFavoriteClient) Use(hooks ...Hook) {
	c.hooks.GameFavorite = append(c.hooks.GameFavorite, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `gamefavorite.Intercept(f(g(h())))`.
func (c *GameFavoriteClient) Intercept(interceptors ...Interceptor) {
	c.inters.GameFavorite = append(c.inters.GameFavorite, interceptors...)
}

// Create returns a builder for creating a GameFavorite entity.
func (c *GameFavoriteClient) Create() *GameFavoriteCreate {
	mutation := newGameFavoriteMutation(c.config, OpCreate)
	return &GameFavoriteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GameFavorite entities.
func (c *GameFavoriteClient) CreateBulk(builders ...*GameFavoriteCreate) *GameFavoriteCreateBulk {
	return &GameFavoriteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GameFavorite.
func (c *GameFavoriteClient) Update() *GameFavoriteUpdate {
	mutation := newGameFavoriteMutation(c.config, OpUpdate)
	return &GameFavoriteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GameFavoriteClient) UpdateOne(gf *GameFavorite) *GameFavoriteUpdateOne {
	mutation := newGameFavoriteMutation(c.config, OpUpdateOne, withGameFavorite(gf))
	return &GameFavoriteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GameFavoriteClient) UpdateOneID(id guidgql.GUID) *GameFavoriteUpdateOne {
	mutation := newGameFavoriteMutation(c.config, OpUpdateOne, withGameFavoriteID(id))
	return &GameFavoriteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GameFavorite.
func (c *GameFavoriteClient) Delete() *GameFavoriteDelete {
	mutation := newGameFavoriteMutation(c.config, OpDelete)
	return &GameFavoriteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GameFavoriteClient) DeleteOne(gf *GameFavorite) *GameFavoriteDeleteOne {
	return c.DeleteOneID(gf.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GameFavoriteClient) DeleteOneID(id guidgql.GUID) *GameFavoriteDeleteOne {
	builder := c.Delete().Where(gamefavorite.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GameFavoriteDeleteOne{builder}
}

// Query returns a query builder for GameFavorite.
func (c *GameFavoriteClient) Query() *GameFavoriteQuery {
	return &GameFavoriteQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGameFavorite},
		inters: c.Interceptors(),
	}
}

// Get returns a GameFavorite entity by its id.
func (c *GameFavoriteClient) Get(ctx context.Context, id guidgql.GUID) (*GameFavorite, error) {
	return c.Query().Where(gamefavorite.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GameFavoriteClient) GetX(ctx context.Context, id guidgql.GUID) *GameFavorite {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGame queries the game edge of a GameFavorite.
func (c *GameFavoriteClient) QueryGame(gf *GameFavorite) *GameQuery {
	query := (&GameClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(gamefavorite.Table, gamefavorite.FieldID, id),
			sqlgraph.To(game.Table, game.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, gamefavorite.GameTable, gamefavorite.GameColumn),
		)
		fromV = sqlgraph.Neighbors(gf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a GameFavorite.
func (c *GameFavoriteClient) QueryUser(gf *GameFavorite) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(gamefavorite.Table, gamefavorite.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, gamefavorite.UserTable, gamefavorite.UserColumn),
		)
		fromV = sqlgraph.Neighbors(gf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GameFavoriteClient) Hooks() []Hook {
	return c.hooks.GameFavorite
}

// Interceptors returns the client interceptors.
func (c *GameFavoriteClient) Interceptors() []Interceptor {
	return c.inters.GameFavorite
}

func (c *GameFavoriteClient) mutate(ctx context.Context, m *GameFavoriteMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GameFavoriteCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GameFavoriteUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GameFavoriteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GameFavoriteDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown GameFavorite mutation op: %q", m.Op())
	}
}

// GameVersionClient is a client for the GameVersion schema.
type GameVersionClient struct {
	config
}

// NewGameVersionClient returns a client for the GameVersion from the given config.
func NewGameVersionClient(c config) *GameVersionClient {
	return &GameVersionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `gameversion.Hooks(f(g(h())))`.
func (c *GameVersionClient) Use(hooks ...Hook) {
	c.hooks.GameVersion = append(c.hooks.GameVersion, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `gameversion.Intercept(f(g(h())))`.
func (c *GameVersionClient) Intercept(interceptors ...Interceptor) {
	c.inters.GameVersion = append(c.inters.GameVersion, interceptors...)
}

// Create returns a builder for creating a GameVersion entity.
func (c *GameVersionClient) Create() *GameVersionCreate {
	mutation := newGameVersionMutation(c.config, OpCreate)
	return &GameVersionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GameVersion entities.
func (c *GameVersionClient) CreateBulk(builders ...*GameVersionCreate) *GameVersionCreateBulk {
	return &GameVersionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GameVersion.
func (c *GameVersionClient) Update() *GameVersionUpdate {
	mutation := newGameVersionMutation(c.config, OpUpdate)
	return &GameVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GameVersionClient) UpdateOne(gv *GameVersion) *GameVersionUpdateOne {
	mutation := newGameVersionMutation(c.config, OpUpdateOne, withGameVersion(gv))
	return &GameVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GameVersionClient) UpdateOneID(id guidgql.GUID) *GameVersionUpdateOne {
	mutation := newGameVersionMutation(c.config, OpUpdateOne, withGameVersionID(id))
	return &GameVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GameVersion.
func (c *GameVersionClient) Delete() *GameVersionDelete {
	mutation := newGameVersionMutation(c.config, OpDelete)
	return &GameVersionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GameVersionClient) DeleteOne(gv *GameVersion) *GameVersionDeleteOne {
	return c.DeleteOneID(gv.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GameVersionClient) DeleteOneID(id guidgql.GUID) *GameVersionDeleteOne {
	builder := c.Delete().Where(gameversion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GameVersionDeleteOne{builder}
}

// Query returns a query builder for GameVersion.
func (c *GameVersionClient) Query() *GameVersionQuery {
	return &GameVersionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGameVersion},
		inters: c.Interceptors(),
	}
}

// Get returns a GameVersion entity by its id.
func (c *GameVersionClient) Get(ctx context.Context, id guidgql.GUID) (*GameVersion, error) {
	return c.Query().Where(gameversion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GameVersionClient) GetX(ctx context.Context, id guidgql.GUID) *GameVersion {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGame queries the game edge of a GameVersion.
func (c *GameVersionClient) QueryGame(gv *GameVersion) *GameQuery {
	query := (&GameClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(gameversion.Table, gameversion.FieldID, id),
			sqlgraph.To(game.Table, game.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, gameversion.GameTable, gameversion.GameColumn),
		)
		fromV = sqlgraph.Neighbors(gv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatDescriptions queries the stat_descriptions edge of a GameVersion.
func (c *GameVersionClient) QueryStatDescriptions(gv *GameVersion) *StatDescriptionQuery {
	query := (&StatDescriptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(gameversion.Table, gameversion.FieldID, id),
			sqlgraph.To(statdescription.Table, statdescription.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, gameversion.StatDescriptionsTable, gameversion.StatDescriptionsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(gv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMatches queries the matches edge of a GameVersion.
func (c *GameVersionClient) QueryMatches(gv *GameVersion) *MatchQuery {
	query := (&MatchClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(gameversion.Table, gameversion.FieldID, id),
			sqlgraph.To(match.Table, match.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, gameversion.MatchesTable, gameversion.MatchesColumn),
		)
		fromV = sqlgraph.Neighbors(gv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GameVersionClient) Hooks() []Hook {
	return c.hooks.GameVersion
}

// Interceptors returns the client interceptors.
func (c *GameVersionClient) Interceptors() []Interceptor {
	return c.inters.GameVersion
}

func (c *GameVersionClient) mutate(ctx context.Context, m *GameVersionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GameVersionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GameVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GameVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GameVersionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown GameVersion mutation op: %q", m.Op())
	}
}

// GroupClient is a client for the Group schema.
type GroupClient struct {
	config
}

// NewGroupClient returns a client for the Group from the given config.
func NewGroupClient(c config) *GroupClient {
	return &GroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `group.Hooks(f(g(h())))`.
func (c *GroupClient) Use(hooks ...Hook) {
	c.hooks.Group = append(c.hooks.Group, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `group.Intercept(f(g(h())))`.
func (c *GroupClient) Intercept(interceptors ...Interceptor) {
	c.inters.Group = append(c.inters.Group, interceptors...)
}

// Create returns a builder for creating a Group entity.
func (c *GroupClient) Create() *GroupCreate {
	mutation := newGroupMutation(c.config, OpCreate)
	return &GroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Group entities.
func (c *GroupClient) CreateBulk(builders ...*GroupCreate) *GroupCreateBulk {
	return &GroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Group.
func (c *GroupClient) Update() *GroupUpdate {
	mutation := newGroupMutation(c.config, OpUpdate)
	return &GroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupClient) UpdateOne(gr *Group) *GroupUpdateOne {
	mutation := newGroupMutation(c.config, OpUpdateOne, withGroup(gr))
	return &GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupClient) UpdateOneID(id guidgql.GUID) *GroupUpdateOne {
	mutation := newGroupMutation(c.config, OpUpdateOne, withGroupID(id))
	return &GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Group.
func (c *GroupClient) Delete() *GroupDelete {
	mutation := newGroupMutation(c.config, OpDelete)
	return &GroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GroupClient) DeleteOne(gr *Group) *GroupDeleteOne {
	return c.DeleteOneID(gr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GroupClient) DeleteOneID(id guidgql.GUID) *GroupDeleteOne {
	builder := c.Delete().Where(group.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupDeleteOne{builder}
}

// Query returns a query builder for Group.
func (c *GroupClient) Query() *GroupQuery {
	return &GroupQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGroup},
		inters: c.Interceptors(),
	}
}

// Get returns a Group entity by its id.
func (c *GroupClient) Get(ctx context.Context, id guidgql.GUID) (*Group, error) {
	return c.Query().Where(group.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupClient) GetX(ctx context.Context, id guidgql.GUID) *Group {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySettings queries the settings edge of a Group.
func (c *GroupClient) QuerySettings(gr *Group) *GroupSettingsQuery {
	query := (&GroupSettingsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, id),
			sqlgraph.To(groupsettings.Table, groupsettings.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, group.SettingsTable, group.SettingsColumn),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMembers queries the members edge of a Group.
func (c *GroupClient) QueryMembers(gr *Group) *GroupMembershipQuery {
	query := (&GroupMembershipClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, id),
			sqlgraph.To(groupmembership.Table, groupmembership.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, group.MembersTable, group.MembersColumn),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApplications queries the applications edge of a Group.
func (c *GroupClient) QueryApplications(gr *Group) *GroupMembershipApplicationQuery {
	query := (&GroupMembershipApplicationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, id),
			sqlgraph.To(groupmembershipapplication.Table, groupmembershipapplication.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, group.ApplicationsTable, group.ApplicationsColumn),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GroupClient) Hooks() []Hook {
	return c.hooks.Group
}

// Interceptors returns the client interceptors.
func (c *GroupClient) Interceptors() []Interceptor {
	return c.inters.Group
}

func (c *GroupClient) mutate(ctx context.Context, m *GroupMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GroupCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GroupUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GroupDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Group mutation op: %q", m.Op())
	}
}

// GroupMembershipClient is a client for the GroupMembership schema.
type GroupMembershipClient struct {
	config
}

// NewGroupMembershipClient returns a client for the GroupMembership from the given config.
func NewGroupMembershipClient(c config) *GroupMembershipClient {
	return &GroupMembershipClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `groupmembership.Hooks(f(g(h())))`.
func (c *GroupMembershipClient) Use(hooks ...Hook) {
	c.hooks.GroupMembership = append(c.hooks.GroupMembership, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `groupmembership.Intercept(f(g(h())))`.
func (c *GroupMembershipClient) Intercept(interceptors ...Interceptor) {
	c.inters.GroupMembership = append(c.inters.GroupMembership, interceptors...)
}

// Create returns a builder for creating a GroupMembership entity.
func (c *GroupMembershipClient) Create() *GroupMembershipCreate {
	mutation := newGroupMembershipMutation(c.config, OpCreate)
	return &GroupMembershipCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GroupMembership entities.
func (c *GroupMembershipClient) CreateBulk(builders ...*GroupMembershipCreate) *GroupMembershipCreateBulk {
	return &GroupMembershipCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GroupMembership.
func (c *GroupMembershipClient) Update() *GroupMembershipUpdate {
	mutation := newGroupMembershipMutation(c.config, OpUpdate)
	return &GroupMembershipUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupMembershipClient) UpdateOne(gm *GroupMembership) *GroupMembershipUpdateOne {
	mutation := newGroupMembershipMutation(c.config, OpUpdateOne, withGroupMembership(gm))
	return &GroupMembershipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupMembershipClient) UpdateOneID(id guidgql.GUID) *GroupMembershipUpdateOne {
	mutation := newGroupMembershipMutation(c.config, OpUpdateOne, withGroupMembershipID(id))
	return &GroupMembershipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GroupMembership.
func (c *GroupMembershipClient) Delete() *GroupMembershipDelete {
	mutation := newGroupMembershipMutation(c.config, OpDelete)
	return &GroupMembershipDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GroupMembershipClient) DeleteOne(gm *GroupMembership) *GroupMembershipDeleteOne {
	return c.DeleteOneID(gm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GroupMembershipClient) DeleteOneID(id guidgql.GUID) *GroupMembershipDeleteOne {
	builder := c.Delete().Where(groupmembership.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupMembershipDeleteOne{builder}
}

// Query returns a query builder for GroupMembership.
func (c *GroupMembershipClient) Query() *GroupMembershipQuery {
	return &GroupMembershipQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGroupMembership},
		inters: c.Interceptors(),
	}
}

// Get returns a GroupMembership entity by its id.
func (c *GroupMembershipClient) Get(ctx context.Context, id guidgql.GUID) (*GroupMembership, error) {
	return c.Query().Where(groupmembership.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupMembershipClient) GetX(ctx context.Context, id guidgql.GUID) *GroupMembership {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGroup queries the group edge of a GroupMembership.
func (c *GroupMembershipClient) QueryGroup(gm *GroupMembership) *GroupQuery {
	query := (&GroupClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(groupmembership.Table, groupmembership.FieldID, id),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, groupmembership.GroupTable, groupmembership.GroupColumn),
		)
		fromV = sqlgraph.Neighbors(gm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a GroupMembership.
func (c *GroupMembershipClient) QueryUser(gm *GroupMembership) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(groupmembership.Table, groupmembership.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, groupmembership.UserTable, groupmembership.UserColumn),
		)
		fromV = sqlgraph.Neighbors(gm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GroupMembershipClient) Hooks() []Hook {
	return c.hooks.GroupMembership
}

// Interceptors returns the client interceptors.
func (c *GroupMembershipClient) Interceptors() []Interceptor {
	return c.inters.GroupMembership
}

func (c *GroupMembershipClient) mutate(ctx context.Context, m *GroupMembershipMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GroupMembershipCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GroupMembershipUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GroupMembershipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GroupMembershipDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown GroupMembership mutation op: %q", m.Op())
	}
}

// GroupMembershipApplicationClient is a client for the GroupMembershipApplication schema.
type GroupMembershipApplicationClient struct {
	config
}

// NewGroupMembershipApplicationClient returns a client for the GroupMembershipApplication from the given config.
func NewGroupMembershipApplicationClient(c config) *GroupMembershipApplicationClient {
	return &GroupMembershipApplicationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `groupmembershipapplication.Hooks(f(g(h())))`.
func (c *GroupMembershipApplicationClient) Use(hooks ...Hook) {
	c.hooks.GroupMembershipApplication = append(c.hooks.GroupMembershipApplication, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `groupmembershipapplication.Intercept(f(g(h())))`.
func (c *GroupMembershipApplicationClient) Intercept(interceptors ...Interceptor) {
	c.inters.GroupMembershipApplication = append(c.inters.GroupMembershipApplication, interceptors...)
}

// Create returns a builder for creating a GroupMembershipApplication entity.
func (c *GroupMembershipApplicationClient) Create() *GroupMembershipApplicationCreate {
	mutation := newGroupMembershipApplicationMutation(c.config, OpCreate)
	return &GroupMembershipApplicationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GroupMembershipApplication entities.
func (c *GroupMembershipApplicationClient) CreateBulk(builders ...*GroupMembershipApplicationCreate) *GroupMembershipApplicationCreateBulk {
	return &GroupMembershipApplicationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GroupMembershipApplication.
func (c *GroupMembershipApplicationClient) Update() *GroupMembershipApplicationUpdate {
	mutation := newGroupMembershipApplicationMutation(c.config, OpUpdate)
	return &GroupMembershipApplicationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupMembershipApplicationClient) UpdateOne(gma *GroupMembershipApplication) *GroupMembershipApplicationUpdateOne {
	mutation := newGroupMembershipApplicationMutation(c.config, OpUpdateOne, withGroupMembershipApplication(gma))
	return &GroupMembershipApplicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupMembershipApplicationClient) UpdateOneID(id guidgql.GUID) *GroupMembershipApplicationUpdateOne {
	mutation := newGroupMembershipApplicationMutation(c.config, OpUpdateOne, withGroupMembershipApplicationID(id))
	return &GroupMembershipApplicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GroupMembershipApplication.
func (c *GroupMembershipApplicationClient) Delete() *GroupMembershipApplicationDelete {
	mutation := newGroupMembershipApplicationMutation(c.config, OpDelete)
	return &GroupMembershipApplicationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GroupMembershipApplicationClient) DeleteOne(gma *GroupMembershipApplication) *GroupMembershipApplicationDeleteOne {
	return c.DeleteOneID(gma.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GroupMembershipApplicationClient) DeleteOneID(id guidgql.GUID) *GroupMembershipApplicationDeleteOne {
	builder := c.Delete().Where(groupmembershipapplication.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupMembershipApplicationDeleteOne{builder}
}

// Query returns a query builder for GroupMembershipApplication.
func (c *GroupMembershipApplicationClient) Query() *GroupMembershipApplicationQuery {
	return &GroupMembershipApplicationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGroupMembershipApplication},
		inters: c.Interceptors(),
	}
}

// Get returns a GroupMembershipApplication entity by its id.
func (c *GroupMembershipApplicationClient) Get(ctx context.Context, id guidgql.GUID) (*GroupMembershipApplication, error) {
	return c.Query().Where(groupmembershipapplication.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupMembershipApplicationClient) GetX(ctx context.Context, id guidgql.GUID) *GroupMembershipApplication {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a GroupMembershipApplication.
func (c *GroupMembershipApplicationClient) QueryUser(gma *GroupMembershipApplication) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gma.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(groupmembershipapplication.Table, groupmembershipapplication.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, groupmembershipapplication.UserTable, groupmembershipapplication.UserColumn),
		)
		fromV = sqlgraph.Neighbors(gma.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroup queries the group edge of a GroupMembershipApplication.
func (c *GroupMembershipApplicationClient) QueryGroup(gma *GroupMembershipApplication) *GroupQuery {
	query := (&GroupClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gma.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(groupmembershipapplication.Table, groupmembershipapplication.FieldID, id),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, groupmembershipapplication.GroupTable, groupmembershipapplication.GroupColumn),
		)
		fromV = sqlgraph.Neighbors(gma.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GroupMembershipApplicationClient) Hooks() []Hook {
	return c.hooks.GroupMembershipApplication
}

// Interceptors returns the client interceptors.
func (c *GroupMembershipApplicationClient) Interceptors() []Interceptor {
	return c.inters.GroupMembershipApplication
}

func (c *GroupMembershipApplicationClient) mutate(ctx context.Context, m *GroupMembershipApplicationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GroupMembershipApplicationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GroupMembershipApplicationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GroupMembershipApplicationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GroupMembershipApplicationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown GroupMembershipApplication mutation op: %q", m.Op())
	}
}

// GroupSettingsClient is a client for the GroupSettings schema.
type GroupSettingsClient struct {
	config
}

// NewGroupSettingsClient returns a client for the GroupSettings from the given config.
func NewGroupSettingsClient(c config) *GroupSettingsClient {
	return &GroupSettingsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `groupsettings.Hooks(f(g(h())))`.
func (c *GroupSettingsClient) Use(hooks ...Hook) {
	c.hooks.GroupSettings = append(c.hooks.GroupSettings, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `groupsettings.Intercept(f(g(h())))`.
func (c *GroupSettingsClient) Intercept(interceptors ...Interceptor) {
	c.inters.GroupSettings = append(c.inters.GroupSettings, interceptors...)
}

// Create returns a builder for creating a GroupSettings entity.
func (c *GroupSettingsClient) Create() *GroupSettingsCreate {
	mutation := newGroupSettingsMutation(c.config, OpCreate)
	return &GroupSettingsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GroupSettings entities.
func (c *GroupSettingsClient) CreateBulk(builders ...*GroupSettingsCreate) *GroupSettingsCreateBulk {
	return &GroupSettingsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GroupSettings.
func (c *GroupSettingsClient) Update() *GroupSettingsUpdate {
	mutation := newGroupSettingsMutation(c.config, OpUpdate)
	return &GroupSettingsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupSettingsClient) UpdateOne(gs *GroupSettings) *GroupSettingsUpdateOne {
	mutation := newGroupSettingsMutation(c.config, OpUpdateOne, withGroupSettings(gs))
	return &GroupSettingsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupSettingsClient) UpdateOneID(id guidgql.GUID) *GroupSettingsUpdateOne {
	mutation := newGroupSettingsMutation(c.config, OpUpdateOne, withGroupSettingsID(id))
	return &GroupSettingsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GroupSettings.
func (c *GroupSettingsClient) Delete() *GroupSettingsDelete {
	mutation := newGroupSettingsMutation(c.config, OpDelete)
	return &GroupSettingsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GroupSettingsClient) DeleteOne(gs *GroupSettings) *GroupSettingsDeleteOne {
	return c.DeleteOneID(gs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GroupSettingsClient) DeleteOneID(id guidgql.GUID) *GroupSettingsDeleteOne {
	builder := c.Delete().Where(groupsettings.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupSettingsDeleteOne{builder}
}

// Query returns a query builder for GroupSettings.
func (c *GroupSettingsClient) Query() *GroupSettingsQuery {
	return &GroupSettingsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGroupSettings},
		inters: c.Interceptors(),
	}
}

// Get returns a GroupSettings entity by its id.
func (c *GroupSettingsClient) Get(ctx context.Context, id guidgql.GUID) (*GroupSettings, error) {
	return c.Query().Where(groupsettings.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupSettingsClient) GetX(ctx context.Context, id guidgql.GUID) *GroupSettings {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGroup queries the group edge of a GroupSettings.
func (c *GroupSettingsClient) QueryGroup(gs *GroupSettings) *GroupQuery {
	query := (&GroupClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(groupsettings.Table, groupsettings.FieldID, id),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, groupsettings.GroupTable, groupsettings.GroupColumn),
		)
		fromV = sqlgraph.Neighbors(gs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GroupSettingsClient) Hooks() []Hook {
	return c.hooks.GroupSettings
}

// Interceptors returns the client interceptors.
func (c *GroupSettingsClient) Interceptors() []Interceptor {
	return c.inters.GroupSettings
}

func (c *GroupSettingsClient) mutate(ctx context.Context, m *GroupSettingsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GroupSettingsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GroupSettingsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GroupSettingsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GroupSettingsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown GroupSettings mutation op: %q", m.Op())
	}
}

// MatchClient is a client for the Match schema.
type MatchClient struct {
	config
}

// NewMatchClient returns a client for the Match from the given config.
func NewMatchClient(c config) *MatchClient {
	return &MatchClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `match.Hooks(f(g(h())))`.
func (c *MatchClient) Use(hooks ...Hook) {
	c.hooks.Match = append(c.hooks.Match, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `match.Intercept(f(g(h())))`.
func (c *MatchClient) Intercept(interceptors ...Interceptor) {
	c.inters.Match = append(c.inters.Match, interceptors...)
}

// Create returns a builder for creating a Match entity.
func (c *MatchClient) Create() *MatchCreate {
	mutation := newMatchMutation(c.config, OpCreate)
	return &MatchCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Match entities.
func (c *MatchClient) CreateBulk(builders ...*MatchCreate) *MatchCreateBulk {
	return &MatchCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Match.
func (c *MatchClient) Update() *MatchUpdate {
	mutation := newMatchMutation(c.config, OpUpdate)
	return &MatchUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MatchClient) UpdateOne(m *Match) *MatchUpdateOne {
	mutation := newMatchMutation(c.config, OpUpdateOne, withMatch(m))
	return &MatchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MatchClient) UpdateOneID(id guidgql.GUID) *MatchUpdateOne {
	mutation := newMatchMutation(c.config, OpUpdateOne, withMatchID(id))
	return &MatchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Match.
func (c *MatchClient) Delete() *MatchDelete {
	mutation := newMatchMutation(c.config, OpDelete)
	return &MatchDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MatchClient) DeleteOne(m *Match) *MatchDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MatchClient) DeleteOneID(id guidgql.GUID) *MatchDeleteOne {
	builder := c.Delete().Where(match.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MatchDeleteOne{builder}
}

// Query returns a query builder for Match.
func (c *MatchClient) Query() *MatchQuery {
	return &MatchQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMatch},
		inters: c.Interceptors(),
	}
}

// Get returns a Match entity by its id.
func (c *MatchClient) Get(ctx context.Context, id guidgql.GUID) (*Match, error) {
	return c.Query().Where(match.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MatchClient) GetX(ctx context.Context, id guidgql.GUID) *Match {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGameVersion queries the game_version edge of a Match.
func (c *MatchClient) QueryGameVersion(m *Match) *GameVersionQuery {
	query := (&GameVersionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(match.Table, match.FieldID, id),
			sqlgraph.To(gameversion.Table, gameversion.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, match.GameVersionTable, match.GameVersionColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlayers queries the players edge of a Match.
func (c *MatchClient) QueryPlayers(m *Match) *PlayerQuery {
	query := (&PlayerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(match.Table, match.FieldID, id),
			sqlgraph.To(player.Table, player.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, match.PlayersTable, match.PlayersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStats queries the stats edge of a Match.
func (c *MatchClient) QueryStats(m *Match) *StatisticQuery {
	query := (&StatisticClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(match.Table, match.FieldID, id),
			sqlgraph.To(statistic.Table, statistic.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, match.StatsTable, match.StatsColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MatchClient) Hooks() []Hook {
	return c.hooks.Match
}

// Interceptors returns the client interceptors.
func (c *MatchClient) Interceptors() []Interceptor {
	return c.inters.Match
}

func (c *MatchClient) mutate(ctx context.Context, m *MatchMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MatchCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MatchUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MatchUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MatchDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Match mutation op: %q", m.Op())
	}
}

// PlayerClient is a client for the Player schema.
type PlayerClient struct {
	config
}

// NewPlayerClient returns a client for the Player from the given config.
func NewPlayerClient(c config) *PlayerClient {
	return &PlayerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `player.Hooks(f(g(h())))`.
func (c *PlayerClient) Use(hooks ...Hook) {
	c.hooks.Player = append(c.hooks.Player, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `player.Intercept(f(g(h())))`.
func (c *PlayerClient) Intercept(interceptors ...Interceptor) {
	c.inters.Player = append(c.inters.Player, interceptors...)
}

// Create returns a builder for creating a Player entity.
func (c *PlayerClient) Create() *PlayerCreate {
	mutation := newPlayerMutation(c.config, OpCreate)
	return &PlayerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Player entities.
func (c *PlayerClient) CreateBulk(builders ...*PlayerCreate) *PlayerCreateBulk {
	return &PlayerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Player.
func (c *PlayerClient) Update() *PlayerUpdate {
	mutation := newPlayerMutation(c.config, OpUpdate)
	return &PlayerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlayerClient) UpdateOne(pl *Player) *PlayerUpdateOne {
	mutation := newPlayerMutation(c.config, OpUpdateOne, withPlayer(pl))
	return &PlayerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlayerClient) UpdateOneID(id guidgql.GUID) *PlayerUpdateOne {
	mutation := newPlayerMutation(c.config, OpUpdateOne, withPlayerID(id))
	return &PlayerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Player.
func (c *PlayerClient) Delete() *PlayerDelete {
	mutation := newPlayerMutation(c.config, OpDelete)
	return &PlayerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlayerClient) DeleteOne(pl *Player) *PlayerDeleteOne {
	return c.DeleteOneID(pl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PlayerClient) DeleteOneID(id guidgql.GUID) *PlayerDeleteOne {
	builder := c.Delete().Where(player.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlayerDeleteOne{builder}
}

// Query returns a query builder for Player.
func (c *PlayerClient) Query() *PlayerQuery {
	return &PlayerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePlayer},
		inters: c.Interceptors(),
	}
}

// Get returns a Player entity by its id.
func (c *PlayerClient) Get(ctx context.Context, id guidgql.GUID) (*Player, error) {
	return c.Query().Where(player.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlayerClient) GetX(ctx context.Context, id guidgql.GUID) *Player {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a Player.
func (c *PlayerClient) QueryOwner(pl *Player) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(player.Table, player.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, player.OwnerTable, player.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySupervisors queries the supervisors edge of a Player.
func (c *PlayerClient) QuerySupervisors(pl *Player) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(player.Table, player.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, player.SupervisorsTable, player.SupervisorsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySupervisionRequests queries the supervision_requests edge of a Player.
func (c *PlayerClient) QuerySupervisionRequests(pl *Player) *PlayerSupervisionRequestQuery {
	query := (&PlayerSupervisionRequestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(player.Table, player.FieldID, id),
			sqlgraph.To(playersupervisionrequest.Table, playersupervisionrequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, player.SupervisionRequestsTable, player.SupervisionRequestsColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMatches queries the matches edge of a Player.
func (c *PlayerClient) QueryMatches(pl *Player) *MatchQuery {
	query := (&MatchClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(player.Table, player.FieldID, id),
			sqlgraph.To(match.Table, match.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, player.MatchesTable, player.MatchesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStats queries the stats edge of a Player.
func (c *PlayerClient) QueryStats(pl *Player) *StatisticQuery {
	query := (&StatisticClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(player.Table, player.FieldID, id),
			sqlgraph.To(statistic.Table, statistic.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, player.StatsTable, player.StatsColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlayerClient) Hooks() []Hook {
	return c.hooks.Player
}

// Interceptors returns the client interceptors.
func (c *PlayerClient) Interceptors() []Interceptor {
	return c.inters.Player
}

func (c *PlayerClient) mutate(ctx context.Context, m *PlayerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PlayerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PlayerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PlayerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PlayerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Player mutation op: %q", m.Op())
	}
}

// PlayerSupervisionRequestClient is a client for the PlayerSupervisionRequest schema.
type PlayerSupervisionRequestClient struct {
	config
}

// NewPlayerSupervisionRequestClient returns a client for the PlayerSupervisionRequest from the given config.
func NewPlayerSupervisionRequestClient(c config) *PlayerSupervisionRequestClient {
	return &PlayerSupervisionRequestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `playersupervisionrequest.Hooks(f(g(h())))`.
func (c *PlayerSupervisionRequestClient) Use(hooks ...Hook) {
	c.hooks.PlayerSupervisionRequest = append(c.hooks.PlayerSupervisionRequest, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `playersupervisionrequest.Intercept(f(g(h())))`.
func (c *PlayerSupervisionRequestClient) Intercept(interceptors ...Interceptor) {
	c.inters.PlayerSupervisionRequest = append(c.inters.PlayerSupervisionRequest, interceptors...)
}

// Create returns a builder for creating a PlayerSupervisionRequest entity.
func (c *PlayerSupervisionRequestClient) Create() *PlayerSupervisionRequestCreate {
	mutation := newPlayerSupervisionRequestMutation(c.config, OpCreate)
	return &PlayerSupervisionRequestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PlayerSupervisionRequest entities.
func (c *PlayerSupervisionRequestClient) CreateBulk(builders ...*PlayerSupervisionRequestCreate) *PlayerSupervisionRequestCreateBulk {
	return &PlayerSupervisionRequestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PlayerSupervisionRequest.
func (c *PlayerSupervisionRequestClient) Update() *PlayerSupervisionRequestUpdate {
	mutation := newPlayerSupervisionRequestMutation(c.config, OpUpdate)
	return &PlayerSupervisionRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlayerSupervisionRequestClient) UpdateOne(psr *PlayerSupervisionRequest) *PlayerSupervisionRequestUpdateOne {
	mutation := newPlayerSupervisionRequestMutation(c.config, OpUpdateOne, withPlayerSupervisionRequest(psr))
	return &PlayerSupervisionRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlayerSupervisionRequestClient) UpdateOneID(id guidgql.GUID) *PlayerSupervisionRequestUpdateOne {
	mutation := newPlayerSupervisionRequestMutation(c.config, OpUpdateOne, withPlayerSupervisionRequestID(id))
	return &PlayerSupervisionRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PlayerSupervisionRequest.
func (c *PlayerSupervisionRequestClient) Delete() *PlayerSupervisionRequestDelete {
	mutation := newPlayerSupervisionRequestMutation(c.config, OpDelete)
	return &PlayerSupervisionRequestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlayerSupervisionRequestClient) DeleteOne(psr *PlayerSupervisionRequest) *PlayerSupervisionRequestDeleteOne {
	return c.DeleteOneID(psr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PlayerSupervisionRequestClient) DeleteOneID(id guidgql.GUID) *PlayerSupervisionRequestDeleteOne {
	builder := c.Delete().Where(playersupervisionrequest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlayerSupervisionRequestDeleteOne{builder}
}

// Query returns a query builder for PlayerSupervisionRequest.
func (c *PlayerSupervisionRequestClient) Query() *PlayerSupervisionRequestQuery {
	return &PlayerSupervisionRequestQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePlayerSupervisionRequest},
		inters: c.Interceptors(),
	}
}

// Get returns a PlayerSupervisionRequest entity by its id.
func (c *PlayerSupervisionRequestClient) Get(ctx context.Context, id guidgql.GUID) (*PlayerSupervisionRequest, error) {
	return c.Query().Where(playersupervisionrequest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlayerSupervisionRequestClient) GetX(ctx context.Context, id guidgql.GUID) *PlayerSupervisionRequest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySender queries the sender edge of a PlayerSupervisionRequest.
func (c *PlayerSupervisionRequestClient) QuerySender(psr *PlayerSupervisionRequest) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := psr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(playersupervisionrequest.Table, playersupervisionrequest.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, playersupervisionrequest.SenderTable, playersupervisionrequest.SenderColumn),
		)
		fromV = sqlgraph.Neighbors(psr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlayer queries the player edge of a PlayerSupervisionRequest.
func (c *PlayerSupervisionRequestClient) QueryPlayer(psr *PlayerSupervisionRequest) *PlayerQuery {
	query := (&PlayerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := psr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(playersupervisionrequest.Table, playersupervisionrequest.FieldID, id),
			sqlgraph.To(player.Table, player.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, playersupervisionrequest.PlayerTable, playersupervisionrequest.PlayerColumn),
		)
		fromV = sqlgraph.Neighbors(psr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApprovals queries the approvals edge of a PlayerSupervisionRequest.
func (c *PlayerSupervisionRequestClient) QueryApprovals(psr *PlayerSupervisionRequest) *PlayerSupervisionRequestApprovalQuery {
	query := (&PlayerSupervisionRequestApprovalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := psr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(playersupervisionrequest.Table, playersupervisionrequest.FieldID, id),
			sqlgraph.To(playersupervisionrequestapproval.Table, playersupervisionrequestapproval.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, playersupervisionrequest.ApprovalsTable, playersupervisionrequest.ApprovalsColumn),
		)
		fromV = sqlgraph.Neighbors(psr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlayerSupervisionRequestClient) Hooks() []Hook {
	return c.hooks.PlayerSupervisionRequest
}

// Interceptors returns the client interceptors.
func (c *PlayerSupervisionRequestClient) Interceptors() []Interceptor {
	return c.inters.PlayerSupervisionRequest
}

func (c *PlayerSupervisionRequestClient) mutate(ctx context.Context, m *PlayerSupervisionRequestMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PlayerSupervisionRequestCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PlayerSupervisionRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PlayerSupervisionRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PlayerSupervisionRequestDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PlayerSupervisionRequest mutation op: %q", m.Op())
	}
}

// PlayerSupervisionRequestApprovalClient is a client for the PlayerSupervisionRequestApproval schema.
type PlayerSupervisionRequestApprovalClient struct {
	config
}

// NewPlayerSupervisionRequestApprovalClient returns a client for the PlayerSupervisionRequestApproval from the given config.
func NewPlayerSupervisionRequestApprovalClient(c config) *PlayerSupervisionRequestApprovalClient {
	return &PlayerSupervisionRequestApprovalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `playersupervisionrequestapproval.Hooks(f(g(h())))`.
func (c *PlayerSupervisionRequestApprovalClient) Use(hooks ...Hook) {
	c.hooks.PlayerSupervisionRequestApproval = append(c.hooks.PlayerSupervisionRequestApproval, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `playersupervisionrequestapproval.Intercept(f(g(h())))`.
func (c *PlayerSupervisionRequestApprovalClient) Intercept(interceptors ...Interceptor) {
	c.inters.PlayerSupervisionRequestApproval = append(c.inters.PlayerSupervisionRequestApproval, interceptors...)
}

// Create returns a builder for creating a PlayerSupervisionRequestApproval entity.
func (c *PlayerSupervisionRequestApprovalClient) Create() *PlayerSupervisionRequestApprovalCreate {
	mutation := newPlayerSupervisionRequestApprovalMutation(c.config, OpCreate)
	return &PlayerSupervisionRequestApprovalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PlayerSupervisionRequestApproval entities.
func (c *PlayerSupervisionRequestApprovalClient) CreateBulk(builders ...*PlayerSupervisionRequestApprovalCreate) *PlayerSupervisionRequestApprovalCreateBulk {
	return &PlayerSupervisionRequestApprovalCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PlayerSupervisionRequestApproval.
func (c *PlayerSupervisionRequestApprovalClient) Update() *PlayerSupervisionRequestApprovalUpdate {
	mutation := newPlayerSupervisionRequestApprovalMutation(c.config, OpUpdate)
	return &PlayerSupervisionRequestApprovalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlayerSupervisionRequestApprovalClient) UpdateOne(psra *PlayerSupervisionRequestApproval) *PlayerSupervisionRequestApprovalUpdateOne {
	mutation := newPlayerSupervisionRequestApprovalMutation(c.config, OpUpdateOne, withPlayerSupervisionRequestApproval(psra))
	return &PlayerSupervisionRequestApprovalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlayerSupervisionRequestApprovalClient) UpdateOneID(id guidgql.GUID) *PlayerSupervisionRequestApprovalUpdateOne {
	mutation := newPlayerSupervisionRequestApprovalMutation(c.config, OpUpdateOne, withPlayerSupervisionRequestApprovalID(id))
	return &PlayerSupervisionRequestApprovalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PlayerSupervisionRequestApproval.
func (c *PlayerSupervisionRequestApprovalClient) Delete() *PlayerSupervisionRequestApprovalDelete {
	mutation := newPlayerSupervisionRequestApprovalMutation(c.config, OpDelete)
	return &PlayerSupervisionRequestApprovalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlayerSupervisionRequestApprovalClient) DeleteOne(psra *PlayerSupervisionRequestApproval) *PlayerSupervisionRequestApprovalDeleteOne {
	return c.DeleteOneID(psra.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PlayerSupervisionRequestApprovalClient) DeleteOneID(id guidgql.GUID) *PlayerSupervisionRequestApprovalDeleteOne {
	builder := c.Delete().Where(playersupervisionrequestapproval.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlayerSupervisionRequestApprovalDeleteOne{builder}
}

// Query returns a query builder for PlayerSupervisionRequestApproval.
func (c *PlayerSupervisionRequestApprovalClient) Query() *PlayerSupervisionRequestApprovalQuery {
	return &PlayerSupervisionRequestApprovalQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePlayerSupervisionRequestApproval},
		inters: c.Interceptors(),
	}
}

// Get returns a PlayerSupervisionRequestApproval entity by its id.
func (c *PlayerSupervisionRequestApprovalClient) Get(ctx context.Context, id guidgql.GUID) (*PlayerSupervisionRequestApproval, error) {
	return c.Query().Where(playersupervisionrequestapproval.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlayerSupervisionRequestApprovalClient) GetX(ctx context.Context, id guidgql.GUID) *PlayerSupervisionRequestApproval {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApprover queries the approver edge of a PlayerSupervisionRequestApproval.
func (c *PlayerSupervisionRequestApprovalClient) QueryApprover(psra *PlayerSupervisionRequestApproval) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := psra.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(playersupervisionrequestapproval.Table, playersupervisionrequestapproval.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, playersupervisionrequestapproval.ApproverTable, playersupervisionrequestapproval.ApproverColumn),
		)
		fromV = sqlgraph.Neighbors(psra.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySupervisionRequest queries the supervision_request edge of a PlayerSupervisionRequestApproval.
func (c *PlayerSupervisionRequestApprovalClient) QuerySupervisionRequest(psra *PlayerSupervisionRequestApproval) *PlayerSupervisionRequestQuery {
	query := (&PlayerSupervisionRequestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := psra.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(playersupervisionrequestapproval.Table, playersupervisionrequestapproval.FieldID, id),
			sqlgraph.To(playersupervisionrequest.Table, playersupervisionrequest.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, playersupervisionrequestapproval.SupervisionRequestTable, playersupervisionrequestapproval.SupervisionRequestColumn),
		)
		fromV = sqlgraph.Neighbors(psra.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlayerSupervisionRequestApprovalClient) Hooks() []Hook {
	return c.hooks.PlayerSupervisionRequestApproval
}

// Interceptors returns the client interceptors.
func (c *PlayerSupervisionRequestApprovalClient) Interceptors() []Interceptor {
	return c.inters.PlayerSupervisionRequestApproval
}

func (c *PlayerSupervisionRequestApprovalClient) mutate(ctx context.Context, m *PlayerSupervisionRequestApprovalMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PlayerSupervisionRequestApprovalCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PlayerSupervisionRequestApprovalUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PlayerSupervisionRequestApprovalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PlayerSupervisionRequestApprovalDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown PlayerSupervisionRequestApproval mutation op: %q", m.Op())
	}
}

// StatDescriptionClient is a client for the StatDescription schema.
type StatDescriptionClient struct {
	config
}

// NewStatDescriptionClient returns a client for the StatDescription from the given config.
func NewStatDescriptionClient(c config) *StatDescriptionClient {
	return &StatDescriptionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `statdescription.Hooks(f(g(h())))`.
func (c *StatDescriptionClient) Use(hooks ...Hook) {
	c.hooks.StatDescription = append(c.hooks.StatDescription, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `statdescription.Intercept(f(g(h())))`.
func (c *StatDescriptionClient) Intercept(interceptors ...Interceptor) {
	c.inters.StatDescription = append(c.inters.StatDescription, interceptors...)
}

// Create returns a builder for creating a StatDescription entity.
func (c *StatDescriptionClient) Create() *StatDescriptionCreate {
	mutation := newStatDescriptionMutation(c.config, OpCreate)
	return &StatDescriptionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StatDescription entities.
func (c *StatDescriptionClient) CreateBulk(builders ...*StatDescriptionCreate) *StatDescriptionCreateBulk {
	return &StatDescriptionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StatDescription.
func (c *StatDescriptionClient) Update() *StatDescriptionUpdate {
	mutation := newStatDescriptionMutation(c.config, OpUpdate)
	return &StatDescriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StatDescriptionClient) UpdateOne(sd *StatDescription) *StatDescriptionUpdateOne {
	mutation := newStatDescriptionMutation(c.config, OpUpdateOne, withStatDescription(sd))
	return &StatDescriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StatDescriptionClient) UpdateOneID(id guidgql.GUID) *StatDescriptionUpdateOne {
	mutation := newStatDescriptionMutation(c.config, OpUpdateOne, withStatDescriptionID(id))
	return &StatDescriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StatDescription.
func (c *StatDescriptionClient) Delete() *StatDescriptionDelete {
	mutation := newStatDescriptionMutation(c.config, OpDelete)
	return &StatDescriptionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StatDescriptionClient) DeleteOne(sd *StatDescription) *StatDescriptionDeleteOne {
	return c.DeleteOneID(sd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StatDescriptionClient) DeleteOneID(id guidgql.GUID) *StatDescriptionDeleteOne {
	builder := c.Delete().Where(statdescription.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StatDescriptionDeleteOne{builder}
}

// Query returns a query builder for StatDescription.
func (c *StatDescriptionClient) Query() *StatDescriptionQuery {
	return &StatDescriptionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStatDescription},
		inters: c.Interceptors(),
	}
}

// Get returns a StatDescription entity by its id.
func (c *StatDescriptionClient) Get(ctx context.Context, id guidgql.GUID) (*StatDescription, error) {
	return c.Query().Where(statdescription.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StatDescriptionClient) GetX(ctx context.Context, id guidgql.GUID) *StatDescription {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGameVersion queries the game_version edge of a StatDescription.
func (c *StatDescriptionClient) QueryGameVersion(sd *StatDescription) *GameVersionQuery {
	query := (&GameVersionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statdescription.Table, statdescription.FieldID, id),
			sqlgraph.To(gameversion.Table, gameversion.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, statdescription.GameVersionTable, statdescription.GameVersionPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(sd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStats queries the stats edge of a StatDescription.
func (c *StatDescriptionClient) QueryStats(sd *StatDescription) *StatisticQuery {
	query := (&StatisticClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statdescription.Table, statdescription.FieldID, id),
			sqlgraph.To(statistic.Table, statistic.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, statdescription.StatsTable, statdescription.StatsColumn),
		)
		fromV = sqlgraph.Neighbors(sd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StatDescriptionClient) Hooks() []Hook {
	return c.hooks.StatDescription
}

// Interceptors returns the client interceptors.
func (c *StatDescriptionClient) Interceptors() []Interceptor {
	return c.inters.StatDescription
}

func (c *StatDescriptionClient) mutate(ctx context.Context, m *StatDescriptionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StatDescriptionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StatDescriptionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StatDescriptionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StatDescriptionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown StatDescription mutation op: %q", m.Op())
	}
}

// StatisticClient is a client for the Statistic schema.
type StatisticClient struct {
	config
}

// NewStatisticClient returns a client for the Statistic from the given config.
func NewStatisticClient(c config) *StatisticClient {
	return &StatisticClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `statistic.Hooks(f(g(h())))`.
func (c *StatisticClient) Use(hooks ...Hook) {
	c.hooks.Statistic = append(c.hooks.Statistic, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `statistic.Intercept(f(g(h())))`.
func (c *StatisticClient) Intercept(interceptors ...Interceptor) {
	c.inters.Statistic = append(c.inters.Statistic, interceptors...)
}

// Create returns a builder for creating a Statistic entity.
func (c *StatisticClient) Create() *StatisticCreate {
	mutation := newStatisticMutation(c.config, OpCreate)
	return &StatisticCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Statistic entities.
func (c *StatisticClient) CreateBulk(builders ...*StatisticCreate) *StatisticCreateBulk {
	return &StatisticCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Statistic.
func (c *StatisticClient) Update() *StatisticUpdate {
	mutation := newStatisticMutation(c.config, OpUpdate)
	return &StatisticUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StatisticClient) UpdateOne(s *Statistic) *StatisticUpdateOne {
	mutation := newStatisticMutation(c.config, OpUpdateOne, withStatistic(s))
	return &StatisticUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StatisticClient) UpdateOneID(id guidgql.GUID) *StatisticUpdateOne {
	mutation := newStatisticMutation(c.config, OpUpdateOne, withStatisticID(id))
	return &StatisticUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Statistic.
func (c *StatisticClient) Delete() *StatisticDelete {
	mutation := newStatisticMutation(c.config, OpDelete)
	return &StatisticDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StatisticClient) DeleteOne(s *Statistic) *StatisticDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StatisticClient) DeleteOneID(id guidgql.GUID) *StatisticDeleteOne {
	builder := c.Delete().Where(statistic.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StatisticDeleteOne{builder}
}

// Query returns a query builder for Statistic.
func (c *StatisticClient) Query() *StatisticQuery {
	return &StatisticQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStatistic},
		inters: c.Interceptors(),
	}
}

// Get returns a Statistic entity by its id.
func (c *StatisticClient) Get(ctx context.Context, id guidgql.GUID) (*Statistic, error) {
	return c.Query().Where(statistic.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StatisticClient) GetX(ctx context.Context, id guidgql.GUID) *Statistic {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMatch queries the match edge of a Statistic.
func (c *StatisticClient) QueryMatch(s *Statistic) *MatchQuery {
	query := (&MatchClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statistic.Table, statistic.FieldID, id),
			sqlgraph.To(match.Table, match.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, statistic.MatchTable, statistic.MatchColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatDescription queries the stat_description edge of a Statistic.
func (c *StatisticClient) QueryStatDescription(s *Statistic) *StatDescriptionQuery {
	query := (&StatDescriptionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statistic.Table, statistic.FieldID, id),
			sqlgraph.To(statdescription.Table, statdescription.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, statistic.StatDescriptionTable, statistic.StatDescriptionColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlayer queries the player edge of a Statistic.
func (c *StatisticClient) QueryPlayer(s *Statistic) *PlayerQuery {
	query := (&PlayerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(statistic.Table, statistic.FieldID, id),
			sqlgraph.To(player.Table, player.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, statistic.PlayerTable, statistic.PlayerColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StatisticClient) Hooks() []Hook {
	return c.hooks.Statistic
}

// Interceptors returns the client interceptors.
func (c *StatisticClient) Interceptors() []Interceptor {
	return c.inters.Statistic
}

func (c *StatisticClient) mutate(ctx context.Context, m *StatisticMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StatisticCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StatisticUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StatisticUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StatisticDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Statistic mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id guidgql.GUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id guidgql.GUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id guidgql.GUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id guidgql.GUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPlayers queries the players edge of a User.
func (c *UserClient) QueryPlayers(u *User) *PlayerQuery {
	query := (&PlayerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(player.Table, player.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.PlayersTable, user.PlayersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMainPlayer queries the main_player edge of a User.
func (c *UserClient) QueryMainPlayer(u *User) *PlayerQuery {
	query := (&PlayerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(player.Table, player.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.MainPlayerTable, user.MainPlayerColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySentSupervisionRequests queries the sent_supervision_requests edge of a User.
func (c *UserClient) QuerySentSupervisionRequests(u *User) *PlayerSupervisionRequestQuery {
	query := (&PlayerSupervisionRequestClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(playersupervisionrequest.Table, playersupervisionrequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SentSupervisionRequestsTable, user.SentSupervisionRequestsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySupervisionRequestApprovals queries the supervision_request_approvals edge of a User.
func (c *UserClient) QuerySupervisionRequestApprovals(u *User) *PlayerSupervisionRequestApprovalQuery {
	query := (&PlayerSupervisionRequestApprovalClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(playersupervisionrequestapproval.Table, playersupervisionrequestapproval.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SupervisionRequestApprovalsTable, user.SupervisionRequestApprovalsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroupMemberships queries the group_memberships edge of a User.
func (c *UserClient) QueryGroupMemberships(u *User) *GroupMembershipQuery {
	query := (&GroupMembershipClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(groupmembership.Table, groupmembership.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.GroupMembershipsTable, user.GroupMembershipsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroupMembershipApplications queries the group_membership_applications edge of a User.
func (c *UserClient) QueryGroupMembershipApplications(u *User) *GroupMembershipApplicationQuery {
	query := (&GroupMembershipApplicationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(groupmembershipapplication.Table, groupmembershipapplication.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.GroupMembershipApplicationsTable, user.GroupMembershipApplicationsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGames queries the games edge of a User.
func (c *UserClient) QueryGames(u *User) *GameQuery {
	query := (&GameClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(game.Table, game.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.GamesTable, user.GamesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFavoriteGames queries the favorite_games edge of a User.
func (c *UserClient) QueryFavoriteGames(u *User) *GameFavoriteQuery {
	query := (&GameFavoriteClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(gamefavorite.Table, gamefavorite.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.FavoriteGamesTable, user.FavoriteGamesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Game, GameFavorite, GameVersion, Group, GroupMembership,
		GroupMembershipApplication, GroupSettings, Match, Player,
		PlayerSupervisionRequest, PlayerSupervisionRequestApproval, StatDescription,
		Statistic, User []ent.Hook
	}
	inters struct {
		Game, GameFavorite, GameVersion, Group, GroupMembership,
		GroupMembershipApplication, GroupSettings, Match, Player,
		PlayerSupervisionRequest, PlayerSupervisionRequestApproval, StatDescription,
		Statistic, User []ent.Interceptor
	}
)
