// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/google/uuid"
	"github.com/open-boardgame-stats/backend/internal/ent/migrate"

	"github.com/open-boardgame-stats/backend/internal/ent/player"
	"github.com/open-boardgame-stats/backend/internal/ent/playersupervisionrequest"
	"github.com/open-boardgame-stats/backend/internal/ent/playersupervisionrequestapproval"
	"github.com/open-boardgame-stats/backend/internal/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Player is the client for interacting with the Player builders.
	Player *PlayerClient
	// PlayerSupervisionRequest is the client for interacting with the PlayerSupervisionRequest builders.
	PlayerSupervisionRequest *PlayerSupervisionRequestClient
	// PlayerSupervisionRequestApproval is the client for interacting with the PlayerSupervisionRequestApproval builders.
	PlayerSupervisionRequestApproval *PlayerSupervisionRequestApprovalClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Player = NewPlayerClient(c.config)
	c.PlayerSupervisionRequest = NewPlayerSupervisionRequestClient(c.config)
	c.PlayerSupervisionRequestApproval = NewPlayerSupervisionRequestApprovalClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                              ctx,
		config:                           cfg,
		Player:                           NewPlayerClient(cfg),
		PlayerSupervisionRequest:         NewPlayerSupervisionRequestClient(cfg),
		PlayerSupervisionRequestApproval: NewPlayerSupervisionRequestApprovalClient(cfg),
		User:                             NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                              ctx,
		config:                           cfg,
		Player:                           NewPlayerClient(cfg),
		PlayerSupervisionRequest:         NewPlayerSupervisionRequestClient(cfg),
		PlayerSupervisionRequestApproval: NewPlayerSupervisionRequestApprovalClient(cfg),
		User:                             NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Player.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Player.Use(hooks...)
	c.PlayerSupervisionRequest.Use(hooks...)
	c.PlayerSupervisionRequestApproval.Use(hooks...)
	c.User.Use(hooks...)
}

// PlayerClient is a client for the Player schema.
type PlayerClient struct {
	config
}

// NewPlayerClient returns a client for the Player from the given config.
func NewPlayerClient(c config) *PlayerClient {
	return &PlayerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `player.Hooks(f(g(h())))`.
func (c *PlayerClient) Use(hooks ...Hook) {
	c.hooks.Player = append(c.hooks.Player, hooks...)
}

// Create returns a builder for creating a Player entity.
func (c *PlayerClient) Create() *PlayerCreate {
	mutation := newPlayerMutation(c.config, OpCreate)
	return &PlayerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Player entities.
func (c *PlayerClient) CreateBulk(builders ...*PlayerCreate) *PlayerCreateBulk {
	return &PlayerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Player.
func (c *PlayerClient) Update() *PlayerUpdate {
	mutation := newPlayerMutation(c.config, OpUpdate)
	return &PlayerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlayerClient) UpdateOne(pl *Player) *PlayerUpdateOne {
	mutation := newPlayerMutation(c.config, OpUpdateOne, withPlayer(pl))
	return &PlayerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlayerClient) UpdateOneID(id uuid.UUID) *PlayerUpdateOne {
	mutation := newPlayerMutation(c.config, OpUpdateOne, withPlayerID(id))
	return &PlayerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Player.
func (c *PlayerClient) Delete() *PlayerDelete {
	mutation := newPlayerMutation(c.config, OpDelete)
	return &PlayerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlayerClient) DeleteOne(pl *Player) *PlayerDeleteOne {
	return c.DeleteOneID(pl.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *PlayerClient) DeleteOneID(id uuid.UUID) *PlayerDeleteOne {
	builder := c.Delete().Where(player.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlayerDeleteOne{builder}
}

// Query returns a query builder for Player.
func (c *PlayerClient) Query() *PlayerQuery {
	return &PlayerQuery{
		config: c.config,
	}
}

// Get returns a Player entity by its id.
func (c *PlayerClient) Get(ctx context.Context, id uuid.UUID) (*Player, error) {
	return c.Query().Where(player.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlayerClient) GetX(ctx context.Context, id uuid.UUID) *Player {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a Player.
func (c *PlayerClient) QueryOwner(pl *Player) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(player.Table, player.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, player.OwnerTable, player.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySupervisors queries the supervisors edge of a Player.
func (c *PlayerClient) QuerySupervisors(pl *Player) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(player.Table, player.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, player.SupervisorsTable, player.SupervisorsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySupervisionRequests queries the supervision_requests edge of a Player.
func (c *PlayerClient) QuerySupervisionRequests(pl *Player) *PlayerSupervisionRequestQuery {
	query := &PlayerSupervisionRequestQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(player.Table, player.FieldID, id),
			sqlgraph.To(playersupervisionrequest.Table, playersupervisionrequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, player.SupervisionRequestsTable, player.SupervisionRequestsColumn),
		)
		fromV = sqlgraph.Neighbors(pl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlayerClient) Hooks() []Hook {
	return c.hooks.Player
}

// PlayerSupervisionRequestClient is a client for the PlayerSupervisionRequest schema.
type PlayerSupervisionRequestClient struct {
	config
}

// NewPlayerSupervisionRequestClient returns a client for the PlayerSupervisionRequest from the given config.
func NewPlayerSupervisionRequestClient(c config) *PlayerSupervisionRequestClient {
	return &PlayerSupervisionRequestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `playersupervisionrequest.Hooks(f(g(h())))`.
func (c *PlayerSupervisionRequestClient) Use(hooks ...Hook) {
	c.hooks.PlayerSupervisionRequest = append(c.hooks.PlayerSupervisionRequest, hooks...)
}

// Create returns a builder for creating a PlayerSupervisionRequest entity.
func (c *PlayerSupervisionRequestClient) Create() *PlayerSupervisionRequestCreate {
	mutation := newPlayerSupervisionRequestMutation(c.config, OpCreate)
	return &PlayerSupervisionRequestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PlayerSupervisionRequest entities.
func (c *PlayerSupervisionRequestClient) CreateBulk(builders ...*PlayerSupervisionRequestCreate) *PlayerSupervisionRequestCreateBulk {
	return &PlayerSupervisionRequestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PlayerSupervisionRequest.
func (c *PlayerSupervisionRequestClient) Update() *PlayerSupervisionRequestUpdate {
	mutation := newPlayerSupervisionRequestMutation(c.config, OpUpdate)
	return &PlayerSupervisionRequestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlayerSupervisionRequestClient) UpdateOne(psr *PlayerSupervisionRequest) *PlayerSupervisionRequestUpdateOne {
	mutation := newPlayerSupervisionRequestMutation(c.config, OpUpdateOne, withPlayerSupervisionRequest(psr))
	return &PlayerSupervisionRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlayerSupervisionRequestClient) UpdateOneID(id uuid.UUID) *PlayerSupervisionRequestUpdateOne {
	mutation := newPlayerSupervisionRequestMutation(c.config, OpUpdateOne, withPlayerSupervisionRequestID(id))
	return &PlayerSupervisionRequestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PlayerSupervisionRequest.
func (c *PlayerSupervisionRequestClient) Delete() *PlayerSupervisionRequestDelete {
	mutation := newPlayerSupervisionRequestMutation(c.config, OpDelete)
	return &PlayerSupervisionRequestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlayerSupervisionRequestClient) DeleteOne(psr *PlayerSupervisionRequest) *PlayerSupervisionRequestDeleteOne {
	return c.DeleteOneID(psr.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *PlayerSupervisionRequestClient) DeleteOneID(id uuid.UUID) *PlayerSupervisionRequestDeleteOne {
	builder := c.Delete().Where(playersupervisionrequest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlayerSupervisionRequestDeleteOne{builder}
}

// Query returns a query builder for PlayerSupervisionRequest.
func (c *PlayerSupervisionRequestClient) Query() *PlayerSupervisionRequestQuery {
	return &PlayerSupervisionRequestQuery{
		config: c.config,
	}
}

// Get returns a PlayerSupervisionRequest entity by its id.
func (c *PlayerSupervisionRequestClient) Get(ctx context.Context, id uuid.UUID) (*PlayerSupervisionRequest, error) {
	return c.Query().Where(playersupervisionrequest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlayerSupervisionRequestClient) GetX(ctx context.Context, id uuid.UUID) *PlayerSupervisionRequest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySender queries the sender edge of a PlayerSupervisionRequest.
func (c *PlayerSupervisionRequestClient) QuerySender(psr *PlayerSupervisionRequest) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := psr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(playersupervisionrequest.Table, playersupervisionrequest.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, playersupervisionrequest.SenderTable, playersupervisionrequest.SenderColumn),
		)
		fromV = sqlgraph.Neighbors(psr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPlayer queries the player edge of a PlayerSupervisionRequest.
func (c *PlayerSupervisionRequestClient) QueryPlayer(psr *PlayerSupervisionRequest) *PlayerQuery {
	query := &PlayerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := psr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(playersupervisionrequest.Table, playersupervisionrequest.FieldID, id),
			sqlgraph.To(player.Table, player.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, playersupervisionrequest.PlayerTable, playersupervisionrequest.PlayerColumn),
		)
		fromV = sqlgraph.Neighbors(psr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApprovals queries the approvals edge of a PlayerSupervisionRequest.
func (c *PlayerSupervisionRequestClient) QueryApprovals(psr *PlayerSupervisionRequest) *PlayerSupervisionRequestApprovalQuery {
	query := &PlayerSupervisionRequestApprovalQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := psr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(playersupervisionrequest.Table, playersupervisionrequest.FieldID, id),
			sqlgraph.To(playersupervisionrequestapproval.Table, playersupervisionrequestapproval.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, playersupervisionrequest.ApprovalsTable, playersupervisionrequest.ApprovalsColumn),
		)
		fromV = sqlgraph.Neighbors(psr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlayerSupervisionRequestClient) Hooks() []Hook {
	return c.hooks.PlayerSupervisionRequest
}

// PlayerSupervisionRequestApprovalClient is a client for the PlayerSupervisionRequestApproval schema.
type PlayerSupervisionRequestApprovalClient struct {
	config
}

// NewPlayerSupervisionRequestApprovalClient returns a client for the PlayerSupervisionRequestApproval from the given config.
func NewPlayerSupervisionRequestApprovalClient(c config) *PlayerSupervisionRequestApprovalClient {
	return &PlayerSupervisionRequestApprovalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `playersupervisionrequestapproval.Hooks(f(g(h())))`.
func (c *PlayerSupervisionRequestApprovalClient) Use(hooks ...Hook) {
	c.hooks.PlayerSupervisionRequestApproval = append(c.hooks.PlayerSupervisionRequestApproval, hooks...)
}

// Create returns a builder for creating a PlayerSupervisionRequestApproval entity.
func (c *PlayerSupervisionRequestApprovalClient) Create() *PlayerSupervisionRequestApprovalCreate {
	mutation := newPlayerSupervisionRequestApprovalMutation(c.config, OpCreate)
	return &PlayerSupervisionRequestApprovalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PlayerSupervisionRequestApproval entities.
func (c *PlayerSupervisionRequestApprovalClient) CreateBulk(builders ...*PlayerSupervisionRequestApprovalCreate) *PlayerSupervisionRequestApprovalCreateBulk {
	return &PlayerSupervisionRequestApprovalCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PlayerSupervisionRequestApproval.
func (c *PlayerSupervisionRequestApprovalClient) Update() *PlayerSupervisionRequestApprovalUpdate {
	mutation := newPlayerSupervisionRequestApprovalMutation(c.config, OpUpdate)
	return &PlayerSupervisionRequestApprovalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PlayerSupervisionRequestApprovalClient) UpdateOne(psra *PlayerSupervisionRequestApproval) *PlayerSupervisionRequestApprovalUpdateOne {
	mutation := newPlayerSupervisionRequestApprovalMutation(c.config, OpUpdateOne, withPlayerSupervisionRequestApproval(psra))
	return &PlayerSupervisionRequestApprovalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PlayerSupervisionRequestApprovalClient) UpdateOneID(id uuid.UUID) *PlayerSupervisionRequestApprovalUpdateOne {
	mutation := newPlayerSupervisionRequestApprovalMutation(c.config, OpUpdateOne, withPlayerSupervisionRequestApprovalID(id))
	return &PlayerSupervisionRequestApprovalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PlayerSupervisionRequestApproval.
func (c *PlayerSupervisionRequestApprovalClient) Delete() *PlayerSupervisionRequestApprovalDelete {
	mutation := newPlayerSupervisionRequestApprovalMutation(c.config, OpDelete)
	return &PlayerSupervisionRequestApprovalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PlayerSupervisionRequestApprovalClient) DeleteOne(psra *PlayerSupervisionRequestApproval) *PlayerSupervisionRequestApprovalDeleteOne {
	return c.DeleteOneID(psra.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *PlayerSupervisionRequestApprovalClient) DeleteOneID(id uuid.UUID) *PlayerSupervisionRequestApprovalDeleteOne {
	builder := c.Delete().Where(playersupervisionrequestapproval.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PlayerSupervisionRequestApprovalDeleteOne{builder}
}

// Query returns a query builder for PlayerSupervisionRequestApproval.
func (c *PlayerSupervisionRequestApprovalClient) Query() *PlayerSupervisionRequestApprovalQuery {
	return &PlayerSupervisionRequestApprovalQuery{
		config: c.config,
	}
}

// Get returns a PlayerSupervisionRequestApproval entity by its id.
func (c *PlayerSupervisionRequestApprovalClient) Get(ctx context.Context, id uuid.UUID) (*PlayerSupervisionRequestApproval, error) {
	return c.Query().Where(playersupervisionrequestapproval.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PlayerSupervisionRequestApprovalClient) GetX(ctx context.Context, id uuid.UUID) *PlayerSupervisionRequestApproval {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryApprover queries the approver edge of a PlayerSupervisionRequestApproval.
func (c *PlayerSupervisionRequestApprovalClient) QueryApprover(psra *PlayerSupervisionRequestApproval) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := psra.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(playersupervisionrequestapproval.Table, playersupervisionrequestapproval.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, playersupervisionrequestapproval.ApproverTable, playersupervisionrequestapproval.ApproverColumn),
		)
		fromV = sqlgraph.Neighbors(psra.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySupervisionRequest queries the supervision_request edge of a PlayerSupervisionRequestApproval.
func (c *PlayerSupervisionRequestApprovalClient) QuerySupervisionRequest(psra *PlayerSupervisionRequestApproval) *PlayerSupervisionRequestQuery {
	query := &PlayerSupervisionRequestQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := psra.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(playersupervisionrequestapproval.Table, playersupervisionrequestapproval.FieldID, id),
			sqlgraph.To(playersupervisionrequest.Table, playersupervisionrequest.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, playersupervisionrequestapproval.SupervisionRequestTable, playersupervisionrequestapproval.SupervisionRequestColumn),
		)
		fromV = sqlgraph.Neighbors(psra.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PlayerSupervisionRequestApprovalClient) Hooks() []Hook {
	return c.hooks.PlayerSupervisionRequestApproval
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPlayers queries the players edge of a User.
func (c *UserClient) QueryPlayers(u *User) *PlayerQuery {
	query := &PlayerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(player.Table, player.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.PlayersTable, user.PlayersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryMainPlayer queries the main_player edge of a User.
func (c *UserClient) QueryMainPlayer(u *User) *PlayerQuery {
	query := &PlayerQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(player.Table, player.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.MainPlayerTable, user.MainPlayerColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySentSupervisionRequests queries the sent_supervision_requests edge of a User.
func (c *UserClient) QuerySentSupervisionRequests(u *User) *PlayerSupervisionRequestQuery {
	query := &PlayerSupervisionRequestQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(playersupervisionrequest.Table, playersupervisionrequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SentSupervisionRequestsTable, user.SentSupervisionRequestsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySupervisionRequestApprovals queries the supervision_request_approvals edge of a User.
func (c *UserClient) QuerySupervisionRequestApprovals(u *User) *PlayerSupervisionRequestApprovalQuery {
	query := &PlayerSupervisionRequestApprovalQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(playersupervisionrequestapproval.Table, playersupervisionrequestapproval.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SupervisionRequestApprovalsTable, user.SupervisionRequestApprovalsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
