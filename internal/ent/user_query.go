// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-boardgame-stats/backend/internal/ent/game"
	"github.com/open-boardgame-stats/backend/internal/ent/gamefavorite"
	"github.com/open-boardgame-stats/backend/internal/ent/groupmembership"
	"github.com/open-boardgame-stats/backend/internal/ent/groupmembershipapplication"
	"github.com/open-boardgame-stats/backend/internal/ent/player"
	"github.com/open-boardgame-stats/backend/internal/ent/playersupervisionrequest"
	"github.com/open-boardgame-stats/backend/internal/ent/playersupervisionrequestapproval"
	"github.com/open-boardgame-stats/backend/internal/ent/predicate"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
	"github.com/open-boardgame-stats/backend/internal/ent/user"
)

// UserQuery is the builder for querying User entities.
type UserQuery struct {
	config
	ctx                                  *QueryContext
	order                                []OrderFunc
	inters                               []Interceptor
	predicates                           []predicate.User
	withPlayers                          *PlayerQuery
	withMainPlayer                       *PlayerQuery
	withSentSupervisionRequests          *PlayerSupervisionRequestQuery
	withSupervisionRequestApprovals      *PlayerSupervisionRequestApprovalQuery
	withGroupMemberships                 *GroupMembershipQuery
	withGroupMembershipApplications      *GroupMembershipApplicationQuery
	withGames                            *GameQuery
	withFavoriteGames                    *GameFavoriteQuery
	modifiers                            []func(*sql.Selector)
	loadTotal                            []func(context.Context, []*User) error
	withNamedPlayers                     map[string]*PlayerQuery
	withNamedSentSupervisionRequests     map[string]*PlayerSupervisionRequestQuery
	withNamedSupervisionRequestApprovals map[string]*PlayerSupervisionRequestApprovalQuery
	withNamedGroupMemberships            map[string]*GroupMembershipQuery
	withNamedGroupMembershipApplications map[string]*GroupMembershipApplicationQuery
	withNamedGames                       map[string]*GameQuery
	withNamedFavoriteGames               map[string]*GameFavoriteQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserQuery builder.
func (uq *UserQuery) Where(ps ...predicate.User) *UserQuery {
	uq.predicates = append(uq.predicates, ps...)
	return uq
}

// Limit the number of records to be returned by this query.
func (uq *UserQuery) Limit(limit int) *UserQuery {
	uq.ctx.Limit = &limit
	return uq
}

// Offset to start from.
func (uq *UserQuery) Offset(offset int) *UserQuery {
	uq.ctx.Offset = &offset
	return uq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (uq *UserQuery) Unique(unique bool) *UserQuery {
	uq.ctx.Unique = &unique
	return uq
}

// Order specifies how the records should be ordered.
func (uq *UserQuery) Order(o ...OrderFunc) *UserQuery {
	uq.order = append(uq.order, o...)
	return uq
}

// QueryPlayers chains the current query on the "players" edge.
func (uq *UserQuery) QueryPlayers() *PlayerQuery {
	query := (&PlayerClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(player.Table, player.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.PlayersTable, user.PlayersPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMainPlayer chains the current query on the "main_player" edge.
func (uq *UserQuery) QueryMainPlayer() *PlayerQuery {
	query := (&PlayerClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(player.Table, player.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.MainPlayerTable, user.MainPlayerColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySentSupervisionRequests chains the current query on the "sent_supervision_requests" edge.
func (uq *UserQuery) QuerySentSupervisionRequests() *PlayerSupervisionRequestQuery {
	query := (&PlayerSupervisionRequestClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(playersupervisionrequest.Table, playersupervisionrequest.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SentSupervisionRequestsTable, user.SentSupervisionRequestsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySupervisionRequestApprovals chains the current query on the "supervision_request_approvals" edge.
func (uq *UserQuery) QuerySupervisionRequestApprovals() *PlayerSupervisionRequestApprovalQuery {
	query := (&PlayerSupervisionRequestApprovalClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(playersupervisionrequestapproval.Table, playersupervisionrequestapproval.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SupervisionRequestApprovalsTable, user.SupervisionRequestApprovalsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGroupMemberships chains the current query on the "group_memberships" edge.
func (uq *UserQuery) QueryGroupMemberships() *GroupMembershipQuery {
	query := (&GroupMembershipClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(groupmembership.Table, groupmembership.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.GroupMembershipsTable, user.GroupMembershipsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGroupMembershipApplications chains the current query on the "group_membership_applications" edge.
func (uq *UserQuery) QueryGroupMembershipApplications() *GroupMembershipApplicationQuery {
	query := (&GroupMembershipApplicationClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(groupmembershipapplication.Table, groupmembershipapplication.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.GroupMembershipApplicationsTable, user.GroupMembershipApplicationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGames chains the current query on the "games" edge.
func (uq *UserQuery) QueryGames() *GameQuery {
	query := (&GameClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(game.Table, game.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.GamesTable, user.GamesColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFavoriteGames chains the current query on the "favorite_games" edge.
func (uq *UserQuery) QueryFavoriteGames() *GameFavoriteQuery {
	query := (&GameFavoriteClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(gamefavorite.Table, gamefavorite.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.FavoriteGamesTable, user.FavoriteGamesColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first User entity from the query.
// Returns a *NotFoundError when no User was found.
func (uq *UserQuery) First(ctx context.Context) (*User, error) {
	nodes, err := uq.Limit(1).All(setContextOp(ctx, uq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{user.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (uq *UserQuery) FirstX(ctx context.Context) *User {
	node, err := uq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first User ID from the query.
// Returns a *NotFoundError when no User ID was found.
func (uq *UserQuery) FirstID(ctx context.Context) (id guidgql.GUID, err error) {
	var ids []guidgql.GUID
	if ids, err = uq.Limit(1).IDs(setContextOp(ctx, uq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{user.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (uq *UserQuery) FirstIDX(ctx context.Context) guidgql.GUID {
	id, err := uq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single User entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one User entity is found.
// Returns a *NotFoundError when no User entities are found.
func (uq *UserQuery) Only(ctx context.Context) (*User, error) {
	nodes, err := uq.Limit(2).All(setContextOp(ctx, uq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{user.Label}
	default:
		return nil, &NotSingularError{user.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (uq *UserQuery) OnlyX(ctx context.Context) *User {
	node, err := uq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only User ID in the query.
// Returns a *NotSingularError when more than one User ID is found.
// Returns a *NotFoundError when no entities are found.
func (uq *UserQuery) OnlyID(ctx context.Context) (id guidgql.GUID, err error) {
	var ids []guidgql.GUID
	if ids, err = uq.Limit(2).IDs(setContextOp(ctx, uq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{user.Label}
	default:
		err = &NotSingularError{user.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (uq *UserQuery) OnlyIDX(ctx context.Context) guidgql.GUID {
	id, err := uq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Users.
func (uq *UserQuery) All(ctx context.Context) ([]*User, error) {
	ctx = setContextOp(ctx, uq.ctx, "All")
	if err := uq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*User, *UserQuery]()
	return withInterceptors[[]*User](ctx, uq, qr, uq.inters)
}

// AllX is like All, but panics if an error occurs.
func (uq *UserQuery) AllX(ctx context.Context) []*User {
	nodes, err := uq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of User IDs.
func (uq *UserQuery) IDs(ctx context.Context) (ids []guidgql.GUID, err error) {
	if uq.ctx.Unique == nil && uq.path != nil {
		uq.Unique(true)
	}
	ctx = setContextOp(ctx, uq.ctx, "IDs")
	if err = uq.Select(user.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (uq *UserQuery) IDsX(ctx context.Context) []guidgql.GUID {
	ids, err := uq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (uq *UserQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, uq.ctx, "Count")
	if err := uq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, uq, querierCount[*UserQuery](), uq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (uq *UserQuery) CountX(ctx context.Context) int {
	count, err := uq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (uq *UserQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, uq.ctx, "Exist")
	switch _, err := uq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (uq *UserQuery) ExistX(ctx context.Context) bool {
	exist, err := uq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (uq *UserQuery) Clone() *UserQuery {
	if uq == nil {
		return nil
	}
	return &UserQuery{
		config:                          uq.config,
		ctx:                             uq.ctx.Clone(),
		order:                           append([]OrderFunc{}, uq.order...),
		inters:                          append([]Interceptor{}, uq.inters...),
		predicates:                      append([]predicate.User{}, uq.predicates...),
		withPlayers:                     uq.withPlayers.Clone(),
		withMainPlayer:                  uq.withMainPlayer.Clone(),
		withSentSupervisionRequests:     uq.withSentSupervisionRequests.Clone(),
		withSupervisionRequestApprovals: uq.withSupervisionRequestApprovals.Clone(),
		withGroupMemberships:            uq.withGroupMemberships.Clone(),
		withGroupMembershipApplications: uq.withGroupMembershipApplications.Clone(),
		withGames:                       uq.withGames.Clone(),
		withFavoriteGames:               uq.withFavoriteGames.Clone(),
		// clone intermediate query.
		sql:  uq.sql.Clone(),
		path: uq.path,
	}
}

// WithPlayers tells the query-builder to eager-load the nodes that are connected to
// the "players" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithPlayers(opts ...func(*PlayerQuery)) *UserQuery {
	query := (&PlayerClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withPlayers = query
	return uq
}

// WithMainPlayer tells the query-builder to eager-load the nodes that are connected to
// the "main_player" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithMainPlayer(opts ...func(*PlayerQuery)) *UserQuery {
	query := (&PlayerClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withMainPlayer = query
	return uq
}

// WithSentSupervisionRequests tells the query-builder to eager-load the nodes that are connected to
// the "sent_supervision_requests" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithSentSupervisionRequests(opts ...func(*PlayerSupervisionRequestQuery)) *UserQuery {
	query := (&PlayerSupervisionRequestClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withSentSupervisionRequests = query
	return uq
}

// WithSupervisionRequestApprovals tells the query-builder to eager-load the nodes that are connected to
// the "supervision_request_approvals" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithSupervisionRequestApprovals(opts ...func(*PlayerSupervisionRequestApprovalQuery)) *UserQuery {
	query := (&PlayerSupervisionRequestApprovalClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withSupervisionRequestApprovals = query
	return uq
}

// WithGroupMemberships tells the query-builder to eager-load the nodes that are connected to
// the "group_memberships" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithGroupMemberships(opts ...func(*GroupMembershipQuery)) *UserQuery {
	query := (&GroupMembershipClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withGroupMemberships = query
	return uq
}

// WithGroupMembershipApplications tells the query-builder to eager-load the nodes that are connected to
// the "group_membership_applications" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithGroupMembershipApplications(opts ...func(*GroupMembershipApplicationQuery)) *UserQuery {
	query := (&GroupMembershipApplicationClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withGroupMembershipApplications = query
	return uq
}

// WithGames tells the query-builder to eager-load the nodes that are connected to
// the "games" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithGames(opts ...func(*GameQuery)) *UserQuery {
	query := (&GameClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withGames = query
	return uq
}

// WithFavoriteGames tells the query-builder to eager-load the nodes that are connected to
// the "favorite_games" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithFavoriteGames(opts ...func(*GameFavoriteQuery)) *UserQuery {
	query := (&GameFavoriteClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withFavoriteGames = query
	return uq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.User.Query().
//		GroupBy(user.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (uq *UserQuery) GroupBy(field string, fields ...string) *UserGroupBy {
	uq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserGroupBy{build: uq}
	grbuild.flds = &uq.ctx.Fields
	grbuild.label = user.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.User.Query().
//		Select(user.FieldName).
//		Scan(ctx, &v)
func (uq *UserQuery) Select(fields ...string) *UserSelect {
	uq.ctx.Fields = append(uq.ctx.Fields, fields...)
	sbuild := &UserSelect{UserQuery: uq}
	sbuild.label = user.Label
	sbuild.flds, sbuild.scan = &uq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserSelect configured with the given aggregations.
func (uq *UserQuery) Aggregate(fns ...AggregateFunc) *UserSelect {
	return uq.Select().Aggregate(fns...)
}

func (uq *UserQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range uq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, uq); err != nil {
				return err
			}
		}
	}
	for _, f := range uq.ctx.Fields {
		if !user.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if uq.path != nil {
		prev, err := uq.path(ctx)
		if err != nil {
			return err
		}
		uq.sql = prev
	}
	return nil
}

func (uq *UserQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*User, error) {
	var (
		nodes       = []*User{}
		_spec       = uq.querySpec()
		loadedTypes = [8]bool{
			uq.withPlayers != nil,
			uq.withMainPlayer != nil,
			uq.withSentSupervisionRequests != nil,
			uq.withSupervisionRequestApprovals != nil,
			uq.withGroupMemberships != nil,
			uq.withGroupMembershipApplications != nil,
			uq.withGames != nil,
			uq.withFavoriteGames != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*User).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &User{config: uq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(uq.modifiers) > 0 {
		_spec.Modifiers = uq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, uq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := uq.withPlayers; query != nil {
		if err := uq.loadPlayers(ctx, query, nodes,
			func(n *User) { n.Edges.Players = []*Player{} },
			func(n *User, e *Player) { n.Edges.Players = append(n.Edges.Players, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withMainPlayer; query != nil {
		if err := uq.loadMainPlayer(ctx, query, nodes, nil,
			func(n *User, e *Player) { n.Edges.MainPlayer = e }); err != nil {
			return nil, err
		}
	}
	if query := uq.withSentSupervisionRequests; query != nil {
		if err := uq.loadSentSupervisionRequests(ctx, query, nodes,
			func(n *User) { n.Edges.SentSupervisionRequests = []*PlayerSupervisionRequest{} },
			func(n *User, e *PlayerSupervisionRequest) {
				n.Edges.SentSupervisionRequests = append(n.Edges.SentSupervisionRequests, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := uq.withSupervisionRequestApprovals; query != nil {
		if err := uq.loadSupervisionRequestApprovals(ctx, query, nodes,
			func(n *User) { n.Edges.SupervisionRequestApprovals = []*PlayerSupervisionRequestApproval{} },
			func(n *User, e *PlayerSupervisionRequestApproval) {
				n.Edges.SupervisionRequestApprovals = append(n.Edges.SupervisionRequestApprovals, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := uq.withGroupMemberships; query != nil {
		if err := uq.loadGroupMemberships(ctx, query, nodes,
			func(n *User) { n.Edges.GroupMemberships = []*GroupMembership{} },
			func(n *User, e *GroupMembership) { n.Edges.GroupMemberships = append(n.Edges.GroupMemberships, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withGroupMembershipApplications; query != nil {
		if err := uq.loadGroupMembershipApplications(ctx, query, nodes,
			func(n *User) { n.Edges.GroupMembershipApplications = []*GroupMembershipApplication{} },
			func(n *User, e *GroupMembershipApplication) {
				n.Edges.GroupMembershipApplications = append(n.Edges.GroupMembershipApplications, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := uq.withGames; query != nil {
		if err := uq.loadGames(ctx, query, nodes,
			func(n *User) { n.Edges.Games = []*Game{} },
			func(n *User, e *Game) { n.Edges.Games = append(n.Edges.Games, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withFavoriteGames; query != nil {
		if err := uq.loadFavoriteGames(ctx, query, nodes,
			func(n *User) { n.Edges.FavoriteGames = []*GameFavorite{} },
			func(n *User, e *GameFavorite) { n.Edges.FavoriteGames = append(n.Edges.FavoriteGames, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedPlayers {
		if err := uq.loadPlayers(ctx, query, nodes,
			func(n *User) { n.appendNamedPlayers(name) },
			func(n *User, e *Player) { n.appendNamedPlayers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedSentSupervisionRequests {
		if err := uq.loadSentSupervisionRequests(ctx, query, nodes,
			func(n *User) { n.appendNamedSentSupervisionRequests(name) },
			func(n *User, e *PlayerSupervisionRequest) { n.appendNamedSentSupervisionRequests(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedSupervisionRequestApprovals {
		if err := uq.loadSupervisionRequestApprovals(ctx, query, nodes,
			func(n *User) { n.appendNamedSupervisionRequestApprovals(name) },
			func(n *User, e *PlayerSupervisionRequestApproval) { n.appendNamedSupervisionRequestApprovals(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedGroupMemberships {
		if err := uq.loadGroupMemberships(ctx, query, nodes,
			func(n *User) { n.appendNamedGroupMemberships(name) },
			func(n *User, e *GroupMembership) { n.appendNamedGroupMemberships(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedGroupMembershipApplications {
		if err := uq.loadGroupMembershipApplications(ctx, query, nodes,
			func(n *User) { n.appendNamedGroupMembershipApplications(name) },
			func(n *User, e *GroupMembershipApplication) { n.appendNamedGroupMembershipApplications(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedGames {
		if err := uq.loadGames(ctx, query, nodes,
			func(n *User) { n.appendNamedGames(name) },
			func(n *User, e *Game) { n.appendNamedGames(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range uq.withNamedFavoriteGames {
		if err := uq.loadFavoriteGames(ctx, query, nodes,
			func(n *User) { n.appendNamedFavoriteGames(name) },
			func(n *User, e *GameFavorite) { n.appendNamedFavoriteGames(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range uq.loadTotal {
		if err := uq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (uq *UserQuery) loadPlayers(ctx context.Context, query *PlayerQuery, nodes []*User, init func(*User), assign func(*User, *Player)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[guidgql.GUID]*User)
	nids := make(map[guidgql.GUID]map[*User]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(user.PlayersTable)
		s.Join(joinT).On(s.C(player.FieldID), joinT.C(user.PlayersPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(user.PlayersPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(user.PlayersPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(guidgql.GUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*guidgql.GUID)
				inValue := *values[1].(*guidgql.GUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*User]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Player](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "players" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (uq *UserQuery) loadMainPlayer(ctx context.Context, query *PlayerQuery, nodes []*User, init func(*User), assign func(*User, *Player)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[guidgql.GUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Player(func(s *sql.Selector) {
		s.Where(sql.InValues(user.MainPlayerColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_main_player
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_main_player" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_main_player" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadSentSupervisionRequests(ctx context.Context, query *PlayerSupervisionRequestQuery, nodes []*User, init func(*User), assign func(*User, *PlayerSupervisionRequest)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[guidgql.GUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PlayerSupervisionRequest(func(s *sql.Selector) {
		s.Where(sql.InValues(user.SentSupervisionRequestsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_sent_supervision_requests
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_sent_supervision_requests" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_sent_supervision_requests" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadSupervisionRequestApprovals(ctx context.Context, query *PlayerSupervisionRequestApprovalQuery, nodes []*User, init func(*User), assign func(*User, *PlayerSupervisionRequestApproval)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[guidgql.GUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PlayerSupervisionRequestApproval(func(s *sql.Selector) {
		s.Where(sql.InValues(user.SupervisionRequestApprovalsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_supervision_request_approvals
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_supervision_request_approvals" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_supervision_request_approvals" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadGroupMemberships(ctx context.Context, query *GroupMembershipQuery, nodes []*User, init func(*User), assign func(*User, *GroupMembership)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[guidgql.GUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.GroupMembership(func(s *sql.Selector) {
		s.Where(sql.InValues(user.GroupMembershipsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_group_memberships
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_group_memberships" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_group_memberships" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadGroupMembershipApplications(ctx context.Context, query *GroupMembershipApplicationQuery, nodes []*User, init func(*User), assign func(*User, *GroupMembershipApplication)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[guidgql.GUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.GroupMembershipApplication(func(s *sql.Selector) {
		s.Where(sql.InValues(user.GroupMembershipApplicationsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_group_membership_applications
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_group_membership_applications" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_group_membership_applications" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadGames(ctx context.Context, query *GameQuery, nodes []*User, init func(*User), assign func(*User, *Game)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[guidgql.GUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Game(func(s *sql.Selector) {
		s.Where(sql.InValues(user.GamesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_games
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_games" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_games" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadFavoriteGames(ctx context.Context, query *GameFavoriteQuery, nodes []*User, init func(*User), assign func(*User, *GameFavorite)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[guidgql.GUID]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.GameFavorite(func(s *sql.Selector) {
		s.Where(sql.InValues(user.FavoriteGamesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_favorite_games
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_favorite_games" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_favorite_games" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (uq *UserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := uq.querySpec()
	if len(uq.modifiers) > 0 {
		_spec.Modifiers = uq.modifiers
	}
	_spec.Node.Columns = uq.ctx.Fields
	if len(uq.ctx.Fields) > 0 {
		_spec.Unique = uq.ctx.Unique != nil && *uq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, uq.driver, _spec)
}

func (uq *UserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	_spec.From = uq.sql
	if unique := uq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if uq.path != nil {
		_spec.Unique = true
	}
	if fields := uq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for i := range fields {
			if fields[i] != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := uq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := uq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := uq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := uq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (uq *UserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(uq.driver.Dialect())
	t1 := builder.Table(user.Table)
	columns := uq.ctx.Fields
	if len(columns) == 0 {
		columns = user.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if uq.sql != nil {
		selector = uq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if uq.ctx.Unique != nil && *uq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range uq.predicates {
		p(selector)
	}
	for _, p := range uq.order {
		p(selector)
	}
	if offset := uq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := uq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedPlayers tells the query-builder to eager-load the nodes that are connected to the "players"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedPlayers(name string, opts ...func(*PlayerQuery)) *UserQuery {
	query := (&PlayerClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedPlayers == nil {
		uq.withNamedPlayers = make(map[string]*PlayerQuery)
	}
	uq.withNamedPlayers[name] = query
	return uq
}

// WithNamedSentSupervisionRequests tells the query-builder to eager-load the nodes that are connected to the "sent_supervision_requests"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedSentSupervisionRequests(name string, opts ...func(*PlayerSupervisionRequestQuery)) *UserQuery {
	query := (&PlayerSupervisionRequestClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedSentSupervisionRequests == nil {
		uq.withNamedSentSupervisionRequests = make(map[string]*PlayerSupervisionRequestQuery)
	}
	uq.withNamedSentSupervisionRequests[name] = query
	return uq
}

// WithNamedSupervisionRequestApprovals tells the query-builder to eager-load the nodes that are connected to the "supervision_request_approvals"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedSupervisionRequestApprovals(name string, opts ...func(*PlayerSupervisionRequestApprovalQuery)) *UserQuery {
	query := (&PlayerSupervisionRequestApprovalClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedSupervisionRequestApprovals == nil {
		uq.withNamedSupervisionRequestApprovals = make(map[string]*PlayerSupervisionRequestApprovalQuery)
	}
	uq.withNamedSupervisionRequestApprovals[name] = query
	return uq
}

// WithNamedGroupMemberships tells the query-builder to eager-load the nodes that are connected to the "group_memberships"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedGroupMemberships(name string, opts ...func(*GroupMembershipQuery)) *UserQuery {
	query := (&GroupMembershipClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedGroupMemberships == nil {
		uq.withNamedGroupMemberships = make(map[string]*GroupMembershipQuery)
	}
	uq.withNamedGroupMemberships[name] = query
	return uq
}

// WithNamedGroupMembershipApplications tells the query-builder to eager-load the nodes that are connected to the "group_membership_applications"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedGroupMembershipApplications(name string, opts ...func(*GroupMembershipApplicationQuery)) *UserQuery {
	query := (&GroupMembershipApplicationClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedGroupMembershipApplications == nil {
		uq.withNamedGroupMembershipApplications = make(map[string]*GroupMembershipApplicationQuery)
	}
	uq.withNamedGroupMembershipApplications[name] = query
	return uq
}

// WithNamedGames tells the query-builder to eager-load the nodes that are connected to the "games"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedGames(name string, opts ...func(*GameQuery)) *UserQuery {
	query := (&GameClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedGames == nil {
		uq.withNamedGames = make(map[string]*GameQuery)
	}
	uq.withNamedGames[name] = query
	return uq
}

// WithNamedFavoriteGames tells the query-builder to eager-load the nodes that are connected to the "favorite_games"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNamedFavoriteGames(name string, opts ...func(*GameFavoriteQuery)) *UserQuery {
	query := (&GameFavoriteClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if uq.withNamedFavoriteGames == nil {
		uq.withNamedFavoriteGames = make(map[string]*GameFavoriteQuery)
	}
	uq.withNamedFavoriteGames[name] = query
	return uq
}

// UserGroupBy is the group-by builder for User entities.
type UserGroupBy struct {
	selector
	build *UserQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ugb *UserGroupBy) Aggregate(fns ...AggregateFunc) *UserGroupBy {
	ugb.fns = append(ugb.fns, fns...)
	return ugb
}

// Scan applies the selector query and scans the result into the given value.
func (ugb *UserGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ugb.build.ctx, "GroupBy")
	if err := ugb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserQuery, *UserGroupBy](ctx, ugb.build, ugb, ugb.build.inters, v)
}

func (ugb *UserGroupBy) sqlScan(ctx context.Context, root *UserQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ugb.fns))
	for _, fn := range ugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ugb.flds)+len(ugb.fns))
		for _, f := range *ugb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ugb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ugb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserSelect is the builder for selecting fields of User entities.
type UserSelect struct {
	*UserQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (us *UserSelect) Aggregate(fns ...AggregateFunc) *UserSelect {
	us.fns = append(us.fns, fns...)
	return us
}

// Scan applies the selector query and scans the result into the given value.
func (us *UserSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, us.ctx, "Select")
	if err := us.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserQuery, *UserSelect](ctx, us.UserQuery, us, us.inters, v)
}

func (us *UserSelect) sqlScan(ctx context.Context, root *UserQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(us.fns))
	for _, fn := range us.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*us.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := us.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
