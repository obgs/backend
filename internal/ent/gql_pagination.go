// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"strconv"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/open-boardgame-stats/backend/internal/ent/enumstat"
	"github.com/open-boardgame-stats/backend/internal/ent/enumstatdescription"
	"github.com/open-boardgame-stats/backend/internal/ent/game"
	"github.com/open-boardgame-stats/backend/internal/ent/group"
	"github.com/open-boardgame-stats/backend/internal/ent/groupmembership"
	"github.com/open-boardgame-stats/backend/internal/ent/groupmembershipapplication"
	"github.com/open-boardgame-stats/backend/internal/ent/groupsettings"
	"github.com/open-boardgame-stats/backend/internal/ent/match"
	"github.com/open-boardgame-stats/backend/internal/ent/numericalstat"
	"github.com/open-boardgame-stats/backend/internal/ent/numericalstatdescription"
	"github.com/open-boardgame-stats/backend/internal/ent/player"
	"github.com/open-boardgame-stats/backend/internal/ent/playersupervisionrequest"
	"github.com/open-boardgame-stats/backend/internal/ent/playersupervisionrequestapproval"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
	"github.com/open-boardgame-stats/backend/internal/ent/user"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", val)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    guidgql.GUID `msgpack:"i"`
	Value Value        `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// EnumStatEdge is the edge representation of EnumStat.
type EnumStatEdge struct {
	Node   *EnumStat `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// EnumStatConnection is the connection containing edges to EnumStat.
type EnumStatConnection struct {
	Edges      []*EnumStatEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *EnumStatConnection) build(nodes []*EnumStat, pager *enumstatPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *EnumStat
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *EnumStat {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *EnumStat {
			return nodes[i]
		}
	}
	c.Edges = make([]*EnumStatEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &EnumStatEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// EnumStatPaginateOption enables pagination customization.
type EnumStatPaginateOption func(*enumstatPager) error

// WithEnumStatOrder configures pagination ordering.
func WithEnumStatOrder(order *EnumStatOrder) EnumStatPaginateOption {
	if order == nil {
		order = DefaultEnumStatOrder
	}
	o := *order
	return func(pager *enumstatPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultEnumStatOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithEnumStatFilter configures pagination filter.
func WithEnumStatFilter(filter func(*EnumStatQuery) (*EnumStatQuery, error)) EnumStatPaginateOption {
	return func(pager *enumstatPager) error {
		if filter == nil {
			return errors.New("EnumStatQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type enumstatPager struct {
	order  *EnumStatOrder
	filter func(*EnumStatQuery) (*EnumStatQuery, error)
}

func newEnumStatPager(opts []EnumStatPaginateOption) (*enumstatPager, error) {
	pager := &enumstatPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultEnumStatOrder
	}
	return pager, nil
}

func (p *enumstatPager) applyFilter(query *EnumStatQuery) (*EnumStatQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *enumstatPager) toCursor(es *EnumStat) Cursor {
	return p.order.Field.toCursor(es)
}

func (p *enumstatPager) applyCursors(query *EnumStatQuery, after, before *Cursor) *EnumStatQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultEnumStatOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *enumstatPager) applyOrder(query *EnumStatQuery, reverse bool) *EnumStatQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultEnumStatOrder.Field {
		query = query.Order(direction.orderFunc(DefaultEnumStatOrder.Field.field))
	}
	return query
}

func (p *enumstatPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultEnumStatOrder.Field {
			b.Comma().Ident(DefaultEnumStatOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to EnumStat.
func (es *EnumStatQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...EnumStatPaginateOption,
) (*EnumStatConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newEnumStatPager(opts)
	if err != nil {
		return nil, err
	}
	if es, err = pager.applyFilter(es); err != nil {
		return nil, err
	}
	conn := &EnumStatConnection{Edges: []*EnumStatEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = es.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	es = pager.applyCursors(es, after, before)
	es = pager.applyOrder(es, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		es.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := es.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := es.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// EnumStatOrderField defines the ordering field of EnumStat.
type EnumStatOrderField struct {
	field    string
	toCursor func(*EnumStat) Cursor
}

// EnumStatOrder defines the ordering of EnumStat.
type EnumStatOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *EnumStatOrderField `json:"field"`
}

// DefaultEnumStatOrder is the default ordering of EnumStat.
var DefaultEnumStatOrder = &EnumStatOrder{
	Direction: OrderDirectionAsc,
	Field: &EnumStatOrderField{
		field: enumstat.FieldID,
		toCursor: func(es *EnumStat) Cursor {
			return Cursor{ID: es.ID}
		},
	},
}

// ToEdge converts EnumStat into EnumStatEdge.
func (es *EnumStat) ToEdge(order *EnumStatOrder) *EnumStatEdge {
	if order == nil {
		order = DefaultEnumStatOrder
	}
	return &EnumStatEdge{
		Node:   es,
		Cursor: order.Field.toCursor(es),
	}
}

// EnumStatDescriptionEdge is the edge representation of EnumStatDescription.
type EnumStatDescriptionEdge struct {
	Node   *EnumStatDescription `json:"node"`
	Cursor Cursor               `json:"cursor"`
}

// EnumStatDescriptionConnection is the connection containing edges to EnumStatDescription.
type EnumStatDescriptionConnection struct {
	Edges      []*EnumStatDescriptionEdge `json:"edges"`
	PageInfo   PageInfo                   `json:"pageInfo"`
	TotalCount int                        `json:"totalCount"`
}

func (c *EnumStatDescriptionConnection) build(nodes []*EnumStatDescription, pager *enumstatdescriptionPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *EnumStatDescription
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *EnumStatDescription {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *EnumStatDescription {
			return nodes[i]
		}
	}
	c.Edges = make([]*EnumStatDescriptionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &EnumStatDescriptionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// EnumStatDescriptionPaginateOption enables pagination customization.
type EnumStatDescriptionPaginateOption func(*enumstatdescriptionPager) error

// WithEnumStatDescriptionOrder configures pagination ordering.
func WithEnumStatDescriptionOrder(order *EnumStatDescriptionOrder) EnumStatDescriptionPaginateOption {
	if order == nil {
		order = DefaultEnumStatDescriptionOrder
	}
	o := *order
	return func(pager *enumstatdescriptionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultEnumStatDescriptionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithEnumStatDescriptionFilter configures pagination filter.
func WithEnumStatDescriptionFilter(filter func(*EnumStatDescriptionQuery) (*EnumStatDescriptionQuery, error)) EnumStatDescriptionPaginateOption {
	return func(pager *enumstatdescriptionPager) error {
		if filter == nil {
			return errors.New("EnumStatDescriptionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type enumstatdescriptionPager struct {
	order  *EnumStatDescriptionOrder
	filter func(*EnumStatDescriptionQuery) (*EnumStatDescriptionQuery, error)
}

func newEnumStatDescriptionPager(opts []EnumStatDescriptionPaginateOption) (*enumstatdescriptionPager, error) {
	pager := &enumstatdescriptionPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultEnumStatDescriptionOrder
	}
	return pager, nil
}

func (p *enumstatdescriptionPager) applyFilter(query *EnumStatDescriptionQuery) (*EnumStatDescriptionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *enumstatdescriptionPager) toCursor(esd *EnumStatDescription) Cursor {
	return p.order.Field.toCursor(esd)
}

func (p *enumstatdescriptionPager) applyCursors(query *EnumStatDescriptionQuery, after, before *Cursor) *EnumStatDescriptionQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultEnumStatDescriptionOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *enumstatdescriptionPager) applyOrder(query *EnumStatDescriptionQuery, reverse bool) *EnumStatDescriptionQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultEnumStatDescriptionOrder.Field {
		query = query.Order(direction.orderFunc(DefaultEnumStatDescriptionOrder.Field.field))
	}
	return query
}

func (p *enumstatdescriptionPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultEnumStatDescriptionOrder.Field {
			b.Comma().Ident(DefaultEnumStatDescriptionOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to EnumStatDescription.
func (esd *EnumStatDescriptionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...EnumStatDescriptionPaginateOption,
) (*EnumStatDescriptionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newEnumStatDescriptionPager(opts)
	if err != nil {
		return nil, err
	}
	if esd, err = pager.applyFilter(esd); err != nil {
		return nil, err
	}
	conn := &EnumStatDescriptionConnection{Edges: []*EnumStatDescriptionEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = esd.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	esd = pager.applyCursors(esd, after, before)
	esd = pager.applyOrder(esd, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		esd.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := esd.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := esd.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// EnumStatDescriptionOrderField defines the ordering field of EnumStatDescription.
type EnumStatDescriptionOrderField struct {
	field    string
	toCursor func(*EnumStatDescription) Cursor
}

// EnumStatDescriptionOrder defines the ordering of EnumStatDescription.
type EnumStatDescriptionOrder struct {
	Direction OrderDirection                 `json:"direction"`
	Field     *EnumStatDescriptionOrderField `json:"field"`
}

// DefaultEnumStatDescriptionOrder is the default ordering of EnumStatDescription.
var DefaultEnumStatDescriptionOrder = &EnumStatDescriptionOrder{
	Direction: OrderDirectionAsc,
	Field: &EnumStatDescriptionOrderField{
		field: enumstatdescription.FieldID,
		toCursor: func(esd *EnumStatDescription) Cursor {
			return Cursor{ID: esd.ID}
		},
	},
}

// ToEdge converts EnumStatDescription into EnumStatDescriptionEdge.
func (esd *EnumStatDescription) ToEdge(order *EnumStatDescriptionOrder) *EnumStatDescriptionEdge {
	if order == nil {
		order = DefaultEnumStatDescriptionOrder
	}
	return &EnumStatDescriptionEdge{
		Node:   esd,
		Cursor: order.Field.toCursor(esd),
	}
}

// GameEdge is the edge representation of Game.
type GameEdge struct {
	Node   *Game  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// GameConnection is the connection containing edges to Game.
type GameConnection struct {
	Edges      []*GameEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *GameConnection) build(nodes []*Game, pager *gamePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Game
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Game {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Game {
			return nodes[i]
		}
	}
	c.Edges = make([]*GameEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &GameEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// GamePaginateOption enables pagination customization.
type GamePaginateOption func(*gamePager) error

// WithGameOrder configures pagination ordering.
func WithGameOrder(order *GameOrder) GamePaginateOption {
	if order == nil {
		order = DefaultGameOrder
	}
	o := *order
	return func(pager *gamePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultGameOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithGameFilter configures pagination filter.
func WithGameFilter(filter func(*GameQuery) (*GameQuery, error)) GamePaginateOption {
	return func(pager *gamePager) error {
		if filter == nil {
			return errors.New("GameQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type gamePager struct {
	order  *GameOrder
	filter func(*GameQuery) (*GameQuery, error)
}

func newGamePager(opts []GamePaginateOption) (*gamePager, error) {
	pager := &gamePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultGameOrder
	}
	return pager, nil
}

func (p *gamePager) applyFilter(query *GameQuery) (*GameQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *gamePager) toCursor(ga *Game) Cursor {
	return p.order.Field.toCursor(ga)
}

func (p *gamePager) applyCursors(query *GameQuery, after, before *Cursor) *GameQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultGameOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *gamePager) applyOrder(query *GameQuery, reverse bool) *GameQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultGameOrder.Field {
		query = query.Order(direction.orderFunc(DefaultGameOrder.Field.field))
	}
	return query
}

func (p *gamePager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultGameOrder.Field {
			b.Comma().Ident(DefaultGameOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Game.
func (ga *GameQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...GamePaginateOption,
) (*GameConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newGamePager(opts)
	if err != nil {
		return nil, err
	}
	if ga, err = pager.applyFilter(ga); err != nil {
		return nil, err
	}
	conn := &GameConnection{Edges: []*GameEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = ga.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	ga = pager.applyCursors(ga, after, before)
	ga = pager.applyOrder(ga, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		ga.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ga.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := ga.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// GameOrderField defines the ordering field of Game.
type GameOrderField struct {
	field    string
	toCursor func(*Game) Cursor
}

// GameOrder defines the ordering of Game.
type GameOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *GameOrderField `json:"field"`
}

// DefaultGameOrder is the default ordering of Game.
var DefaultGameOrder = &GameOrder{
	Direction: OrderDirectionAsc,
	Field: &GameOrderField{
		field: game.FieldID,
		toCursor: func(ga *Game) Cursor {
			return Cursor{ID: ga.ID}
		},
	},
}

// ToEdge converts Game into GameEdge.
func (ga *Game) ToEdge(order *GameOrder) *GameEdge {
	if order == nil {
		order = DefaultGameOrder
	}
	return &GameEdge{
		Node:   ga,
		Cursor: order.Field.toCursor(ga),
	}
}

// GroupEdge is the edge representation of Group.
type GroupEdge struct {
	Node   *Group `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// GroupConnection is the connection containing edges to Group.
type GroupConnection struct {
	Edges      []*GroupEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

func (c *GroupConnection) build(nodes []*Group, pager *groupPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Group
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Group {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Group {
			return nodes[i]
		}
	}
	c.Edges = make([]*GroupEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &GroupEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// GroupPaginateOption enables pagination customization.
type GroupPaginateOption func(*groupPager) error

// WithGroupOrder configures pagination ordering.
func WithGroupOrder(order *GroupOrder) GroupPaginateOption {
	if order == nil {
		order = DefaultGroupOrder
	}
	o := *order
	return func(pager *groupPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultGroupOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithGroupFilter configures pagination filter.
func WithGroupFilter(filter func(*GroupQuery) (*GroupQuery, error)) GroupPaginateOption {
	return func(pager *groupPager) error {
		if filter == nil {
			return errors.New("GroupQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type groupPager struct {
	order  *GroupOrder
	filter func(*GroupQuery) (*GroupQuery, error)
}

func newGroupPager(opts []GroupPaginateOption) (*groupPager, error) {
	pager := &groupPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultGroupOrder
	}
	return pager, nil
}

func (p *groupPager) applyFilter(query *GroupQuery) (*GroupQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *groupPager) toCursor(gr *Group) Cursor {
	return p.order.Field.toCursor(gr)
}

func (p *groupPager) applyCursors(query *GroupQuery, after, before *Cursor) *GroupQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultGroupOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *groupPager) applyOrder(query *GroupQuery, reverse bool) *GroupQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultGroupOrder.Field {
		query = query.Order(direction.orderFunc(DefaultGroupOrder.Field.field))
	}
	return query
}

func (p *groupPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultGroupOrder.Field {
			b.Comma().Ident(DefaultGroupOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Group.
func (gr *GroupQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...GroupPaginateOption,
) (*GroupConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newGroupPager(opts)
	if err != nil {
		return nil, err
	}
	if gr, err = pager.applyFilter(gr); err != nil {
		return nil, err
	}
	conn := &GroupConnection{Edges: []*GroupEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = gr.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	gr = pager.applyCursors(gr, after, before)
	gr = pager.applyOrder(gr, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		gr.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := gr.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := gr.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// GroupOrderField defines the ordering field of Group.
type GroupOrderField struct {
	field    string
	toCursor func(*Group) Cursor
}

// GroupOrder defines the ordering of Group.
type GroupOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *GroupOrderField `json:"field"`
}

// DefaultGroupOrder is the default ordering of Group.
var DefaultGroupOrder = &GroupOrder{
	Direction: OrderDirectionAsc,
	Field: &GroupOrderField{
		field: group.FieldID,
		toCursor: func(gr *Group) Cursor {
			return Cursor{ID: gr.ID}
		},
	},
}

// ToEdge converts Group into GroupEdge.
func (gr *Group) ToEdge(order *GroupOrder) *GroupEdge {
	if order == nil {
		order = DefaultGroupOrder
	}
	return &GroupEdge{
		Node:   gr,
		Cursor: order.Field.toCursor(gr),
	}
}

// GroupMembershipEdge is the edge representation of GroupMembership.
type GroupMembershipEdge struct {
	Node   *GroupMembership `json:"node"`
	Cursor Cursor           `json:"cursor"`
}

// GroupMembershipConnection is the connection containing edges to GroupMembership.
type GroupMembershipConnection struct {
	Edges      []*GroupMembershipEdge `json:"edges"`
	PageInfo   PageInfo               `json:"pageInfo"`
	TotalCount int                    `json:"totalCount"`
}

func (c *GroupMembershipConnection) build(nodes []*GroupMembership, pager *groupmembershipPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *GroupMembership
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *GroupMembership {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *GroupMembership {
			return nodes[i]
		}
	}
	c.Edges = make([]*GroupMembershipEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &GroupMembershipEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// GroupMembershipPaginateOption enables pagination customization.
type GroupMembershipPaginateOption func(*groupmembershipPager) error

// WithGroupMembershipOrder configures pagination ordering.
func WithGroupMembershipOrder(order *GroupMembershipOrder) GroupMembershipPaginateOption {
	if order == nil {
		order = DefaultGroupMembershipOrder
	}
	o := *order
	return func(pager *groupmembershipPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultGroupMembershipOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithGroupMembershipFilter configures pagination filter.
func WithGroupMembershipFilter(filter func(*GroupMembershipQuery) (*GroupMembershipQuery, error)) GroupMembershipPaginateOption {
	return func(pager *groupmembershipPager) error {
		if filter == nil {
			return errors.New("GroupMembershipQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type groupmembershipPager struct {
	order  *GroupMembershipOrder
	filter func(*GroupMembershipQuery) (*GroupMembershipQuery, error)
}

func newGroupMembershipPager(opts []GroupMembershipPaginateOption) (*groupmembershipPager, error) {
	pager := &groupmembershipPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultGroupMembershipOrder
	}
	return pager, nil
}

func (p *groupmembershipPager) applyFilter(query *GroupMembershipQuery) (*GroupMembershipQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *groupmembershipPager) toCursor(gm *GroupMembership) Cursor {
	return p.order.Field.toCursor(gm)
}

func (p *groupmembershipPager) applyCursors(query *GroupMembershipQuery, after, before *Cursor) *GroupMembershipQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultGroupMembershipOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *groupmembershipPager) applyOrder(query *GroupMembershipQuery, reverse bool) *GroupMembershipQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultGroupMembershipOrder.Field {
		query = query.Order(direction.orderFunc(DefaultGroupMembershipOrder.Field.field))
	}
	return query
}

func (p *groupmembershipPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultGroupMembershipOrder.Field {
			b.Comma().Ident(DefaultGroupMembershipOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to GroupMembership.
func (gm *GroupMembershipQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...GroupMembershipPaginateOption,
) (*GroupMembershipConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newGroupMembershipPager(opts)
	if err != nil {
		return nil, err
	}
	if gm, err = pager.applyFilter(gm); err != nil {
		return nil, err
	}
	conn := &GroupMembershipConnection{Edges: []*GroupMembershipEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = gm.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	gm = pager.applyCursors(gm, after, before)
	gm = pager.applyOrder(gm, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		gm.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := gm.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := gm.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// GroupMembershipOrderField defines the ordering field of GroupMembership.
type GroupMembershipOrderField struct {
	field    string
	toCursor func(*GroupMembership) Cursor
}

// GroupMembershipOrder defines the ordering of GroupMembership.
type GroupMembershipOrder struct {
	Direction OrderDirection             `json:"direction"`
	Field     *GroupMembershipOrderField `json:"field"`
}

// DefaultGroupMembershipOrder is the default ordering of GroupMembership.
var DefaultGroupMembershipOrder = &GroupMembershipOrder{
	Direction: OrderDirectionAsc,
	Field: &GroupMembershipOrderField{
		field: groupmembership.FieldID,
		toCursor: func(gm *GroupMembership) Cursor {
			return Cursor{ID: gm.ID}
		},
	},
}

// ToEdge converts GroupMembership into GroupMembershipEdge.
func (gm *GroupMembership) ToEdge(order *GroupMembershipOrder) *GroupMembershipEdge {
	if order == nil {
		order = DefaultGroupMembershipOrder
	}
	return &GroupMembershipEdge{
		Node:   gm,
		Cursor: order.Field.toCursor(gm),
	}
}

// GroupMembershipApplicationEdge is the edge representation of GroupMembershipApplication.
type GroupMembershipApplicationEdge struct {
	Node   *GroupMembershipApplication `json:"node"`
	Cursor Cursor                      `json:"cursor"`
}

// GroupMembershipApplicationConnection is the connection containing edges to GroupMembershipApplication.
type GroupMembershipApplicationConnection struct {
	Edges      []*GroupMembershipApplicationEdge `json:"edges"`
	PageInfo   PageInfo                          `json:"pageInfo"`
	TotalCount int                               `json:"totalCount"`
}

func (c *GroupMembershipApplicationConnection) build(nodes []*GroupMembershipApplication, pager *groupmembershipapplicationPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *GroupMembershipApplication
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *GroupMembershipApplication {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *GroupMembershipApplication {
			return nodes[i]
		}
	}
	c.Edges = make([]*GroupMembershipApplicationEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &GroupMembershipApplicationEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// GroupMembershipApplicationPaginateOption enables pagination customization.
type GroupMembershipApplicationPaginateOption func(*groupmembershipapplicationPager) error

// WithGroupMembershipApplicationOrder configures pagination ordering.
func WithGroupMembershipApplicationOrder(order *GroupMembershipApplicationOrder) GroupMembershipApplicationPaginateOption {
	if order == nil {
		order = DefaultGroupMembershipApplicationOrder
	}
	o := *order
	return func(pager *groupmembershipapplicationPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultGroupMembershipApplicationOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithGroupMembershipApplicationFilter configures pagination filter.
func WithGroupMembershipApplicationFilter(filter func(*GroupMembershipApplicationQuery) (*GroupMembershipApplicationQuery, error)) GroupMembershipApplicationPaginateOption {
	return func(pager *groupmembershipapplicationPager) error {
		if filter == nil {
			return errors.New("GroupMembershipApplicationQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type groupmembershipapplicationPager struct {
	order  *GroupMembershipApplicationOrder
	filter func(*GroupMembershipApplicationQuery) (*GroupMembershipApplicationQuery, error)
}

func newGroupMembershipApplicationPager(opts []GroupMembershipApplicationPaginateOption) (*groupmembershipapplicationPager, error) {
	pager := &groupmembershipapplicationPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultGroupMembershipApplicationOrder
	}
	return pager, nil
}

func (p *groupmembershipapplicationPager) applyFilter(query *GroupMembershipApplicationQuery) (*GroupMembershipApplicationQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *groupmembershipapplicationPager) toCursor(gma *GroupMembershipApplication) Cursor {
	return p.order.Field.toCursor(gma)
}

func (p *groupmembershipapplicationPager) applyCursors(query *GroupMembershipApplicationQuery, after, before *Cursor) *GroupMembershipApplicationQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultGroupMembershipApplicationOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *groupmembershipapplicationPager) applyOrder(query *GroupMembershipApplicationQuery, reverse bool) *GroupMembershipApplicationQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultGroupMembershipApplicationOrder.Field {
		query = query.Order(direction.orderFunc(DefaultGroupMembershipApplicationOrder.Field.field))
	}
	return query
}

func (p *groupmembershipapplicationPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultGroupMembershipApplicationOrder.Field {
			b.Comma().Ident(DefaultGroupMembershipApplicationOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to GroupMembershipApplication.
func (gma *GroupMembershipApplicationQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...GroupMembershipApplicationPaginateOption,
) (*GroupMembershipApplicationConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newGroupMembershipApplicationPager(opts)
	if err != nil {
		return nil, err
	}
	if gma, err = pager.applyFilter(gma); err != nil {
		return nil, err
	}
	conn := &GroupMembershipApplicationConnection{Edges: []*GroupMembershipApplicationEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = gma.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	gma = pager.applyCursors(gma, after, before)
	gma = pager.applyOrder(gma, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		gma.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := gma.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := gma.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// GroupMembershipApplicationOrderField defines the ordering field of GroupMembershipApplication.
type GroupMembershipApplicationOrderField struct {
	field    string
	toCursor func(*GroupMembershipApplication) Cursor
}

// GroupMembershipApplicationOrder defines the ordering of GroupMembershipApplication.
type GroupMembershipApplicationOrder struct {
	Direction OrderDirection                        `json:"direction"`
	Field     *GroupMembershipApplicationOrderField `json:"field"`
}

// DefaultGroupMembershipApplicationOrder is the default ordering of GroupMembershipApplication.
var DefaultGroupMembershipApplicationOrder = &GroupMembershipApplicationOrder{
	Direction: OrderDirectionAsc,
	Field: &GroupMembershipApplicationOrderField{
		field: groupmembershipapplication.FieldID,
		toCursor: func(gma *GroupMembershipApplication) Cursor {
			return Cursor{ID: gma.ID}
		},
	},
}

// ToEdge converts GroupMembershipApplication into GroupMembershipApplicationEdge.
func (gma *GroupMembershipApplication) ToEdge(order *GroupMembershipApplicationOrder) *GroupMembershipApplicationEdge {
	if order == nil {
		order = DefaultGroupMembershipApplicationOrder
	}
	return &GroupMembershipApplicationEdge{
		Node:   gma,
		Cursor: order.Field.toCursor(gma),
	}
}

// GroupSettingsEdge is the edge representation of GroupSettings.
type GroupSettingsEdge struct {
	Node   *GroupSettings `json:"node"`
	Cursor Cursor         `json:"cursor"`
}

// GroupSettingsConnection is the connection containing edges to GroupSettings.
type GroupSettingsConnection struct {
	Edges      []*GroupSettingsEdge `json:"edges"`
	PageInfo   PageInfo             `json:"pageInfo"`
	TotalCount int                  `json:"totalCount"`
}

func (c *GroupSettingsConnection) build(nodes []*GroupSettings, pager *groupsettingsPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *GroupSettings
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *GroupSettings {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *GroupSettings {
			return nodes[i]
		}
	}
	c.Edges = make([]*GroupSettingsEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &GroupSettingsEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// GroupSettingsPaginateOption enables pagination customization.
type GroupSettingsPaginateOption func(*groupsettingsPager) error

// WithGroupSettingsOrder configures pagination ordering.
func WithGroupSettingsOrder(order *GroupSettingsOrder) GroupSettingsPaginateOption {
	if order == nil {
		order = DefaultGroupSettingsOrder
	}
	o := *order
	return func(pager *groupsettingsPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultGroupSettingsOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithGroupSettingsFilter configures pagination filter.
func WithGroupSettingsFilter(filter func(*GroupSettingsQuery) (*GroupSettingsQuery, error)) GroupSettingsPaginateOption {
	return func(pager *groupsettingsPager) error {
		if filter == nil {
			return errors.New("GroupSettingsQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type groupsettingsPager struct {
	order  *GroupSettingsOrder
	filter func(*GroupSettingsQuery) (*GroupSettingsQuery, error)
}

func newGroupSettingsPager(opts []GroupSettingsPaginateOption) (*groupsettingsPager, error) {
	pager := &groupsettingsPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultGroupSettingsOrder
	}
	return pager, nil
}

func (p *groupsettingsPager) applyFilter(query *GroupSettingsQuery) (*GroupSettingsQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *groupsettingsPager) toCursor(gs *GroupSettings) Cursor {
	return p.order.Field.toCursor(gs)
}

func (p *groupsettingsPager) applyCursors(query *GroupSettingsQuery, after, before *Cursor) *GroupSettingsQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultGroupSettingsOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *groupsettingsPager) applyOrder(query *GroupSettingsQuery, reverse bool) *GroupSettingsQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultGroupSettingsOrder.Field {
		query = query.Order(direction.orderFunc(DefaultGroupSettingsOrder.Field.field))
	}
	return query
}

func (p *groupsettingsPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultGroupSettingsOrder.Field {
			b.Comma().Ident(DefaultGroupSettingsOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to GroupSettings.
func (gs *GroupSettingsQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...GroupSettingsPaginateOption,
) (*GroupSettingsConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newGroupSettingsPager(opts)
	if err != nil {
		return nil, err
	}
	if gs, err = pager.applyFilter(gs); err != nil {
		return nil, err
	}
	conn := &GroupSettingsConnection{Edges: []*GroupSettingsEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = gs.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	gs = pager.applyCursors(gs, after, before)
	gs = pager.applyOrder(gs, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		gs.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := gs.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := gs.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// GroupSettingsOrderField defines the ordering field of GroupSettings.
type GroupSettingsOrderField struct {
	field    string
	toCursor func(*GroupSettings) Cursor
}

// GroupSettingsOrder defines the ordering of GroupSettings.
type GroupSettingsOrder struct {
	Direction OrderDirection           `json:"direction"`
	Field     *GroupSettingsOrderField `json:"field"`
}

// DefaultGroupSettingsOrder is the default ordering of GroupSettings.
var DefaultGroupSettingsOrder = &GroupSettingsOrder{
	Direction: OrderDirectionAsc,
	Field: &GroupSettingsOrderField{
		field: groupsettings.FieldID,
		toCursor: func(gs *GroupSettings) Cursor {
			return Cursor{ID: gs.ID}
		},
	},
}

// ToEdge converts GroupSettings into GroupSettingsEdge.
func (gs *GroupSettings) ToEdge(order *GroupSettingsOrder) *GroupSettingsEdge {
	if order == nil {
		order = DefaultGroupSettingsOrder
	}
	return &GroupSettingsEdge{
		Node:   gs,
		Cursor: order.Field.toCursor(gs),
	}
}

// MatchEdge is the edge representation of Match.
type MatchEdge struct {
	Node   *Match `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// MatchConnection is the connection containing edges to Match.
type MatchConnection struct {
	Edges      []*MatchEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

func (c *MatchConnection) build(nodes []*Match, pager *matchPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Match
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Match {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Match {
			return nodes[i]
		}
	}
	c.Edges = make([]*MatchEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &MatchEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// MatchPaginateOption enables pagination customization.
type MatchPaginateOption func(*matchPager) error

// WithMatchOrder configures pagination ordering.
func WithMatchOrder(order *MatchOrder) MatchPaginateOption {
	if order == nil {
		order = DefaultMatchOrder
	}
	o := *order
	return func(pager *matchPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultMatchOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithMatchFilter configures pagination filter.
func WithMatchFilter(filter func(*MatchQuery) (*MatchQuery, error)) MatchPaginateOption {
	return func(pager *matchPager) error {
		if filter == nil {
			return errors.New("MatchQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type matchPager struct {
	order  *MatchOrder
	filter func(*MatchQuery) (*MatchQuery, error)
}

func newMatchPager(opts []MatchPaginateOption) (*matchPager, error) {
	pager := &matchPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultMatchOrder
	}
	return pager, nil
}

func (p *matchPager) applyFilter(query *MatchQuery) (*MatchQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *matchPager) toCursor(m *Match) Cursor {
	return p.order.Field.toCursor(m)
}

func (p *matchPager) applyCursors(query *MatchQuery, after, before *Cursor) *MatchQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultMatchOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *matchPager) applyOrder(query *MatchQuery, reverse bool) *MatchQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultMatchOrder.Field {
		query = query.Order(direction.orderFunc(DefaultMatchOrder.Field.field))
	}
	return query
}

func (p *matchPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultMatchOrder.Field {
			b.Comma().Ident(DefaultMatchOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Match.
func (m *MatchQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...MatchPaginateOption,
) (*MatchConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newMatchPager(opts)
	if err != nil {
		return nil, err
	}
	if m, err = pager.applyFilter(m); err != nil {
		return nil, err
	}
	conn := &MatchConnection{Edges: []*MatchEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = m.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	m = pager.applyCursors(m, after, before)
	m = pager.applyOrder(m, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := m.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// MatchOrderField defines the ordering field of Match.
type MatchOrderField struct {
	field    string
	toCursor func(*Match) Cursor
}

// MatchOrder defines the ordering of Match.
type MatchOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *MatchOrderField `json:"field"`
}

// DefaultMatchOrder is the default ordering of Match.
var DefaultMatchOrder = &MatchOrder{
	Direction: OrderDirectionAsc,
	Field: &MatchOrderField{
		field: match.FieldID,
		toCursor: func(m *Match) Cursor {
			return Cursor{ID: m.ID}
		},
	},
}

// ToEdge converts Match into MatchEdge.
func (m *Match) ToEdge(order *MatchOrder) *MatchEdge {
	if order == nil {
		order = DefaultMatchOrder
	}
	return &MatchEdge{
		Node:   m,
		Cursor: order.Field.toCursor(m),
	}
}

// NumericalStatEdge is the edge representation of NumericalStat.
type NumericalStatEdge struct {
	Node   *NumericalStat `json:"node"`
	Cursor Cursor         `json:"cursor"`
}

// NumericalStatConnection is the connection containing edges to NumericalStat.
type NumericalStatConnection struct {
	Edges      []*NumericalStatEdge `json:"edges"`
	PageInfo   PageInfo             `json:"pageInfo"`
	TotalCount int                  `json:"totalCount"`
}

func (c *NumericalStatConnection) build(nodes []*NumericalStat, pager *numericalstatPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *NumericalStat
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *NumericalStat {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *NumericalStat {
			return nodes[i]
		}
	}
	c.Edges = make([]*NumericalStatEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &NumericalStatEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// NumericalStatPaginateOption enables pagination customization.
type NumericalStatPaginateOption func(*numericalstatPager) error

// WithNumericalStatOrder configures pagination ordering.
func WithNumericalStatOrder(order *NumericalStatOrder) NumericalStatPaginateOption {
	if order == nil {
		order = DefaultNumericalStatOrder
	}
	o := *order
	return func(pager *numericalstatPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultNumericalStatOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithNumericalStatFilter configures pagination filter.
func WithNumericalStatFilter(filter func(*NumericalStatQuery) (*NumericalStatQuery, error)) NumericalStatPaginateOption {
	return func(pager *numericalstatPager) error {
		if filter == nil {
			return errors.New("NumericalStatQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type numericalstatPager struct {
	order  *NumericalStatOrder
	filter func(*NumericalStatQuery) (*NumericalStatQuery, error)
}

func newNumericalStatPager(opts []NumericalStatPaginateOption) (*numericalstatPager, error) {
	pager := &numericalstatPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultNumericalStatOrder
	}
	return pager, nil
}

func (p *numericalstatPager) applyFilter(query *NumericalStatQuery) (*NumericalStatQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *numericalstatPager) toCursor(ns *NumericalStat) Cursor {
	return p.order.Field.toCursor(ns)
}

func (p *numericalstatPager) applyCursors(query *NumericalStatQuery, after, before *Cursor) *NumericalStatQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultNumericalStatOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *numericalstatPager) applyOrder(query *NumericalStatQuery, reverse bool) *NumericalStatQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultNumericalStatOrder.Field {
		query = query.Order(direction.orderFunc(DefaultNumericalStatOrder.Field.field))
	}
	return query
}

func (p *numericalstatPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultNumericalStatOrder.Field {
			b.Comma().Ident(DefaultNumericalStatOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to NumericalStat.
func (ns *NumericalStatQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...NumericalStatPaginateOption,
) (*NumericalStatConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newNumericalStatPager(opts)
	if err != nil {
		return nil, err
	}
	if ns, err = pager.applyFilter(ns); err != nil {
		return nil, err
	}
	conn := &NumericalStatConnection{Edges: []*NumericalStatEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = ns.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	ns = pager.applyCursors(ns, after, before)
	ns = pager.applyOrder(ns, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		ns.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ns.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := ns.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// NumericalStatOrderField defines the ordering field of NumericalStat.
type NumericalStatOrderField struct {
	field    string
	toCursor func(*NumericalStat) Cursor
}

// NumericalStatOrder defines the ordering of NumericalStat.
type NumericalStatOrder struct {
	Direction OrderDirection           `json:"direction"`
	Field     *NumericalStatOrderField `json:"field"`
}

// DefaultNumericalStatOrder is the default ordering of NumericalStat.
var DefaultNumericalStatOrder = &NumericalStatOrder{
	Direction: OrderDirectionAsc,
	Field: &NumericalStatOrderField{
		field: numericalstat.FieldID,
		toCursor: func(ns *NumericalStat) Cursor {
			return Cursor{ID: ns.ID}
		},
	},
}

// ToEdge converts NumericalStat into NumericalStatEdge.
func (ns *NumericalStat) ToEdge(order *NumericalStatOrder) *NumericalStatEdge {
	if order == nil {
		order = DefaultNumericalStatOrder
	}
	return &NumericalStatEdge{
		Node:   ns,
		Cursor: order.Field.toCursor(ns),
	}
}

// NumericalStatDescriptionEdge is the edge representation of NumericalStatDescription.
type NumericalStatDescriptionEdge struct {
	Node   *NumericalStatDescription `json:"node"`
	Cursor Cursor                    `json:"cursor"`
}

// NumericalStatDescriptionConnection is the connection containing edges to NumericalStatDescription.
type NumericalStatDescriptionConnection struct {
	Edges      []*NumericalStatDescriptionEdge `json:"edges"`
	PageInfo   PageInfo                        `json:"pageInfo"`
	TotalCount int                             `json:"totalCount"`
}

func (c *NumericalStatDescriptionConnection) build(nodes []*NumericalStatDescription, pager *numericalstatdescriptionPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *NumericalStatDescription
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *NumericalStatDescription {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *NumericalStatDescription {
			return nodes[i]
		}
	}
	c.Edges = make([]*NumericalStatDescriptionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &NumericalStatDescriptionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// NumericalStatDescriptionPaginateOption enables pagination customization.
type NumericalStatDescriptionPaginateOption func(*numericalstatdescriptionPager) error

// WithNumericalStatDescriptionOrder configures pagination ordering.
func WithNumericalStatDescriptionOrder(order *NumericalStatDescriptionOrder) NumericalStatDescriptionPaginateOption {
	if order == nil {
		order = DefaultNumericalStatDescriptionOrder
	}
	o := *order
	return func(pager *numericalstatdescriptionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultNumericalStatDescriptionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithNumericalStatDescriptionFilter configures pagination filter.
func WithNumericalStatDescriptionFilter(filter func(*NumericalStatDescriptionQuery) (*NumericalStatDescriptionQuery, error)) NumericalStatDescriptionPaginateOption {
	return func(pager *numericalstatdescriptionPager) error {
		if filter == nil {
			return errors.New("NumericalStatDescriptionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type numericalstatdescriptionPager struct {
	order  *NumericalStatDescriptionOrder
	filter func(*NumericalStatDescriptionQuery) (*NumericalStatDescriptionQuery, error)
}

func newNumericalStatDescriptionPager(opts []NumericalStatDescriptionPaginateOption) (*numericalstatdescriptionPager, error) {
	pager := &numericalstatdescriptionPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultNumericalStatDescriptionOrder
	}
	return pager, nil
}

func (p *numericalstatdescriptionPager) applyFilter(query *NumericalStatDescriptionQuery) (*NumericalStatDescriptionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *numericalstatdescriptionPager) toCursor(nsd *NumericalStatDescription) Cursor {
	return p.order.Field.toCursor(nsd)
}

func (p *numericalstatdescriptionPager) applyCursors(query *NumericalStatDescriptionQuery, after, before *Cursor) *NumericalStatDescriptionQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultNumericalStatDescriptionOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *numericalstatdescriptionPager) applyOrder(query *NumericalStatDescriptionQuery, reverse bool) *NumericalStatDescriptionQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultNumericalStatDescriptionOrder.Field {
		query = query.Order(direction.orderFunc(DefaultNumericalStatDescriptionOrder.Field.field))
	}
	return query
}

func (p *numericalstatdescriptionPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultNumericalStatDescriptionOrder.Field {
			b.Comma().Ident(DefaultNumericalStatDescriptionOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to NumericalStatDescription.
func (nsd *NumericalStatDescriptionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...NumericalStatDescriptionPaginateOption,
) (*NumericalStatDescriptionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newNumericalStatDescriptionPager(opts)
	if err != nil {
		return nil, err
	}
	if nsd, err = pager.applyFilter(nsd); err != nil {
		return nil, err
	}
	conn := &NumericalStatDescriptionConnection{Edges: []*NumericalStatDescriptionEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = nsd.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	nsd = pager.applyCursors(nsd, after, before)
	nsd = pager.applyOrder(nsd, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		nsd.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := nsd.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := nsd.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// NumericalStatDescriptionOrderField defines the ordering field of NumericalStatDescription.
type NumericalStatDescriptionOrderField struct {
	field    string
	toCursor func(*NumericalStatDescription) Cursor
}

// NumericalStatDescriptionOrder defines the ordering of NumericalStatDescription.
type NumericalStatDescriptionOrder struct {
	Direction OrderDirection                      `json:"direction"`
	Field     *NumericalStatDescriptionOrderField `json:"field"`
}

// DefaultNumericalStatDescriptionOrder is the default ordering of NumericalStatDescription.
var DefaultNumericalStatDescriptionOrder = &NumericalStatDescriptionOrder{
	Direction: OrderDirectionAsc,
	Field: &NumericalStatDescriptionOrderField{
		field: numericalstatdescription.FieldID,
		toCursor: func(nsd *NumericalStatDescription) Cursor {
			return Cursor{ID: nsd.ID}
		},
	},
}

// ToEdge converts NumericalStatDescription into NumericalStatDescriptionEdge.
func (nsd *NumericalStatDescription) ToEdge(order *NumericalStatDescriptionOrder) *NumericalStatDescriptionEdge {
	if order == nil {
		order = DefaultNumericalStatDescriptionOrder
	}
	return &NumericalStatDescriptionEdge{
		Node:   nsd,
		Cursor: order.Field.toCursor(nsd),
	}
}

// PlayerEdge is the edge representation of Player.
type PlayerEdge struct {
	Node   *Player `json:"node"`
	Cursor Cursor  `json:"cursor"`
}

// PlayerConnection is the connection containing edges to Player.
type PlayerConnection struct {
	Edges      []*PlayerEdge `json:"edges"`
	PageInfo   PageInfo      `json:"pageInfo"`
	TotalCount int           `json:"totalCount"`
}

func (c *PlayerConnection) build(nodes []*Player, pager *playerPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Player
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Player {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Player {
			return nodes[i]
		}
	}
	c.Edges = make([]*PlayerEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PlayerEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PlayerPaginateOption enables pagination customization.
type PlayerPaginateOption func(*playerPager) error

// WithPlayerOrder configures pagination ordering.
func WithPlayerOrder(order *PlayerOrder) PlayerPaginateOption {
	if order == nil {
		order = DefaultPlayerOrder
	}
	o := *order
	return func(pager *playerPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPlayerOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPlayerFilter configures pagination filter.
func WithPlayerFilter(filter func(*PlayerQuery) (*PlayerQuery, error)) PlayerPaginateOption {
	return func(pager *playerPager) error {
		if filter == nil {
			return errors.New("PlayerQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type playerPager struct {
	order  *PlayerOrder
	filter func(*PlayerQuery) (*PlayerQuery, error)
}

func newPlayerPager(opts []PlayerPaginateOption) (*playerPager, error) {
	pager := &playerPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPlayerOrder
	}
	return pager, nil
}

func (p *playerPager) applyFilter(query *PlayerQuery) (*PlayerQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *playerPager) toCursor(pl *Player) Cursor {
	return p.order.Field.toCursor(pl)
}

func (p *playerPager) applyCursors(query *PlayerQuery, after, before *Cursor) *PlayerQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultPlayerOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *playerPager) applyOrder(query *PlayerQuery, reverse bool) *PlayerQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultPlayerOrder.Field {
		query = query.Order(direction.orderFunc(DefaultPlayerOrder.Field.field))
	}
	return query
}

func (p *playerPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPlayerOrder.Field {
			b.Comma().Ident(DefaultPlayerOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Player.
func (pl *PlayerQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PlayerPaginateOption,
) (*PlayerConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPlayerPager(opts)
	if err != nil {
		return nil, err
	}
	if pl, err = pager.applyFilter(pl); err != nil {
		return nil, err
	}
	conn := &PlayerConnection{Edges: []*PlayerEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = pl.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	pl = pager.applyCursors(pl, after, before)
	pl = pager.applyOrder(pl, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		pl.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pl.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := pl.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// PlayerOrderField defines the ordering field of Player.
type PlayerOrderField struct {
	field    string
	toCursor func(*Player) Cursor
}

// PlayerOrder defines the ordering of Player.
type PlayerOrder struct {
	Direction OrderDirection    `json:"direction"`
	Field     *PlayerOrderField `json:"field"`
}

// DefaultPlayerOrder is the default ordering of Player.
var DefaultPlayerOrder = &PlayerOrder{
	Direction: OrderDirectionAsc,
	Field: &PlayerOrderField{
		field: player.FieldID,
		toCursor: func(pl *Player) Cursor {
			return Cursor{ID: pl.ID}
		},
	},
}

// ToEdge converts Player into PlayerEdge.
func (pl *Player) ToEdge(order *PlayerOrder) *PlayerEdge {
	if order == nil {
		order = DefaultPlayerOrder
	}
	return &PlayerEdge{
		Node:   pl,
		Cursor: order.Field.toCursor(pl),
	}
}

// PlayerSupervisionRequestEdge is the edge representation of PlayerSupervisionRequest.
type PlayerSupervisionRequestEdge struct {
	Node   *PlayerSupervisionRequest `json:"node"`
	Cursor Cursor                    `json:"cursor"`
}

// PlayerSupervisionRequestConnection is the connection containing edges to PlayerSupervisionRequest.
type PlayerSupervisionRequestConnection struct {
	Edges      []*PlayerSupervisionRequestEdge `json:"edges"`
	PageInfo   PageInfo                        `json:"pageInfo"`
	TotalCount int                             `json:"totalCount"`
}

func (c *PlayerSupervisionRequestConnection) build(nodes []*PlayerSupervisionRequest, pager *playersupervisionrequestPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *PlayerSupervisionRequest
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *PlayerSupervisionRequest {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *PlayerSupervisionRequest {
			return nodes[i]
		}
	}
	c.Edges = make([]*PlayerSupervisionRequestEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PlayerSupervisionRequestEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PlayerSupervisionRequestPaginateOption enables pagination customization.
type PlayerSupervisionRequestPaginateOption func(*playersupervisionrequestPager) error

// WithPlayerSupervisionRequestOrder configures pagination ordering.
func WithPlayerSupervisionRequestOrder(order *PlayerSupervisionRequestOrder) PlayerSupervisionRequestPaginateOption {
	if order == nil {
		order = DefaultPlayerSupervisionRequestOrder
	}
	o := *order
	return func(pager *playersupervisionrequestPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPlayerSupervisionRequestOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPlayerSupervisionRequestFilter configures pagination filter.
func WithPlayerSupervisionRequestFilter(filter func(*PlayerSupervisionRequestQuery) (*PlayerSupervisionRequestQuery, error)) PlayerSupervisionRequestPaginateOption {
	return func(pager *playersupervisionrequestPager) error {
		if filter == nil {
			return errors.New("PlayerSupervisionRequestQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type playersupervisionrequestPager struct {
	order  *PlayerSupervisionRequestOrder
	filter func(*PlayerSupervisionRequestQuery) (*PlayerSupervisionRequestQuery, error)
}

func newPlayerSupervisionRequestPager(opts []PlayerSupervisionRequestPaginateOption) (*playersupervisionrequestPager, error) {
	pager := &playersupervisionrequestPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPlayerSupervisionRequestOrder
	}
	return pager, nil
}

func (p *playersupervisionrequestPager) applyFilter(query *PlayerSupervisionRequestQuery) (*PlayerSupervisionRequestQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *playersupervisionrequestPager) toCursor(psr *PlayerSupervisionRequest) Cursor {
	return p.order.Field.toCursor(psr)
}

func (p *playersupervisionrequestPager) applyCursors(query *PlayerSupervisionRequestQuery, after, before *Cursor) *PlayerSupervisionRequestQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultPlayerSupervisionRequestOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *playersupervisionrequestPager) applyOrder(query *PlayerSupervisionRequestQuery, reverse bool) *PlayerSupervisionRequestQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultPlayerSupervisionRequestOrder.Field {
		query = query.Order(direction.orderFunc(DefaultPlayerSupervisionRequestOrder.Field.field))
	}
	return query
}

func (p *playersupervisionrequestPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPlayerSupervisionRequestOrder.Field {
			b.Comma().Ident(DefaultPlayerSupervisionRequestOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to PlayerSupervisionRequest.
func (psr *PlayerSupervisionRequestQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PlayerSupervisionRequestPaginateOption,
) (*PlayerSupervisionRequestConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPlayerSupervisionRequestPager(opts)
	if err != nil {
		return nil, err
	}
	if psr, err = pager.applyFilter(psr); err != nil {
		return nil, err
	}
	conn := &PlayerSupervisionRequestConnection{Edges: []*PlayerSupervisionRequestEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = psr.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	psr = pager.applyCursors(psr, after, before)
	psr = pager.applyOrder(psr, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		psr.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := psr.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := psr.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// PlayerSupervisionRequestOrderField defines the ordering field of PlayerSupervisionRequest.
type PlayerSupervisionRequestOrderField struct {
	field    string
	toCursor func(*PlayerSupervisionRequest) Cursor
}

// PlayerSupervisionRequestOrder defines the ordering of PlayerSupervisionRequest.
type PlayerSupervisionRequestOrder struct {
	Direction OrderDirection                      `json:"direction"`
	Field     *PlayerSupervisionRequestOrderField `json:"field"`
}

// DefaultPlayerSupervisionRequestOrder is the default ordering of PlayerSupervisionRequest.
var DefaultPlayerSupervisionRequestOrder = &PlayerSupervisionRequestOrder{
	Direction: OrderDirectionAsc,
	Field: &PlayerSupervisionRequestOrderField{
		field: playersupervisionrequest.FieldID,
		toCursor: func(psr *PlayerSupervisionRequest) Cursor {
			return Cursor{ID: psr.ID}
		},
	},
}

// ToEdge converts PlayerSupervisionRequest into PlayerSupervisionRequestEdge.
func (psr *PlayerSupervisionRequest) ToEdge(order *PlayerSupervisionRequestOrder) *PlayerSupervisionRequestEdge {
	if order == nil {
		order = DefaultPlayerSupervisionRequestOrder
	}
	return &PlayerSupervisionRequestEdge{
		Node:   psr,
		Cursor: order.Field.toCursor(psr),
	}
}

// PlayerSupervisionRequestApprovalEdge is the edge representation of PlayerSupervisionRequestApproval.
type PlayerSupervisionRequestApprovalEdge struct {
	Node   *PlayerSupervisionRequestApproval `json:"node"`
	Cursor Cursor                            `json:"cursor"`
}

// PlayerSupervisionRequestApprovalConnection is the connection containing edges to PlayerSupervisionRequestApproval.
type PlayerSupervisionRequestApprovalConnection struct {
	Edges      []*PlayerSupervisionRequestApprovalEdge `json:"edges"`
	PageInfo   PageInfo                                `json:"pageInfo"`
	TotalCount int                                     `json:"totalCount"`
}

func (c *PlayerSupervisionRequestApprovalConnection) build(nodes []*PlayerSupervisionRequestApproval, pager *playersupervisionrequestapprovalPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *PlayerSupervisionRequestApproval
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *PlayerSupervisionRequestApproval {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *PlayerSupervisionRequestApproval {
			return nodes[i]
		}
	}
	c.Edges = make([]*PlayerSupervisionRequestApprovalEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PlayerSupervisionRequestApprovalEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PlayerSupervisionRequestApprovalPaginateOption enables pagination customization.
type PlayerSupervisionRequestApprovalPaginateOption func(*playersupervisionrequestapprovalPager) error

// WithPlayerSupervisionRequestApprovalOrder configures pagination ordering.
func WithPlayerSupervisionRequestApprovalOrder(order *PlayerSupervisionRequestApprovalOrder) PlayerSupervisionRequestApprovalPaginateOption {
	if order == nil {
		order = DefaultPlayerSupervisionRequestApprovalOrder
	}
	o := *order
	return func(pager *playersupervisionrequestapprovalPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPlayerSupervisionRequestApprovalOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPlayerSupervisionRequestApprovalFilter configures pagination filter.
func WithPlayerSupervisionRequestApprovalFilter(filter func(*PlayerSupervisionRequestApprovalQuery) (*PlayerSupervisionRequestApprovalQuery, error)) PlayerSupervisionRequestApprovalPaginateOption {
	return func(pager *playersupervisionrequestapprovalPager) error {
		if filter == nil {
			return errors.New("PlayerSupervisionRequestApprovalQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type playersupervisionrequestapprovalPager struct {
	order  *PlayerSupervisionRequestApprovalOrder
	filter func(*PlayerSupervisionRequestApprovalQuery) (*PlayerSupervisionRequestApprovalQuery, error)
}

func newPlayerSupervisionRequestApprovalPager(opts []PlayerSupervisionRequestApprovalPaginateOption) (*playersupervisionrequestapprovalPager, error) {
	pager := &playersupervisionrequestapprovalPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPlayerSupervisionRequestApprovalOrder
	}
	return pager, nil
}

func (p *playersupervisionrequestapprovalPager) applyFilter(query *PlayerSupervisionRequestApprovalQuery) (*PlayerSupervisionRequestApprovalQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *playersupervisionrequestapprovalPager) toCursor(psra *PlayerSupervisionRequestApproval) Cursor {
	return p.order.Field.toCursor(psra)
}

func (p *playersupervisionrequestapprovalPager) applyCursors(query *PlayerSupervisionRequestApprovalQuery, after, before *Cursor) *PlayerSupervisionRequestApprovalQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultPlayerSupervisionRequestApprovalOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *playersupervisionrequestapprovalPager) applyOrder(query *PlayerSupervisionRequestApprovalQuery, reverse bool) *PlayerSupervisionRequestApprovalQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultPlayerSupervisionRequestApprovalOrder.Field {
		query = query.Order(direction.orderFunc(DefaultPlayerSupervisionRequestApprovalOrder.Field.field))
	}
	return query
}

func (p *playersupervisionrequestapprovalPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPlayerSupervisionRequestApprovalOrder.Field {
			b.Comma().Ident(DefaultPlayerSupervisionRequestApprovalOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to PlayerSupervisionRequestApproval.
func (psra *PlayerSupervisionRequestApprovalQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PlayerSupervisionRequestApprovalPaginateOption,
) (*PlayerSupervisionRequestApprovalConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPlayerSupervisionRequestApprovalPager(opts)
	if err != nil {
		return nil, err
	}
	if psra, err = pager.applyFilter(psra); err != nil {
		return nil, err
	}
	conn := &PlayerSupervisionRequestApprovalConnection{Edges: []*PlayerSupervisionRequestApprovalEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = psra.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	psra = pager.applyCursors(psra, after, before)
	psra = pager.applyOrder(psra, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		psra.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := psra.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := psra.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// PlayerSupervisionRequestApprovalOrderField defines the ordering field of PlayerSupervisionRequestApproval.
type PlayerSupervisionRequestApprovalOrderField struct {
	field    string
	toCursor func(*PlayerSupervisionRequestApproval) Cursor
}

// PlayerSupervisionRequestApprovalOrder defines the ordering of PlayerSupervisionRequestApproval.
type PlayerSupervisionRequestApprovalOrder struct {
	Direction OrderDirection                              `json:"direction"`
	Field     *PlayerSupervisionRequestApprovalOrderField `json:"field"`
}

// DefaultPlayerSupervisionRequestApprovalOrder is the default ordering of PlayerSupervisionRequestApproval.
var DefaultPlayerSupervisionRequestApprovalOrder = &PlayerSupervisionRequestApprovalOrder{
	Direction: OrderDirectionAsc,
	Field: &PlayerSupervisionRequestApprovalOrderField{
		field: playersupervisionrequestapproval.FieldID,
		toCursor: func(psra *PlayerSupervisionRequestApproval) Cursor {
			return Cursor{ID: psra.ID}
		},
	},
}

// ToEdge converts PlayerSupervisionRequestApproval into PlayerSupervisionRequestApprovalEdge.
func (psra *PlayerSupervisionRequestApproval) ToEdge(order *PlayerSupervisionRequestApprovalOrder) *PlayerSupervisionRequestApprovalEdge {
	if order == nil {
		order = DefaultPlayerSupervisionRequestApprovalOrder
	}
	return &PlayerSupervisionRequestApprovalEdge{
		Node:   psra,
		Cursor: order.Field.toCursor(psra),
	}
}

// UserEdge is the edge representation of User.
type UserEdge struct {
	Node   *User  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// UserConnection is the connection containing edges to User.
type UserConnection struct {
	Edges      []*UserEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *UserConnection) build(nodes []*User, pager *userPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *User
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *User {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *User {
			return nodes[i]
		}
	}
	c.Edges = make([]*UserEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &UserEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// UserPaginateOption enables pagination customization.
type UserPaginateOption func(*userPager) error

// WithUserOrder configures pagination ordering.
func WithUserOrder(order *UserOrder) UserPaginateOption {
	if order == nil {
		order = DefaultUserOrder
	}
	o := *order
	return func(pager *userPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultUserOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithUserFilter configures pagination filter.
func WithUserFilter(filter func(*UserQuery) (*UserQuery, error)) UserPaginateOption {
	return func(pager *userPager) error {
		if filter == nil {
			return errors.New("UserQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type userPager struct {
	order  *UserOrder
	filter func(*UserQuery) (*UserQuery, error)
}

func newUserPager(opts []UserPaginateOption) (*userPager, error) {
	pager := &userPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultUserOrder
	}
	return pager, nil
}

func (p *userPager) applyFilter(query *UserQuery) (*UserQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *userPager) toCursor(u *User) Cursor {
	return p.order.Field.toCursor(u)
}

func (p *userPager) applyCursors(query *UserQuery, after, before *Cursor) *UserQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultUserOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *userPager) applyOrder(query *UserQuery, reverse bool) *UserQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultUserOrder.Field {
		query = query.Order(direction.orderFunc(DefaultUserOrder.Field.field))
	}
	return query
}

func (p *userPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultUserOrder.Field {
			b.Comma().Ident(DefaultUserOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to User.
func (u *UserQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...UserPaginateOption,
) (*UserConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newUserPager(opts)
	if err != nil {
		return nil, err
	}
	if u, err = pager.applyFilter(u); err != nil {
		return nil, err
	}
	conn := &UserConnection{Edges: []*UserEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = u.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}

	u = pager.applyCursors(u, after, before)
	u = pager.applyOrder(u, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		u.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := u.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := u.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// UserOrderField defines the ordering field of User.
type UserOrderField struct {
	field    string
	toCursor func(*User) Cursor
}

// UserOrder defines the ordering of User.
type UserOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *UserOrderField `json:"field"`
}

// DefaultUserOrder is the default ordering of User.
var DefaultUserOrder = &UserOrder{
	Direction: OrderDirectionAsc,
	Field: &UserOrderField{
		field: user.FieldID,
		toCursor: func(u *User) Cursor {
			return Cursor{ID: u.ID}
		},
	},
}

// ToEdge converts User into UserEdge.
func (u *User) ToEdge(order *UserOrder) *UserEdge {
	if order == nil {
		order = DefaultUserOrder
	}
	return &UserEdge{
		Node:   u,
		Cursor: order.Field.toCursor(u),
	}
}
