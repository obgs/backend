// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-boardgame-stats/backend/internal/ent/group"
	"github.com/open-boardgame-stats/backend/internal/ent/groupmembershipapplication"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
	"github.com/open-boardgame-stats/backend/internal/ent/user"
)

// GroupMembershipApplicationCreate is the builder for creating a GroupMembershipApplication entity.
type GroupMembershipApplicationCreate struct {
	config
	mutation *GroupMembershipApplicationMutation
	hooks    []Hook
}

// SetMessage sets the "message" field.
func (gmac *GroupMembershipApplicationCreate) SetMessage(s string) *GroupMembershipApplicationCreate {
	gmac.mutation.SetMessage(s)
	return gmac
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (gmac *GroupMembershipApplicationCreate) SetNillableMessage(s *string) *GroupMembershipApplicationCreate {
	if s != nil {
		gmac.SetMessage(*s)
	}
	return gmac
}

// SetID sets the "id" field.
func (gmac *GroupMembershipApplicationCreate) SetID(gu guidgql.GUID) *GroupMembershipApplicationCreate {
	gmac.mutation.SetID(gu)
	return gmac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (gmac *GroupMembershipApplicationCreate) SetNillableID(gu *guidgql.GUID) *GroupMembershipApplicationCreate {
	if gu != nil {
		gmac.SetID(*gu)
	}
	return gmac
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (gmac *GroupMembershipApplicationCreate) AddUserIDs(ids ...guidgql.GUID) *GroupMembershipApplicationCreate {
	gmac.mutation.AddUserIDs(ids...)
	return gmac
}

// AddUser adds the "user" edges to the User entity.
func (gmac *GroupMembershipApplicationCreate) AddUser(u ...*User) *GroupMembershipApplicationCreate {
	ids := make([]guidgql.GUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gmac.AddUserIDs(ids...)
}

// AddGroupIDs adds the "group" edge to the Group entity by IDs.
func (gmac *GroupMembershipApplicationCreate) AddGroupIDs(ids ...guidgql.GUID) *GroupMembershipApplicationCreate {
	gmac.mutation.AddGroupIDs(ids...)
	return gmac
}

// AddGroup adds the "group" edges to the Group entity.
func (gmac *GroupMembershipApplicationCreate) AddGroup(g ...*Group) *GroupMembershipApplicationCreate {
	ids := make([]guidgql.GUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gmac.AddGroupIDs(ids...)
}

// Mutation returns the GroupMembershipApplicationMutation object of the builder.
func (gmac *GroupMembershipApplicationCreate) Mutation() *GroupMembershipApplicationMutation {
	return gmac.mutation
}

// Save creates the GroupMembershipApplication in the database.
func (gmac *GroupMembershipApplicationCreate) Save(ctx context.Context) (*GroupMembershipApplication, error) {
	var (
		err  error
		node *GroupMembershipApplication
	)
	gmac.defaults()
	if len(gmac.hooks) == 0 {
		if err = gmac.check(); err != nil {
			return nil, err
		}
		node, err = gmac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GroupMembershipApplicationMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gmac.check(); err != nil {
				return nil, err
			}
			gmac.mutation = mutation
			if node, err = gmac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(gmac.hooks) - 1; i >= 0; i-- {
			if gmac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gmac.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, gmac.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*GroupMembershipApplication)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GroupMembershipApplicationMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (gmac *GroupMembershipApplicationCreate) SaveX(ctx context.Context) *GroupMembershipApplication {
	v, err := gmac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gmac *GroupMembershipApplicationCreate) Exec(ctx context.Context) error {
	_, err := gmac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gmac *GroupMembershipApplicationCreate) ExecX(ctx context.Context) {
	if err := gmac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gmac *GroupMembershipApplicationCreate) defaults() {
	if _, ok := gmac.mutation.Message(); !ok {
		v := groupmembershipapplication.DefaultMessage
		gmac.mutation.SetMessage(v)
	}
	if _, ok := gmac.mutation.ID(); !ok {
		v := groupmembershipapplication.DefaultID()
		gmac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gmac *GroupMembershipApplicationCreate) check() error {
	if _, ok := gmac.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`ent: missing required field "GroupMembershipApplication.message"`)}
	}
	if len(gmac.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "GroupMembershipApplication.user"`)}
	}
	if len(gmac.mutation.GroupIDs()) == 0 {
		return &ValidationError{Name: "group", err: errors.New(`ent: missing required edge "GroupMembershipApplication.group"`)}
	}
	return nil
}

func (gmac *GroupMembershipApplicationCreate) sqlSave(ctx context.Context) (*GroupMembershipApplication, error) {
	_node, _spec := gmac.createSpec()
	if err := sqlgraph.CreateNode(ctx, gmac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*guidgql.GUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (gmac *GroupMembershipApplicationCreate) createSpec() (*GroupMembershipApplication, *sqlgraph.CreateSpec) {
	var (
		_node = &GroupMembershipApplication{config: gmac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: groupmembershipapplication.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: groupmembershipapplication.FieldID,
			},
		}
	)
	if id, ok := gmac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := gmac.mutation.Message(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: groupmembershipapplication.FieldMessage,
		})
		_node.Message = value
	}
	if nodes := gmac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   groupmembershipapplication.UserTable,
			Columns: groupmembershipapplication.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gmac.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   groupmembershipapplication.GroupTable,
			Columns: groupmembershipapplication.GroupPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GroupMembershipApplicationCreateBulk is the builder for creating many GroupMembershipApplication entities in bulk.
type GroupMembershipApplicationCreateBulk struct {
	config
	builders []*GroupMembershipApplicationCreate
}

// Save creates the GroupMembershipApplication entities in the database.
func (gmacb *GroupMembershipApplicationCreateBulk) Save(ctx context.Context) ([]*GroupMembershipApplication, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gmacb.builders))
	nodes := make([]*GroupMembershipApplication, len(gmacb.builders))
	mutators := make([]Mutator, len(gmacb.builders))
	for i := range gmacb.builders {
		func(i int, root context.Context) {
			builder := gmacb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GroupMembershipApplicationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gmacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gmacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gmacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gmacb *GroupMembershipApplicationCreateBulk) SaveX(ctx context.Context) []*GroupMembershipApplication {
	v, err := gmacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gmacb *GroupMembershipApplicationCreateBulk) Exec(ctx context.Context) error {
	_, err := gmacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gmacb *GroupMembershipApplicationCreateBulk) ExecX(ctx context.Context) {
	if err := gmacb.Exec(ctx); err != nil {
		panic(err)
	}
}
