// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/open-boardgame-stats/backend/internal/ent/game"
	"github.com/open-boardgame-stats/backend/internal/ent/gamefavorite"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
	"github.com/open-boardgame-stats/backend/internal/ent/user"
)

// GameFavorite is the model entity for the GameFavorite schema.
type GameFavorite struct {
	config
	// ID of the ent.
	ID guidgql.GUID `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GameFavoriteQuery when eager-loading is set.
	Edges               GameFavoriteEdges `json:"edges"`
	game_favorites      *guidgql.GUID
	user_favorite_games *guidgql.GUID
}

// GameFavoriteEdges holds the relations/edges for other nodes in the graph.
type GameFavoriteEdges struct {
	// Game holds the value of the game edge.
	Game *Game `json:"game,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// GameOrErr returns the Game value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GameFavoriteEdges) GameOrErr() (*Game, error) {
	if e.loadedTypes[0] {
		if e.Game == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: game.Label}
		}
		return e.Game, nil
	}
	return nil, &NotLoadedError{edge: "game"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GameFavoriteEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GameFavorite) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case gamefavorite.FieldID:
			values[i] = new(guidgql.GUID)
		case gamefavorite.ForeignKeys[0]: // game_favorites
			values[i] = &sql.NullScanner{S: new(guidgql.GUID)}
		case gamefavorite.ForeignKeys[1]: // user_favorite_games
			values[i] = &sql.NullScanner{S: new(guidgql.GUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type GameFavorite", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GameFavorite fields.
func (gf *GameFavorite) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case gamefavorite.FieldID:
			if value, ok := values[i].(*guidgql.GUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				gf.ID = *value
			}
		case gamefavorite.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field game_favorites", values[i])
			} else if value.Valid {
				gf.game_favorites = new(guidgql.GUID)
				*gf.game_favorites = *value.S.(*guidgql.GUID)
			}
		case gamefavorite.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_favorite_games", values[i])
			} else if value.Valid {
				gf.user_favorite_games = new(guidgql.GUID)
				*gf.user_favorite_games = *value.S.(*guidgql.GUID)
			}
		}
	}
	return nil
}

// QueryGame queries the "game" edge of the GameFavorite entity.
func (gf *GameFavorite) QueryGame() *GameQuery {
	return (&GameFavoriteClient{config: gf.config}).QueryGame(gf)
}

// QueryUser queries the "user" edge of the GameFavorite entity.
func (gf *GameFavorite) QueryUser() *UserQuery {
	return (&GameFavoriteClient{config: gf.config}).QueryUser(gf)
}

// Update returns a builder for updating this GameFavorite.
// Note that you need to call GameFavorite.Unwrap() before calling this method if this GameFavorite
// was returned from a transaction, and the transaction was committed or rolled back.
func (gf *GameFavorite) Update() *GameFavoriteUpdateOne {
	return (&GameFavoriteClient{config: gf.config}).UpdateOne(gf)
}

// Unwrap unwraps the GameFavorite entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gf *GameFavorite) Unwrap() *GameFavorite {
	_tx, ok := gf.config.driver.(*txDriver)
	if !ok {
		panic("ent: GameFavorite is not a transactional entity")
	}
	gf.config.driver = _tx.drv
	return gf
}

// String implements the fmt.Stringer.
func (gf *GameFavorite) String() string {
	var builder strings.Builder
	builder.WriteString("GameFavorite(")
	builder.WriteString(fmt.Sprintf("id=%v", gf.ID))
	builder.WriteByte(')')
	return builder.String()
}

// GameFavorites is a parsable slice of GameFavorite.
type GameFavorites []*GameFavorite

func (gf GameFavorites) config(cfg config) {
	for _i := range gf {
		gf[_i].config = cfg
	}
}
