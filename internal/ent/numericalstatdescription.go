// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/open-boardgame-stats/backend/internal/ent/numericalstatdescription"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
)

// NumericalStatDescription is the model entity for the NumericalStatDescription schema.
type NumericalStatDescription struct {
	config `json:"-"`
	// ID of the ent.
	ID guidgql.GUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NumericalStatDescriptionQuery when eager-loading is set.
	Edges NumericalStatDescriptionEdges `json:"edges"`
}

// NumericalStatDescriptionEdges holds the relations/edges for other nodes in the graph.
type NumericalStatDescriptionEdges struct {
	// Game holds the value of the game edge.
	Game []*Game `json:"game,omitempty"`
	// NumericalStats holds the value of the numerical_stats edge.
	NumericalStats []*NumericalStat `json:"numerical_stats,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedGame           map[string][]*Game
	namedNumericalStats map[string][]*NumericalStat
}

// GameOrErr returns the Game value or an error if the edge
// was not loaded in eager-loading.
func (e NumericalStatDescriptionEdges) GameOrErr() ([]*Game, error) {
	if e.loadedTypes[0] {
		return e.Game, nil
	}
	return nil, &NotLoadedError{edge: "game"}
}

// NumericalStatsOrErr returns the NumericalStats value or an error if the edge
// was not loaded in eager-loading.
func (e NumericalStatDescriptionEdges) NumericalStatsOrErr() ([]*NumericalStat, error) {
	if e.loadedTypes[1] {
		return e.NumericalStats, nil
	}
	return nil, &NotLoadedError{edge: "numerical_stats"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NumericalStatDescription) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case numericalstatdescription.FieldID:
			values[i] = new(guidgql.GUID)
		case numericalstatdescription.FieldName, numericalstatdescription.FieldDescription:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type NumericalStatDescription", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NumericalStatDescription fields.
func (nsd *NumericalStatDescription) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case numericalstatdescription.FieldID:
			if value, ok := values[i].(*guidgql.GUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				nsd.ID = *value
			}
		case numericalstatdescription.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				nsd.Name = value.String
			}
		case numericalstatdescription.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				nsd.Description = value.String
			}
		}
	}
	return nil
}

// QueryGame queries the "game" edge of the NumericalStatDescription entity.
func (nsd *NumericalStatDescription) QueryGame() *GameQuery {
	return (&NumericalStatDescriptionClient{config: nsd.config}).QueryGame(nsd)
}

// QueryNumericalStats queries the "numerical_stats" edge of the NumericalStatDescription entity.
func (nsd *NumericalStatDescription) QueryNumericalStats() *NumericalStatQuery {
	return (&NumericalStatDescriptionClient{config: nsd.config}).QueryNumericalStats(nsd)
}

// Update returns a builder for updating this NumericalStatDescription.
// Note that you need to call NumericalStatDescription.Unwrap() before calling this method if this NumericalStatDescription
// was returned from a transaction, and the transaction was committed or rolled back.
func (nsd *NumericalStatDescription) Update() *NumericalStatDescriptionUpdateOne {
	return (&NumericalStatDescriptionClient{config: nsd.config}).UpdateOne(nsd)
}

// Unwrap unwraps the NumericalStatDescription entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (nsd *NumericalStatDescription) Unwrap() *NumericalStatDescription {
	_tx, ok := nsd.config.driver.(*txDriver)
	if !ok {
		panic("ent: NumericalStatDescription is not a transactional entity")
	}
	nsd.config.driver = _tx.drv
	return nsd
}

// String implements the fmt.Stringer.
func (nsd *NumericalStatDescription) String() string {
	var builder strings.Builder
	builder.WriteString("NumericalStatDescription(")
	builder.WriteString(fmt.Sprintf("id=%v, ", nsd.ID))
	builder.WriteString("name=")
	builder.WriteString(nsd.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(nsd.Description)
	builder.WriteByte(')')
	return builder.String()
}

// NamedGame returns the Game named value or an error if the edge was not
// loaded in eager-loading with this name.
func (nsd *NumericalStatDescription) NamedGame(name string) ([]*Game, error) {
	if nsd.Edges.namedGame == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := nsd.Edges.namedGame[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (nsd *NumericalStatDescription) appendNamedGame(name string, edges ...*Game) {
	if nsd.Edges.namedGame == nil {
		nsd.Edges.namedGame = make(map[string][]*Game)
	}
	if len(edges) == 0 {
		nsd.Edges.namedGame[name] = []*Game{}
	} else {
		nsd.Edges.namedGame[name] = append(nsd.Edges.namedGame[name], edges...)
	}
}

// NamedNumericalStats returns the NumericalStats named value or an error if the edge was not
// loaded in eager-loading with this name.
func (nsd *NumericalStatDescription) NamedNumericalStats(name string) ([]*NumericalStat, error) {
	if nsd.Edges.namedNumericalStats == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := nsd.Edges.namedNumericalStats[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (nsd *NumericalStatDescription) appendNamedNumericalStats(name string, edges ...*NumericalStat) {
	if nsd.Edges.namedNumericalStats == nil {
		nsd.Edges.namedNumericalStats = make(map[string][]*NumericalStat)
	}
	if len(edges) == 0 {
		nsd.Edges.namedNumericalStats[name] = []*NumericalStat{}
	} else {
		nsd.Edges.namedNumericalStats[name] = append(nsd.Edges.namedNumericalStats[name], edges...)
	}
}

// NumericalStatDescriptions is a parsable slice of NumericalStatDescription.
type NumericalStatDescriptions []*NumericalStatDescription

func (nsd NumericalStatDescriptions) config(cfg config) {
	for _i := range nsd {
		nsd[_i].config = cfg
	}
}
