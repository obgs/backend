// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-boardgame-stats/backend/internal/ent/match"
	"github.com/open-boardgame-stats/backend/internal/ent/numericalstat"
	"github.com/open-boardgame-stats/backend/internal/ent/numericalstatdescription"
	"github.com/open-boardgame-stats/backend/internal/ent/player"
	"github.com/open-boardgame-stats/backend/internal/ent/predicate"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
)

// NumericalStatQuery is the builder for querying NumericalStat entities.
type NumericalStatQuery struct {
	config
	limit                        *int
	offset                       *int
	unique                       *bool
	order                        []OrderFunc
	fields                       []string
	predicates                   []predicate.NumericalStat
	withMatch                    *MatchQuery
	withNumericalStatDescription *NumericalStatDescriptionQuery
	withPlayer                   *PlayerQuery
	withFKs                      bool
	modifiers                    []func(*sql.Selector)
	loadTotal                    []func(context.Context, []*NumericalStat) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the NumericalStatQuery builder.
func (nsq *NumericalStatQuery) Where(ps ...predicate.NumericalStat) *NumericalStatQuery {
	nsq.predicates = append(nsq.predicates, ps...)
	return nsq
}

// Limit adds a limit step to the query.
func (nsq *NumericalStatQuery) Limit(limit int) *NumericalStatQuery {
	nsq.limit = &limit
	return nsq
}

// Offset adds an offset step to the query.
func (nsq *NumericalStatQuery) Offset(offset int) *NumericalStatQuery {
	nsq.offset = &offset
	return nsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (nsq *NumericalStatQuery) Unique(unique bool) *NumericalStatQuery {
	nsq.unique = &unique
	return nsq
}

// Order adds an order step to the query.
func (nsq *NumericalStatQuery) Order(o ...OrderFunc) *NumericalStatQuery {
	nsq.order = append(nsq.order, o...)
	return nsq
}

// QueryMatch chains the current query on the "match" edge.
func (nsq *NumericalStatQuery) QueryMatch() *MatchQuery {
	query := &MatchQuery{config: nsq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := nsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := nsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(numericalstat.Table, numericalstat.FieldID, selector),
			sqlgraph.To(match.Table, match.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, numericalstat.MatchTable, numericalstat.MatchColumn),
		)
		fromU = sqlgraph.SetNeighbors(nsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNumericalStatDescription chains the current query on the "numerical_stat_description" edge.
func (nsq *NumericalStatQuery) QueryNumericalStatDescription() *NumericalStatDescriptionQuery {
	query := &NumericalStatDescriptionQuery{config: nsq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := nsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := nsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(numericalstat.Table, numericalstat.FieldID, selector),
			sqlgraph.To(numericalstatdescription.Table, numericalstatdescription.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, numericalstat.NumericalStatDescriptionTable, numericalstat.NumericalStatDescriptionColumn),
		)
		fromU = sqlgraph.SetNeighbors(nsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPlayer chains the current query on the "player" edge.
func (nsq *NumericalStatQuery) QueryPlayer() *PlayerQuery {
	query := &PlayerQuery{config: nsq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := nsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := nsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(numericalstat.Table, numericalstat.FieldID, selector),
			sqlgraph.To(player.Table, player.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, numericalstat.PlayerTable, numericalstat.PlayerColumn),
		)
		fromU = sqlgraph.SetNeighbors(nsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first NumericalStat entity from the query.
// Returns a *NotFoundError when no NumericalStat was found.
func (nsq *NumericalStatQuery) First(ctx context.Context) (*NumericalStat, error) {
	nodes, err := nsq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{numericalstat.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (nsq *NumericalStatQuery) FirstX(ctx context.Context) *NumericalStat {
	node, err := nsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first NumericalStat ID from the query.
// Returns a *NotFoundError when no NumericalStat ID was found.
func (nsq *NumericalStatQuery) FirstID(ctx context.Context) (id guidgql.GUID, err error) {
	var ids []guidgql.GUID
	if ids, err = nsq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{numericalstat.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (nsq *NumericalStatQuery) FirstIDX(ctx context.Context) guidgql.GUID {
	id, err := nsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single NumericalStat entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one NumericalStat entity is found.
// Returns a *NotFoundError when no NumericalStat entities are found.
func (nsq *NumericalStatQuery) Only(ctx context.Context) (*NumericalStat, error) {
	nodes, err := nsq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{numericalstat.Label}
	default:
		return nil, &NotSingularError{numericalstat.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (nsq *NumericalStatQuery) OnlyX(ctx context.Context) *NumericalStat {
	node, err := nsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only NumericalStat ID in the query.
// Returns a *NotSingularError when more than one NumericalStat ID is found.
// Returns a *NotFoundError when no entities are found.
func (nsq *NumericalStatQuery) OnlyID(ctx context.Context) (id guidgql.GUID, err error) {
	var ids []guidgql.GUID
	if ids, err = nsq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{numericalstat.Label}
	default:
		err = &NotSingularError{numericalstat.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (nsq *NumericalStatQuery) OnlyIDX(ctx context.Context) guidgql.GUID {
	id, err := nsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of NumericalStats.
func (nsq *NumericalStatQuery) All(ctx context.Context) ([]*NumericalStat, error) {
	if err := nsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return nsq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (nsq *NumericalStatQuery) AllX(ctx context.Context) []*NumericalStat {
	nodes, err := nsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of NumericalStat IDs.
func (nsq *NumericalStatQuery) IDs(ctx context.Context) ([]guidgql.GUID, error) {
	var ids []guidgql.GUID
	if err := nsq.Select(numericalstat.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (nsq *NumericalStatQuery) IDsX(ctx context.Context) []guidgql.GUID {
	ids, err := nsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (nsq *NumericalStatQuery) Count(ctx context.Context) (int, error) {
	if err := nsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return nsq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (nsq *NumericalStatQuery) CountX(ctx context.Context) int {
	count, err := nsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (nsq *NumericalStatQuery) Exist(ctx context.Context) (bool, error) {
	if err := nsq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return nsq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (nsq *NumericalStatQuery) ExistX(ctx context.Context) bool {
	exist, err := nsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the NumericalStatQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (nsq *NumericalStatQuery) Clone() *NumericalStatQuery {
	if nsq == nil {
		return nil
	}
	return &NumericalStatQuery{
		config:                       nsq.config,
		limit:                        nsq.limit,
		offset:                       nsq.offset,
		order:                        append([]OrderFunc{}, nsq.order...),
		predicates:                   append([]predicate.NumericalStat{}, nsq.predicates...),
		withMatch:                    nsq.withMatch.Clone(),
		withNumericalStatDescription: nsq.withNumericalStatDescription.Clone(),
		withPlayer:                   nsq.withPlayer.Clone(),
		// clone intermediate query.
		sql:    nsq.sql.Clone(),
		path:   nsq.path,
		unique: nsq.unique,
	}
}

// WithMatch tells the query-builder to eager-load the nodes that are connected to
// the "match" edge. The optional arguments are used to configure the query builder of the edge.
func (nsq *NumericalStatQuery) WithMatch(opts ...func(*MatchQuery)) *NumericalStatQuery {
	query := &MatchQuery{config: nsq.config}
	for _, opt := range opts {
		opt(query)
	}
	nsq.withMatch = query
	return nsq
}

// WithNumericalStatDescription tells the query-builder to eager-load the nodes that are connected to
// the "numerical_stat_description" edge. The optional arguments are used to configure the query builder of the edge.
func (nsq *NumericalStatQuery) WithNumericalStatDescription(opts ...func(*NumericalStatDescriptionQuery)) *NumericalStatQuery {
	query := &NumericalStatDescriptionQuery{config: nsq.config}
	for _, opt := range opts {
		opt(query)
	}
	nsq.withNumericalStatDescription = query
	return nsq
}

// WithPlayer tells the query-builder to eager-load the nodes that are connected to
// the "player" edge. The optional arguments are used to configure the query builder of the edge.
func (nsq *NumericalStatQuery) WithPlayer(opts ...func(*PlayerQuery)) *NumericalStatQuery {
	query := &PlayerQuery{config: nsq.config}
	for _, opt := range opts {
		opt(query)
	}
	nsq.withPlayer = query
	return nsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Value float64 `json:"value,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.NumericalStat.Query().
//		GroupBy(numericalstat.FieldValue).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (nsq *NumericalStatQuery) GroupBy(field string, fields ...string) *NumericalStatGroupBy {
	grbuild := &NumericalStatGroupBy{config: nsq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := nsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return nsq.sqlQuery(ctx), nil
	}
	grbuild.label = numericalstat.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Value float64 `json:"value,omitempty"`
//	}
//
//	client.NumericalStat.Query().
//		Select(numericalstat.FieldValue).
//		Scan(ctx, &v)
func (nsq *NumericalStatQuery) Select(fields ...string) *NumericalStatSelect {
	nsq.fields = append(nsq.fields, fields...)
	selbuild := &NumericalStatSelect{NumericalStatQuery: nsq}
	selbuild.label = numericalstat.Label
	selbuild.flds, selbuild.scan = &nsq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a NumericalStatSelect configured with the given aggregations.
func (nsq *NumericalStatQuery) Aggregate(fns ...AggregateFunc) *NumericalStatSelect {
	return nsq.Select().Aggregate(fns...)
}

func (nsq *NumericalStatQuery) prepareQuery(ctx context.Context) error {
	for _, f := range nsq.fields {
		if !numericalstat.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if nsq.path != nil {
		prev, err := nsq.path(ctx)
		if err != nil {
			return err
		}
		nsq.sql = prev
	}
	return nil
}

func (nsq *NumericalStatQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*NumericalStat, error) {
	var (
		nodes       = []*NumericalStat{}
		withFKs     = nsq.withFKs
		_spec       = nsq.querySpec()
		loadedTypes = [3]bool{
			nsq.withMatch != nil,
			nsq.withNumericalStatDescription != nil,
			nsq.withPlayer != nil,
		}
	)
	if nsq.withMatch != nil || nsq.withNumericalStatDescription != nil || nsq.withPlayer != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, numericalstat.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*NumericalStat).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &NumericalStat{config: nsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(nsq.modifiers) > 0 {
		_spec.Modifiers = nsq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, nsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := nsq.withMatch; query != nil {
		if err := nsq.loadMatch(ctx, query, nodes, nil,
			func(n *NumericalStat, e *Match) { n.Edges.Match = e }); err != nil {
			return nil, err
		}
	}
	if query := nsq.withNumericalStatDescription; query != nil {
		if err := nsq.loadNumericalStatDescription(ctx, query, nodes, nil,
			func(n *NumericalStat, e *NumericalStatDescription) { n.Edges.NumericalStatDescription = e }); err != nil {
			return nil, err
		}
	}
	if query := nsq.withPlayer; query != nil {
		if err := nsq.loadPlayer(ctx, query, nodes, nil,
			func(n *NumericalStat, e *Player) { n.Edges.Player = e }); err != nil {
			return nil, err
		}
	}
	for i := range nsq.loadTotal {
		if err := nsq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (nsq *NumericalStatQuery) loadMatch(ctx context.Context, query *MatchQuery, nodes []*NumericalStat, init func(*NumericalStat), assign func(*NumericalStat, *Match)) error {
	ids := make([]guidgql.GUID, 0, len(nodes))
	nodeids := make(map[guidgql.GUID][]*NumericalStat)
	for i := range nodes {
		if nodes[i].match_numerical_stats == nil {
			continue
		}
		fk := *nodes[i].match_numerical_stats
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(match.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "match_numerical_stats" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (nsq *NumericalStatQuery) loadNumericalStatDescription(ctx context.Context, query *NumericalStatDescriptionQuery, nodes []*NumericalStat, init func(*NumericalStat), assign func(*NumericalStat, *NumericalStatDescription)) error {
	ids := make([]guidgql.GUID, 0, len(nodes))
	nodeids := make(map[guidgql.GUID][]*NumericalStat)
	for i := range nodes {
		if nodes[i].numerical_stat_description_numerical_stats == nil {
			continue
		}
		fk := *nodes[i].numerical_stat_description_numerical_stats
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(numericalstatdescription.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "numerical_stat_description_numerical_stats" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (nsq *NumericalStatQuery) loadPlayer(ctx context.Context, query *PlayerQuery, nodes []*NumericalStat, init func(*NumericalStat), assign func(*NumericalStat, *Player)) error {
	ids := make([]guidgql.GUID, 0, len(nodes))
	nodeids := make(map[guidgql.GUID][]*NumericalStat)
	for i := range nodes {
		if nodes[i].player_numerical_stats == nil {
			continue
		}
		fk := *nodes[i].player_numerical_stats
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(player.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "player_numerical_stats" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (nsq *NumericalStatQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := nsq.querySpec()
	if len(nsq.modifiers) > 0 {
		_spec.Modifiers = nsq.modifiers
	}
	_spec.Node.Columns = nsq.fields
	if len(nsq.fields) > 0 {
		_spec.Unique = nsq.unique != nil && *nsq.unique
	}
	return sqlgraph.CountNodes(ctx, nsq.driver, _spec)
}

func (nsq *NumericalStatQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := nsq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (nsq *NumericalStatQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   numericalstat.Table,
			Columns: numericalstat.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: numericalstat.FieldID,
			},
		},
		From:   nsq.sql,
		Unique: true,
	}
	if unique := nsq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := nsq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, numericalstat.FieldID)
		for i := range fields {
			if fields[i] != numericalstat.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := nsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := nsq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := nsq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := nsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (nsq *NumericalStatQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(nsq.driver.Dialect())
	t1 := builder.Table(numericalstat.Table)
	columns := nsq.fields
	if len(columns) == 0 {
		columns = numericalstat.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if nsq.sql != nil {
		selector = nsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if nsq.unique != nil && *nsq.unique {
		selector.Distinct()
	}
	for _, p := range nsq.predicates {
		p(selector)
	}
	for _, p := range nsq.order {
		p(selector)
	}
	if offset := nsq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := nsq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// NumericalStatGroupBy is the group-by builder for NumericalStat entities.
type NumericalStatGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (nsgb *NumericalStatGroupBy) Aggregate(fns ...AggregateFunc) *NumericalStatGroupBy {
	nsgb.fns = append(nsgb.fns, fns...)
	return nsgb
}

// Scan applies the group-by query and scans the result into the given value.
func (nsgb *NumericalStatGroupBy) Scan(ctx context.Context, v any) error {
	query, err := nsgb.path(ctx)
	if err != nil {
		return err
	}
	nsgb.sql = query
	return nsgb.sqlScan(ctx, v)
}

func (nsgb *NumericalStatGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range nsgb.fields {
		if !numericalstat.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := nsgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := nsgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (nsgb *NumericalStatGroupBy) sqlQuery() *sql.Selector {
	selector := nsgb.sql.Select()
	aggregation := make([]string, 0, len(nsgb.fns))
	for _, fn := range nsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(nsgb.fields)+len(nsgb.fns))
		for _, f := range nsgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(nsgb.fields...)...)
}

// NumericalStatSelect is the builder for selecting fields of NumericalStat entities.
type NumericalStatSelect struct {
	*NumericalStatQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (nss *NumericalStatSelect) Aggregate(fns ...AggregateFunc) *NumericalStatSelect {
	nss.fns = append(nss.fns, fns...)
	return nss
}

// Scan applies the selector query and scans the result into the given value.
func (nss *NumericalStatSelect) Scan(ctx context.Context, v any) error {
	if err := nss.prepareQuery(ctx); err != nil {
		return err
	}
	nss.sql = nss.NumericalStatQuery.sqlQuery(ctx)
	return nss.sqlScan(ctx, v)
}

func (nss *NumericalStatSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(nss.fns))
	for _, fn := range nss.fns {
		aggregation = append(aggregation, fn(nss.sql))
	}
	switch n := len(*nss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		nss.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		nss.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := nss.sql.Query()
	if err := nss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
