// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-boardgame-stats/backend/internal/ent/game"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/stat"
	"github.com/open-boardgame-stats/backend/internal/ent/statdescription"
	"github.com/open-boardgame-stats/backend/internal/ent/statistic"
)

// StatDescriptionCreate is the builder for creating a StatDescription entity.
type StatDescriptionCreate struct {
	config
	mutation *StatDescriptionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetType sets the "type" field.
func (sdc *StatDescriptionCreate) SetType(st stat.StatType) *StatDescriptionCreate {
	sdc.mutation.SetType(st)
	return sdc
}

// SetName sets the "name" field.
func (sdc *StatDescriptionCreate) SetName(s string) *StatDescriptionCreate {
	sdc.mutation.SetName(s)
	return sdc
}

// SetDescription sets the "description" field.
func (sdc *StatDescriptionCreate) SetDescription(s string) *StatDescriptionCreate {
	sdc.mutation.SetDescription(s)
	return sdc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (sdc *StatDescriptionCreate) SetNillableDescription(s *string) *StatDescriptionCreate {
	if s != nil {
		sdc.SetDescription(*s)
	}
	return sdc
}

// SetMetadata sets the "metadata" field.
func (sdc *StatDescriptionCreate) SetMetadata(s string) *StatDescriptionCreate {
	sdc.mutation.SetMetadata(s)
	return sdc
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (sdc *StatDescriptionCreate) SetNillableMetadata(s *string) *StatDescriptionCreate {
	if s != nil {
		sdc.SetMetadata(*s)
	}
	return sdc
}

// SetOrderNumber sets the "order_number" field.
func (sdc *StatDescriptionCreate) SetOrderNumber(i int) *StatDescriptionCreate {
	sdc.mutation.SetOrderNumber(i)
	return sdc
}

// SetID sets the "id" field.
func (sdc *StatDescriptionCreate) SetID(gu guidgql.GUID) *StatDescriptionCreate {
	sdc.mutation.SetID(gu)
	return sdc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sdc *StatDescriptionCreate) SetNillableID(gu *guidgql.GUID) *StatDescriptionCreate {
	if gu != nil {
		sdc.SetID(*gu)
	}
	return sdc
}

// AddGameIDs adds the "game" edge to the Game entity by IDs.
func (sdc *StatDescriptionCreate) AddGameIDs(ids ...guidgql.GUID) *StatDescriptionCreate {
	sdc.mutation.AddGameIDs(ids...)
	return sdc
}

// AddGame adds the "game" edges to the Game entity.
func (sdc *StatDescriptionCreate) AddGame(g ...*Game) *StatDescriptionCreate {
	ids := make([]guidgql.GUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return sdc.AddGameIDs(ids...)
}

// AddStatIDs adds the "stats" edge to the Statistic entity by IDs.
func (sdc *StatDescriptionCreate) AddStatIDs(ids ...guidgql.GUID) *StatDescriptionCreate {
	sdc.mutation.AddStatIDs(ids...)
	return sdc
}

// AddStats adds the "stats" edges to the Statistic entity.
func (sdc *StatDescriptionCreate) AddStats(s ...*Statistic) *StatDescriptionCreate {
	ids := make([]guidgql.GUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sdc.AddStatIDs(ids...)
}

// Mutation returns the StatDescriptionMutation object of the builder.
func (sdc *StatDescriptionCreate) Mutation() *StatDescriptionMutation {
	return sdc.mutation
}

// Save creates the StatDescription in the database.
func (sdc *StatDescriptionCreate) Save(ctx context.Context) (*StatDescription, error) {
	sdc.defaults()
	return withHooks[*StatDescription, StatDescriptionMutation](ctx, sdc.sqlSave, sdc.mutation, sdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sdc *StatDescriptionCreate) SaveX(ctx context.Context) *StatDescription {
	v, err := sdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sdc *StatDescriptionCreate) Exec(ctx context.Context) error {
	_, err := sdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdc *StatDescriptionCreate) ExecX(ctx context.Context) {
	if err := sdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sdc *StatDescriptionCreate) defaults() {
	if _, ok := sdc.mutation.Description(); !ok {
		v := statdescription.DefaultDescription
		sdc.mutation.SetDescription(v)
	}
	if _, ok := sdc.mutation.ID(); !ok {
		v := statdescription.DefaultID()
		sdc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sdc *StatDescriptionCreate) check() error {
	if _, ok := sdc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "StatDescription.type"`)}
	}
	if v, ok := sdc.mutation.GetType(); ok {
		if err := statdescription.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "StatDescription.type": %w`, err)}
		}
	}
	if _, ok := sdc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "StatDescription.name"`)}
	}
	if v, ok := sdc.mutation.Name(); ok {
		if err := statdescription.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "StatDescription.name": %w`, err)}
		}
	}
	if _, ok := sdc.mutation.OrderNumber(); !ok {
		return &ValidationError{Name: "order_number", err: errors.New(`ent: missing required field "StatDescription.order_number"`)}
	}
	return nil
}

func (sdc *StatDescriptionCreate) sqlSave(ctx context.Context) (*StatDescription, error) {
	if err := sdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*guidgql.GUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sdc.mutation.id = &_node.ID
	sdc.mutation.done = true
	return _node, nil
}

func (sdc *StatDescriptionCreate) createSpec() (*StatDescription, *sqlgraph.CreateSpec) {
	var (
		_node = &StatDescription{config: sdc.config}
		_spec = sqlgraph.NewCreateSpec(statdescription.Table, sqlgraph.NewFieldSpec(statdescription.FieldID, field.TypeString))
	)
	_spec.OnConflict = sdc.conflict
	if id, ok := sdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sdc.mutation.GetType(); ok {
		_spec.SetField(statdescription.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := sdc.mutation.Name(); ok {
		_spec.SetField(statdescription.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sdc.mutation.Description(); ok {
		_spec.SetField(statdescription.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := sdc.mutation.Metadata(); ok {
		_spec.SetField(statdescription.FieldMetadata, field.TypeString, value)
		_node.Metadata = value
	}
	if value, ok := sdc.mutation.OrderNumber(); ok {
		_spec.SetField(statdescription.FieldOrderNumber, field.TypeInt, value)
		_node.OrderNumber = value
	}
	if nodes := sdc.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   statdescription.GameTable,
			Columns: statdescription.GamePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sdc.mutation.StatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   statdescription.StatsTable,
			Columns: []string{statdescription.StatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statistic.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.StatDescription.Create().
//		SetType(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StatDescriptionUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (sdc *StatDescriptionCreate) OnConflict(opts ...sql.ConflictOption) *StatDescriptionUpsertOne {
	sdc.conflict = opts
	return &StatDescriptionUpsertOne{
		create: sdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.StatDescription.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sdc *StatDescriptionCreate) OnConflictColumns(columns ...string) *StatDescriptionUpsertOne {
	sdc.conflict = append(sdc.conflict, sql.ConflictColumns(columns...))
	return &StatDescriptionUpsertOne{
		create: sdc,
	}
}

type (
	// StatDescriptionUpsertOne is the builder for "upsert"-ing
	//  one StatDescription node.
	StatDescriptionUpsertOne struct {
		create *StatDescriptionCreate
	}

	// StatDescriptionUpsert is the "OnConflict" setter.
	StatDescriptionUpsert struct {
		*sql.UpdateSet
	}
)

// SetType sets the "type" field.
func (u *StatDescriptionUpsert) SetType(v stat.StatType) *StatDescriptionUpsert {
	u.Set(statdescription.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *StatDescriptionUpsert) UpdateType() *StatDescriptionUpsert {
	u.SetExcluded(statdescription.FieldType)
	return u
}

// SetName sets the "name" field.
func (u *StatDescriptionUpsert) SetName(v string) *StatDescriptionUpsert {
	u.Set(statdescription.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *StatDescriptionUpsert) UpdateName() *StatDescriptionUpsert {
	u.SetExcluded(statdescription.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *StatDescriptionUpsert) SetDescription(v string) *StatDescriptionUpsert {
	u.Set(statdescription.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *StatDescriptionUpsert) UpdateDescription() *StatDescriptionUpsert {
	u.SetExcluded(statdescription.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *StatDescriptionUpsert) ClearDescription() *StatDescriptionUpsert {
	u.SetNull(statdescription.FieldDescription)
	return u
}

// SetMetadata sets the "metadata" field.
func (u *StatDescriptionUpsert) SetMetadata(v string) *StatDescriptionUpsert {
	u.Set(statdescription.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *StatDescriptionUpsert) UpdateMetadata() *StatDescriptionUpsert {
	u.SetExcluded(statdescription.FieldMetadata)
	return u
}

// ClearMetadata clears the value of the "metadata" field.
func (u *StatDescriptionUpsert) ClearMetadata() *StatDescriptionUpsert {
	u.SetNull(statdescription.FieldMetadata)
	return u
}

// SetOrderNumber sets the "order_number" field.
func (u *StatDescriptionUpsert) SetOrderNumber(v int) *StatDescriptionUpsert {
	u.Set(statdescription.FieldOrderNumber, v)
	return u
}

// UpdateOrderNumber sets the "order_number" field to the value that was provided on create.
func (u *StatDescriptionUpsert) UpdateOrderNumber() *StatDescriptionUpsert {
	u.SetExcluded(statdescription.FieldOrderNumber)
	return u
}

// AddOrderNumber adds v to the "order_number" field.
func (u *StatDescriptionUpsert) AddOrderNumber(v int) *StatDescriptionUpsert {
	u.Add(statdescription.FieldOrderNumber, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.StatDescription.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(statdescription.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *StatDescriptionUpsertOne) UpdateNewValues() *StatDescriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(statdescription.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.StatDescription.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *StatDescriptionUpsertOne) Ignore() *StatDescriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StatDescriptionUpsertOne) DoNothing() *StatDescriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StatDescriptionCreate.OnConflict
// documentation for more info.
func (u *StatDescriptionUpsertOne) Update(set func(*StatDescriptionUpsert)) *StatDescriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StatDescriptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *StatDescriptionUpsertOne) SetType(v stat.StatType) *StatDescriptionUpsertOne {
	return u.Update(func(s *StatDescriptionUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *StatDescriptionUpsertOne) UpdateType() *StatDescriptionUpsertOne {
	return u.Update(func(s *StatDescriptionUpsert) {
		s.UpdateType()
	})
}

// SetName sets the "name" field.
func (u *StatDescriptionUpsertOne) SetName(v string) *StatDescriptionUpsertOne {
	return u.Update(func(s *StatDescriptionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *StatDescriptionUpsertOne) UpdateName() *StatDescriptionUpsertOne {
	return u.Update(func(s *StatDescriptionUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *StatDescriptionUpsertOne) SetDescription(v string) *StatDescriptionUpsertOne {
	return u.Update(func(s *StatDescriptionUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *StatDescriptionUpsertOne) UpdateDescription() *StatDescriptionUpsertOne {
	return u.Update(func(s *StatDescriptionUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *StatDescriptionUpsertOne) ClearDescription() *StatDescriptionUpsertOne {
	return u.Update(func(s *StatDescriptionUpsert) {
		s.ClearDescription()
	})
}

// SetMetadata sets the "metadata" field.
func (u *StatDescriptionUpsertOne) SetMetadata(v string) *StatDescriptionUpsertOne {
	return u.Update(func(s *StatDescriptionUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *StatDescriptionUpsertOne) UpdateMetadata() *StatDescriptionUpsertOne {
	return u.Update(func(s *StatDescriptionUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *StatDescriptionUpsertOne) ClearMetadata() *StatDescriptionUpsertOne {
	return u.Update(func(s *StatDescriptionUpsert) {
		s.ClearMetadata()
	})
}

// SetOrderNumber sets the "order_number" field.
func (u *StatDescriptionUpsertOne) SetOrderNumber(v int) *StatDescriptionUpsertOne {
	return u.Update(func(s *StatDescriptionUpsert) {
		s.SetOrderNumber(v)
	})
}

// AddOrderNumber adds v to the "order_number" field.
func (u *StatDescriptionUpsertOne) AddOrderNumber(v int) *StatDescriptionUpsertOne {
	return u.Update(func(s *StatDescriptionUpsert) {
		s.AddOrderNumber(v)
	})
}

// UpdateOrderNumber sets the "order_number" field to the value that was provided on create.
func (u *StatDescriptionUpsertOne) UpdateOrderNumber() *StatDescriptionUpsertOne {
	return u.Update(func(s *StatDescriptionUpsert) {
		s.UpdateOrderNumber()
	})
}

// Exec executes the query.
func (u *StatDescriptionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for StatDescriptionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StatDescriptionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *StatDescriptionUpsertOne) ID(ctx context.Context) (id guidgql.GUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: StatDescriptionUpsertOne.ID is not supported by MySQL driver. Use StatDescriptionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *StatDescriptionUpsertOne) IDX(ctx context.Context) guidgql.GUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// StatDescriptionCreateBulk is the builder for creating many StatDescription entities in bulk.
type StatDescriptionCreateBulk struct {
	config
	builders []*StatDescriptionCreate
	conflict []sql.ConflictOption
}

// Save creates the StatDescription entities in the database.
func (sdcb *StatDescriptionCreateBulk) Save(ctx context.Context) ([]*StatDescription, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sdcb.builders))
	nodes := make([]*StatDescription, len(sdcb.builders))
	mutators := make([]Mutator, len(sdcb.builders))
	for i := range sdcb.builders {
		func(i int, root context.Context) {
			builder := sdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StatDescriptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = sdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sdcb *StatDescriptionCreateBulk) SaveX(ctx context.Context) []*StatDescription {
	v, err := sdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sdcb *StatDescriptionCreateBulk) Exec(ctx context.Context) error {
	_, err := sdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sdcb *StatDescriptionCreateBulk) ExecX(ctx context.Context) {
	if err := sdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.StatDescription.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StatDescriptionUpsert) {
//			SetType(v+v).
//		}).
//		Exec(ctx)
func (sdcb *StatDescriptionCreateBulk) OnConflict(opts ...sql.ConflictOption) *StatDescriptionUpsertBulk {
	sdcb.conflict = opts
	return &StatDescriptionUpsertBulk{
		create: sdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.StatDescription.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sdcb *StatDescriptionCreateBulk) OnConflictColumns(columns ...string) *StatDescriptionUpsertBulk {
	sdcb.conflict = append(sdcb.conflict, sql.ConflictColumns(columns...))
	return &StatDescriptionUpsertBulk{
		create: sdcb,
	}
}

// StatDescriptionUpsertBulk is the builder for "upsert"-ing
// a bulk of StatDescription nodes.
type StatDescriptionUpsertBulk struct {
	create *StatDescriptionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.StatDescription.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(statdescription.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *StatDescriptionUpsertBulk) UpdateNewValues() *StatDescriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(statdescription.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.StatDescription.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *StatDescriptionUpsertBulk) Ignore() *StatDescriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StatDescriptionUpsertBulk) DoNothing() *StatDescriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StatDescriptionCreateBulk.OnConflict
// documentation for more info.
func (u *StatDescriptionUpsertBulk) Update(set func(*StatDescriptionUpsert)) *StatDescriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StatDescriptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetType sets the "type" field.
func (u *StatDescriptionUpsertBulk) SetType(v stat.StatType) *StatDescriptionUpsertBulk {
	return u.Update(func(s *StatDescriptionUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *StatDescriptionUpsertBulk) UpdateType() *StatDescriptionUpsertBulk {
	return u.Update(func(s *StatDescriptionUpsert) {
		s.UpdateType()
	})
}

// SetName sets the "name" field.
func (u *StatDescriptionUpsertBulk) SetName(v string) *StatDescriptionUpsertBulk {
	return u.Update(func(s *StatDescriptionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *StatDescriptionUpsertBulk) UpdateName() *StatDescriptionUpsertBulk {
	return u.Update(func(s *StatDescriptionUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *StatDescriptionUpsertBulk) SetDescription(v string) *StatDescriptionUpsertBulk {
	return u.Update(func(s *StatDescriptionUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *StatDescriptionUpsertBulk) UpdateDescription() *StatDescriptionUpsertBulk {
	return u.Update(func(s *StatDescriptionUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *StatDescriptionUpsertBulk) ClearDescription() *StatDescriptionUpsertBulk {
	return u.Update(func(s *StatDescriptionUpsert) {
		s.ClearDescription()
	})
}

// SetMetadata sets the "metadata" field.
func (u *StatDescriptionUpsertBulk) SetMetadata(v string) *StatDescriptionUpsertBulk {
	return u.Update(func(s *StatDescriptionUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *StatDescriptionUpsertBulk) UpdateMetadata() *StatDescriptionUpsertBulk {
	return u.Update(func(s *StatDescriptionUpsert) {
		s.UpdateMetadata()
	})
}

// ClearMetadata clears the value of the "metadata" field.
func (u *StatDescriptionUpsertBulk) ClearMetadata() *StatDescriptionUpsertBulk {
	return u.Update(func(s *StatDescriptionUpsert) {
		s.ClearMetadata()
	})
}

// SetOrderNumber sets the "order_number" field.
func (u *StatDescriptionUpsertBulk) SetOrderNumber(v int) *StatDescriptionUpsertBulk {
	return u.Update(func(s *StatDescriptionUpsert) {
		s.SetOrderNumber(v)
	})
}

// AddOrderNumber adds v to the "order_number" field.
func (u *StatDescriptionUpsertBulk) AddOrderNumber(v int) *StatDescriptionUpsertBulk {
	return u.Update(func(s *StatDescriptionUpsert) {
		s.AddOrderNumber(v)
	})
}

// UpdateOrderNumber sets the "order_number" field to the value that was provided on create.
func (u *StatDescriptionUpsertBulk) UpdateOrderNumber() *StatDescriptionUpsertBulk {
	return u.Update(func(s *StatDescriptionUpsert) {
		s.UpdateOrderNumber()
	})
}

// Exec executes the query.
func (u *StatDescriptionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the StatDescriptionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for StatDescriptionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StatDescriptionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
