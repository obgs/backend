// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/open-boardgame-stats/backend/internal/ent/enumstat"
	"github.com/open-boardgame-stats/backend/internal/ent/enumstatdescription"
	"github.com/open-boardgame-stats/backend/internal/ent/match"
	"github.com/open-boardgame-stats/backend/internal/ent/player"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
)

// EnumStat is the model entity for the EnumStat schema.
type EnumStat struct {
	config `json:"-"`
	// ID of the ent.
	ID guidgql.GUID `json:"id,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EnumStatQuery when eager-loading is set.
	Edges                            EnumStatEdges `json:"edges"`
	enum_stat_description_enum_stats *guidgql.GUID
	match_enum_stats                 *guidgql.GUID
	player_enum_stats                *guidgql.GUID
}

// EnumStatEdges holds the relations/edges for other nodes in the graph.
type EnumStatEdges struct {
	// Match holds the value of the match edge.
	Match *Match `json:"match,omitempty"`
	// EnumStatDescription holds the value of the enum_stat_description edge.
	EnumStatDescription *EnumStatDescription `json:"enum_stat_description,omitempty"`
	// Player holds the value of the player edge.
	Player *Player `json:"player,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int
}

// MatchOrErr returns the Match value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnumStatEdges) MatchOrErr() (*Match, error) {
	if e.loadedTypes[0] {
		if e.Match == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: match.Label}
		}
		return e.Match, nil
	}
	return nil, &NotLoadedError{edge: "match"}
}

// EnumStatDescriptionOrErr returns the EnumStatDescription value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnumStatEdges) EnumStatDescriptionOrErr() (*EnumStatDescription, error) {
	if e.loadedTypes[1] {
		if e.EnumStatDescription == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: enumstatdescription.Label}
		}
		return e.EnumStatDescription, nil
	}
	return nil, &NotLoadedError{edge: "enum_stat_description"}
}

// PlayerOrErr returns the Player value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EnumStatEdges) PlayerOrErr() (*Player, error) {
	if e.loadedTypes[2] {
		if e.Player == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: player.Label}
		}
		return e.Player, nil
	}
	return nil, &NotLoadedError{edge: "player"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EnumStat) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case enumstat.FieldID:
			values[i] = new(guidgql.GUID)
		case enumstat.FieldValue:
			values[i] = new(sql.NullString)
		case enumstat.ForeignKeys[0]: // enum_stat_description_enum_stats
			values[i] = &sql.NullScanner{S: new(guidgql.GUID)}
		case enumstat.ForeignKeys[1]: // match_enum_stats
			values[i] = &sql.NullScanner{S: new(guidgql.GUID)}
		case enumstat.ForeignKeys[2]: // player_enum_stats
			values[i] = &sql.NullScanner{S: new(guidgql.GUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type EnumStat", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EnumStat fields.
func (es *EnumStat) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case enumstat.FieldID:
			if value, ok := values[i].(*guidgql.GUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				es.ID = *value
			}
		case enumstat.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				es.Value = value.String
			}
		case enumstat.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field enum_stat_description_enum_stats", values[i])
			} else if value.Valid {
				es.enum_stat_description_enum_stats = new(guidgql.GUID)
				*es.enum_stat_description_enum_stats = *value.S.(*guidgql.GUID)
			}
		case enumstat.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field match_enum_stats", values[i])
			} else if value.Valid {
				es.match_enum_stats = new(guidgql.GUID)
				*es.match_enum_stats = *value.S.(*guidgql.GUID)
			}
		case enumstat.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field player_enum_stats", values[i])
			} else if value.Valid {
				es.player_enum_stats = new(guidgql.GUID)
				*es.player_enum_stats = *value.S.(*guidgql.GUID)
			}
		}
	}
	return nil
}

// QueryMatch queries the "match" edge of the EnumStat entity.
func (es *EnumStat) QueryMatch() *MatchQuery {
	return (&EnumStatClient{config: es.config}).QueryMatch(es)
}

// QueryEnumStatDescription queries the "enum_stat_description" edge of the EnumStat entity.
func (es *EnumStat) QueryEnumStatDescription() *EnumStatDescriptionQuery {
	return (&EnumStatClient{config: es.config}).QueryEnumStatDescription(es)
}

// QueryPlayer queries the "player" edge of the EnumStat entity.
func (es *EnumStat) QueryPlayer() *PlayerQuery {
	return (&EnumStatClient{config: es.config}).QueryPlayer(es)
}

// Update returns a builder for updating this EnumStat.
// Note that you need to call EnumStat.Unwrap() before calling this method if this EnumStat
// was returned from a transaction, and the transaction was committed or rolled back.
func (es *EnumStat) Update() *EnumStatUpdateOne {
	return (&EnumStatClient{config: es.config}).UpdateOne(es)
}

// Unwrap unwraps the EnumStat entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (es *EnumStat) Unwrap() *EnumStat {
	_tx, ok := es.config.driver.(*txDriver)
	if !ok {
		panic("ent: EnumStat is not a transactional entity")
	}
	es.config.driver = _tx.drv
	return es
}

// String implements the fmt.Stringer.
func (es *EnumStat) String() string {
	var builder strings.Builder
	builder.WriteString("EnumStat(")
	builder.WriteString(fmt.Sprintf("id=%v, ", es.ID))
	builder.WriteString("value=")
	builder.WriteString(es.Value)
	builder.WriteByte(')')
	return builder.String()
}

// EnumStats is a parsable slice of EnumStat.
type EnumStats []*EnumStat

func (es EnumStats) config(cfg config) {
	for _i := range es {
		es[_i].config = cfg
	}
}
