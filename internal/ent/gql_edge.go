// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (es *EnumStat) Match(ctx context.Context) (*Match, error) {
	result, err := es.Edges.MatchOrErr()
	if IsNotLoaded(err) {
		result, err = es.QueryMatch().Only(ctx)
	}
	return result, err
}

func (es *EnumStat) EnumStatDescription(ctx context.Context) (*EnumStatDescription, error) {
	result, err := es.Edges.EnumStatDescriptionOrErr()
	if IsNotLoaded(err) {
		result, err = es.QueryEnumStatDescription().Only(ctx)
	}
	return result, err
}

func (es *EnumStat) Player(ctx context.Context) (*Player, error) {
	result, err := es.Edges.PlayerOrErr()
	if IsNotLoaded(err) {
		result, err = es.QueryPlayer().Only(ctx)
	}
	return result, err
}

func (esd *EnumStatDescription) EnumStats(ctx context.Context) (result []*EnumStat, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = esd.NamedEnumStats(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = esd.Edges.EnumStatsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = esd.QueryEnumStats().All(ctx)
	}
	return result, err
}

func (ga *Game) Author(ctx context.Context) (*User, error) {
	result, err := ga.Edges.AuthorOrErr()
	if IsNotLoaded(err) {
		result, err = ga.QueryAuthor().Only(ctx)
	}
	return result, err
}

func (ga *Game) NumericalStatDescriptions(ctx context.Context) (result []*NumericalStatDescription, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ga.NamedNumericalStatDescriptions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ga.Edges.NumericalStatDescriptionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ga.QueryNumericalStatDescriptions().All(ctx)
	}
	return result, err
}

func (ga *Game) EnumStatDescriptions(ctx context.Context) (result []*EnumStatDescription, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ga.NamedEnumStatDescriptions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ga.Edges.EnumStatDescriptionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ga.QueryEnumStatDescriptions().All(ctx)
	}
	return result, err
}

func (gr *Group) Settings(ctx context.Context) (*GroupSettings, error) {
	result, err := gr.Edges.SettingsOrErr()
	if IsNotLoaded(err) {
		result, err = gr.QuerySettings().Only(ctx)
	}
	return result, err
}

func (gr *Group) Members(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, where *GroupMembershipWhereInput,
) (*GroupMembershipConnection, error) {
	opts := []GroupMembershipPaginateOption{
		WithGroupMembershipFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := gr.Edges.totalCount[1][alias]
	if nodes, err := gr.NamedMembers(alias); err == nil || hasTotalCount {
		pager, err := newGroupMembershipPager(opts)
		if err != nil {
			return nil, err
		}
		conn := &GroupMembershipConnection{Edges: []*GroupMembershipEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return gr.QueryMembers().Paginate(ctx, after, first, before, last, opts...)
}

func (gr *Group) Applications(ctx context.Context) (result []*GroupMembershipApplication, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = gr.NamedApplications(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = gr.Edges.ApplicationsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = gr.QueryApplications().All(ctx)
	}
	return result, err
}

func (gm *GroupMembership) Group(ctx context.Context) (*Group, error) {
	result, err := gm.Edges.GroupOrErr()
	if IsNotLoaded(err) {
		result, err = gm.QueryGroup().Only(ctx)
	}
	return result, err
}

func (gm *GroupMembership) User(ctx context.Context) (*User, error) {
	result, err := gm.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = gm.QueryUser().Only(ctx)
	}
	return result, err
}

func (gma *GroupMembershipApplication) User(ctx context.Context) (*User, error) {
	result, err := gma.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = gma.QueryUser().Only(ctx)
	}
	return result, err
}

func (gma *GroupMembershipApplication) Group(ctx context.Context) (*Group, error) {
	result, err := gma.Edges.GroupOrErr()
	if IsNotLoaded(err) {
		result, err = gma.QueryGroup().Only(ctx)
	}
	return result, err
}

func (m *Match) Game(ctx context.Context) (*Game, error) {
	result, err := m.Edges.GameOrErr()
	if IsNotLoaded(err) {
		result, err = m.QueryGame().Only(ctx)
	}
	return result, err
}

func (m *Match) Players(ctx context.Context) (result []*Player, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = m.NamedPlayers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = m.Edges.PlayersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = m.QueryPlayers().All(ctx)
	}
	return result, err
}

func (m *Match) NumericalStats(ctx context.Context) (result []*NumericalStat, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = m.NamedNumericalStats(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = m.Edges.NumericalStatsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = m.QueryNumericalStats().All(ctx)
	}
	return result, err
}

func (m *Match) EnumStats(ctx context.Context) (result []*EnumStat, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = m.NamedEnumStats(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = m.Edges.EnumStatsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = m.QueryEnumStats().All(ctx)
	}
	return result, err
}

func (ns *NumericalStat) Match(ctx context.Context) (*Match, error) {
	result, err := ns.Edges.MatchOrErr()
	if IsNotLoaded(err) {
		result, err = ns.QueryMatch().Only(ctx)
	}
	return result, err
}

func (ns *NumericalStat) NumericalStatDescription(ctx context.Context) (*NumericalStatDescription, error) {
	result, err := ns.Edges.NumericalStatDescriptionOrErr()
	if IsNotLoaded(err) {
		result, err = ns.QueryNumericalStatDescription().Only(ctx)
	}
	return result, err
}

func (ns *NumericalStat) Player(ctx context.Context) (*Player, error) {
	result, err := ns.Edges.PlayerOrErr()
	if IsNotLoaded(err) {
		result, err = ns.QueryPlayer().Only(ctx)
	}
	return result, err
}

func (nsd *NumericalStatDescription) NumericalStats(ctx context.Context) (result []*NumericalStat, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = nsd.NamedNumericalStats(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = nsd.Edges.NumericalStatsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = nsd.QueryNumericalStats().All(ctx)
	}
	return result, err
}

func (pl *Player) Owner(ctx context.Context) (*User, error) {
	result, err := pl.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = pl.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pl *Player) Supervisors(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pl.NamedSupervisors(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pl.Edges.SupervisorsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pl.QuerySupervisors().All(ctx)
	}
	return result, err
}

func (pl *Player) SupervisionRequests(ctx context.Context) (result []*PlayerSupervisionRequest, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pl.NamedSupervisionRequests(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pl.Edges.SupervisionRequestsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pl.QuerySupervisionRequests().All(ctx)
	}
	return result, err
}

func (pl *Player) Matches(ctx context.Context) (result []*Match, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pl.NamedMatches(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pl.Edges.MatchesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pl.QueryMatches().All(ctx)
	}
	return result, err
}

func (psr *PlayerSupervisionRequest) Sender(ctx context.Context) (*User, error) {
	result, err := psr.Edges.SenderOrErr()
	if IsNotLoaded(err) {
		result, err = psr.QuerySender().Only(ctx)
	}
	return result, err
}

func (psr *PlayerSupervisionRequest) Player(ctx context.Context) (*Player, error) {
	result, err := psr.Edges.PlayerOrErr()
	if IsNotLoaded(err) {
		result, err = psr.QueryPlayer().Only(ctx)
	}
	return result, err
}

func (psr *PlayerSupervisionRequest) Approvals(ctx context.Context) (result []*PlayerSupervisionRequestApproval, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = psr.NamedApprovals(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = psr.Edges.ApprovalsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = psr.QueryApprovals().All(ctx)
	}
	return result, err
}

func (psra *PlayerSupervisionRequestApproval) Approver(ctx context.Context) (*User, error) {
	result, err := psra.Edges.ApproverOrErr()
	if IsNotLoaded(err) {
		result, err = psra.QueryApprover().Only(ctx)
	}
	return result, err
}

func (psra *PlayerSupervisionRequestApproval) SupervisionRequest(ctx context.Context) (*PlayerSupervisionRequest, error) {
	result, err := psra.Edges.SupervisionRequestOrErr()
	if IsNotLoaded(err) {
		result, err = psra.QuerySupervisionRequest().Only(ctx)
	}
	return result, err
}

func (u *User) Players(ctx context.Context) (result []*Player, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedPlayers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.PlayersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryPlayers().All(ctx)
	}
	return result, err
}

func (u *User) MainPlayer(ctx context.Context) (*Player, error) {
	result, err := u.Edges.MainPlayerOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryMainPlayer().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) GroupMemberships(ctx context.Context) (result []*GroupMembership, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedGroupMemberships(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.GroupMembershipsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryGroupMemberships().All(ctx)
	}
	return result, err
}

func (u *User) GroupMembershipApplications(ctx context.Context) (result []*GroupMembershipApplication, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedGroupMembershipApplications(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.GroupMembershipApplicationsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryGroupMembershipApplications().All(ctx)
	}
	return result, err
}

func (u *User) Games(ctx context.Context) (result []*Game, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedGames(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.GamesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryGames().All(ctx)
	}
	return result, err
}
