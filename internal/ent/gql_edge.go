// Code generated by ent, DO NOT EDIT.

package ent

import "context"

func (gr *Group) Settings(ctx context.Context) (*GroupSettings, error) {
	result, err := gr.Edges.SettingsOrErr()
	if IsNotLoaded(err) {
		result, err = gr.QuerySettings().Only(ctx)
	}
	return result, err
}

func (gr *Group) Members(ctx context.Context) ([]*GroupMembership, error) {
	result, err := gr.Edges.MembersOrErr()
	if IsNotLoaded(err) {
		result, err = gr.QueryMembers().All(ctx)
	}
	return result, err
}

func (gm *GroupMembership) Group(ctx context.Context) (*Group, error) {
	result, err := gm.Edges.GroupOrErr()
	if IsNotLoaded(err) {
		result, err = gm.QueryGroup().Only(ctx)
	}
	return result, err
}

func (gm *GroupMembership) User(ctx context.Context) (*User, error) {
	result, err := gm.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = gm.QueryUser().Only(ctx)
	}
	return result, err
}

func (pl *Player) Owner(ctx context.Context) (*User, error) {
	result, err := pl.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = pl.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (pl *Player) Supervisors(ctx context.Context) ([]*User, error) {
	result, err := pl.Edges.SupervisorsOrErr()
	if IsNotLoaded(err) {
		result, err = pl.QuerySupervisors().All(ctx)
	}
	return result, err
}

func (pl *Player) SupervisionRequests(ctx context.Context) ([]*PlayerSupervisionRequest, error) {
	result, err := pl.Edges.SupervisionRequestsOrErr()
	if IsNotLoaded(err) {
		result, err = pl.QuerySupervisionRequests().All(ctx)
	}
	return result, err
}

func (psr *PlayerSupervisionRequest) Sender(ctx context.Context) (*User, error) {
	result, err := psr.Edges.SenderOrErr()
	if IsNotLoaded(err) {
		result, err = psr.QuerySender().Only(ctx)
	}
	return result, err
}

func (psr *PlayerSupervisionRequest) Player(ctx context.Context) (*Player, error) {
	result, err := psr.Edges.PlayerOrErr()
	if IsNotLoaded(err) {
		result, err = psr.QueryPlayer().Only(ctx)
	}
	return result, err
}

func (psr *PlayerSupervisionRequest) Approvals(ctx context.Context) ([]*PlayerSupervisionRequestApproval, error) {
	result, err := psr.Edges.ApprovalsOrErr()
	if IsNotLoaded(err) {
		result, err = psr.QueryApprovals().All(ctx)
	}
	return result, err
}

func (psra *PlayerSupervisionRequestApproval) Approver(ctx context.Context) (*User, error) {
	result, err := psra.Edges.ApproverOrErr()
	if IsNotLoaded(err) {
		result, err = psra.QueryApprover().Only(ctx)
	}
	return result, err
}

func (psra *PlayerSupervisionRequestApproval) SupervisionRequest(ctx context.Context) (*PlayerSupervisionRequest, error) {
	result, err := psra.Edges.SupervisionRequestOrErr()
	if IsNotLoaded(err) {
		result, err = psra.QuerySupervisionRequest().Only(ctx)
	}
	return result, err
}

func (u *User) Players(ctx context.Context) ([]*Player, error) {
	result, err := u.Edges.PlayersOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryPlayers().All(ctx)
	}
	return result, err
}

func (u *User) MainPlayer(ctx context.Context) (*Player, error) {
	result, err := u.Edges.MainPlayerOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryMainPlayer().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) GroupMemberships(ctx context.Context) ([]*GroupMembership, error) {
	result, err := u.Edges.GroupMembershipsOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryGroupMemberships().All(ctx)
	}
	return result, err
}
