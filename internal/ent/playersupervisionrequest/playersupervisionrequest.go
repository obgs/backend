// Code generated by ent, DO NOT EDIT.

package playersupervisionrequest

import (
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
)

const (
	// Label holds the string label denoting the playersupervisionrequest type in the database.
	Label = "player_supervision_request"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// EdgeSender holds the string denoting the sender edge name in mutations.
	EdgeSender = "sender"
	// EdgePlayer holds the string denoting the player edge name in mutations.
	EdgePlayer = "player"
	// EdgeApprovals holds the string denoting the approvals edge name in mutations.
	EdgeApprovals = "approvals"
	// Table holds the table name of the playersupervisionrequest in the database.
	Table = "player_supervision_requests"
	// SenderTable is the table that holds the sender relation/edge.
	SenderTable = "player_supervision_requests"
	// SenderInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	SenderInverseTable = "users"
	// SenderColumn is the table column denoting the sender relation/edge.
	SenderColumn = "user_sent_supervision_requests"
	// PlayerTable is the table that holds the player relation/edge.
	PlayerTable = "player_supervision_requests"
	// PlayerInverseTable is the table name for the Player entity.
	// It exists in this package in order to avoid circular dependency with the "player" package.
	PlayerInverseTable = "players"
	// PlayerColumn is the table column denoting the player relation/edge.
	PlayerColumn = "player_supervision_requests"
	// ApprovalsTable is the table that holds the approvals relation/edge.
	ApprovalsTable = "player_supervision_request_approvals"
	// ApprovalsInverseTable is the table name for the PlayerSupervisionRequestApproval entity.
	// It exists in this package in order to avoid circular dependency with the "playersupervisionrequestapproval" package.
	ApprovalsInverseTable = "player_supervision_request_approvals"
	// ApprovalsColumn is the table column denoting the approvals relation/edge.
	ApprovalsColumn = "player_supervision_request_approvals"
)

// Columns holds all SQL columns for playersupervisionrequest fields.
var Columns = []string{
	FieldID,
	FieldMessage,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "player_supervision_requests"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"player_supervision_requests",
	"user_sent_supervision_requests",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() guidgql.GUID
)
