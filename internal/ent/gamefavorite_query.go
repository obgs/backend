// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-boardgame-stats/backend/internal/ent/game"
	"github.com/open-boardgame-stats/backend/internal/ent/gamefavorite"
	"github.com/open-boardgame-stats/backend/internal/ent/predicate"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
	"github.com/open-boardgame-stats/backend/internal/ent/user"
)

// GameFavoriteQuery is the builder for querying GameFavorite entities.
type GameFavoriteQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.GameFavorite
	withGame   *GameQuery
	withUser   *UserQuery
	withFKs    bool
	modifiers  []func(*sql.Selector)
	loadTotal  []func(context.Context, []*GameFavorite) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GameFavoriteQuery builder.
func (gfq *GameFavoriteQuery) Where(ps ...predicate.GameFavorite) *GameFavoriteQuery {
	gfq.predicates = append(gfq.predicates, ps...)
	return gfq
}

// Limit adds a limit step to the query.
func (gfq *GameFavoriteQuery) Limit(limit int) *GameFavoriteQuery {
	gfq.limit = &limit
	return gfq
}

// Offset adds an offset step to the query.
func (gfq *GameFavoriteQuery) Offset(offset int) *GameFavoriteQuery {
	gfq.offset = &offset
	return gfq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (gfq *GameFavoriteQuery) Unique(unique bool) *GameFavoriteQuery {
	gfq.unique = &unique
	return gfq
}

// Order adds an order step to the query.
func (gfq *GameFavoriteQuery) Order(o ...OrderFunc) *GameFavoriteQuery {
	gfq.order = append(gfq.order, o...)
	return gfq
}

// QueryGame chains the current query on the "game" edge.
func (gfq *GameFavoriteQuery) QueryGame() *GameQuery {
	query := &GameQuery{config: gfq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gamefavorite.Table, gamefavorite.FieldID, selector),
			sqlgraph.To(game.Table, game.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, gamefavorite.GameTable, gamefavorite.GameColumn),
		)
		fromU = sqlgraph.SetNeighbors(gfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser chains the current query on the "user" edge.
func (gfq *GameFavoriteQuery) QueryUser() *UserQuery {
	query := &UserQuery{config: gfq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gfq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gamefavorite.Table, gamefavorite.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, gamefavorite.UserTable, gamefavorite.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(gfq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GameFavorite entity from the query.
// Returns a *NotFoundError when no GameFavorite was found.
func (gfq *GameFavoriteQuery) First(ctx context.Context) (*GameFavorite, error) {
	nodes, err := gfq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{gamefavorite.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (gfq *GameFavoriteQuery) FirstX(ctx context.Context) *GameFavorite {
	node, err := gfq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first GameFavorite ID from the query.
// Returns a *NotFoundError when no GameFavorite ID was found.
func (gfq *GameFavoriteQuery) FirstID(ctx context.Context) (id guidgql.GUID, err error) {
	var ids []guidgql.GUID
	if ids, err = gfq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{gamefavorite.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (gfq *GameFavoriteQuery) FirstIDX(ctx context.Context) guidgql.GUID {
	id, err := gfq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single GameFavorite entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one GameFavorite entity is found.
// Returns a *NotFoundError when no GameFavorite entities are found.
func (gfq *GameFavoriteQuery) Only(ctx context.Context) (*GameFavorite, error) {
	nodes, err := gfq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{gamefavorite.Label}
	default:
		return nil, &NotSingularError{gamefavorite.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (gfq *GameFavoriteQuery) OnlyX(ctx context.Context) *GameFavorite {
	node, err := gfq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only GameFavorite ID in the query.
// Returns a *NotSingularError when more than one GameFavorite ID is found.
// Returns a *NotFoundError when no entities are found.
func (gfq *GameFavoriteQuery) OnlyID(ctx context.Context) (id guidgql.GUID, err error) {
	var ids []guidgql.GUID
	if ids, err = gfq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{gamefavorite.Label}
	default:
		err = &NotSingularError{gamefavorite.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (gfq *GameFavoriteQuery) OnlyIDX(ctx context.Context) guidgql.GUID {
	id, err := gfq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GameFavorites.
func (gfq *GameFavoriteQuery) All(ctx context.Context) ([]*GameFavorite, error) {
	if err := gfq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return gfq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (gfq *GameFavoriteQuery) AllX(ctx context.Context) []*GameFavorite {
	nodes, err := gfq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of GameFavorite IDs.
func (gfq *GameFavoriteQuery) IDs(ctx context.Context) ([]guidgql.GUID, error) {
	var ids []guidgql.GUID
	if err := gfq.Select(gamefavorite.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (gfq *GameFavoriteQuery) IDsX(ctx context.Context) []guidgql.GUID {
	ids, err := gfq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (gfq *GameFavoriteQuery) Count(ctx context.Context) (int, error) {
	if err := gfq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return gfq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (gfq *GameFavoriteQuery) CountX(ctx context.Context) int {
	count, err := gfq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (gfq *GameFavoriteQuery) Exist(ctx context.Context) (bool, error) {
	if err := gfq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return gfq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (gfq *GameFavoriteQuery) ExistX(ctx context.Context) bool {
	exist, err := gfq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GameFavoriteQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (gfq *GameFavoriteQuery) Clone() *GameFavoriteQuery {
	if gfq == nil {
		return nil
	}
	return &GameFavoriteQuery{
		config:     gfq.config,
		limit:      gfq.limit,
		offset:     gfq.offset,
		order:      append([]OrderFunc{}, gfq.order...),
		predicates: append([]predicate.GameFavorite{}, gfq.predicates...),
		withGame:   gfq.withGame.Clone(),
		withUser:   gfq.withUser.Clone(),
		// clone intermediate query.
		sql:    gfq.sql.Clone(),
		path:   gfq.path,
		unique: gfq.unique,
	}
}

// WithGame tells the query-builder to eager-load the nodes that are connected to
// the "game" edge. The optional arguments are used to configure the query builder of the edge.
func (gfq *GameFavoriteQuery) WithGame(opts ...func(*GameQuery)) *GameFavoriteQuery {
	query := &GameQuery{config: gfq.config}
	for _, opt := range opts {
		opt(query)
	}
	gfq.withGame = query
	return gfq
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (gfq *GameFavoriteQuery) WithUser(opts ...func(*UserQuery)) *GameFavoriteQuery {
	query := &UserQuery{config: gfq.config}
	for _, opt := range opts {
		opt(query)
	}
	gfq.withUser = query
	return gfq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (gfq *GameFavoriteQuery) GroupBy(field string, fields ...string) *GameFavoriteGroupBy {
	grbuild := &GameFavoriteGroupBy{config: gfq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := gfq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return gfq.sqlQuery(ctx), nil
	}
	grbuild.label = gamefavorite.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (gfq *GameFavoriteQuery) Select(fields ...string) *GameFavoriteSelect {
	gfq.fields = append(gfq.fields, fields...)
	selbuild := &GameFavoriteSelect{GameFavoriteQuery: gfq}
	selbuild.label = gamefavorite.Label
	selbuild.flds, selbuild.scan = &gfq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a GameFavoriteSelect configured with the given aggregations.
func (gfq *GameFavoriteQuery) Aggregate(fns ...AggregateFunc) *GameFavoriteSelect {
	return gfq.Select().Aggregate(fns...)
}

func (gfq *GameFavoriteQuery) prepareQuery(ctx context.Context) error {
	for _, f := range gfq.fields {
		if !gamefavorite.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if gfq.path != nil {
		prev, err := gfq.path(ctx)
		if err != nil {
			return err
		}
		gfq.sql = prev
	}
	return nil
}

func (gfq *GameFavoriteQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*GameFavorite, error) {
	var (
		nodes       = []*GameFavorite{}
		withFKs     = gfq.withFKs
		_spec       = gfq.querySpec()
		loadedTypes = [2]bool{
			gfq.withGame != nil,
			gfq.withUser != nil,
		}
	)
	if gfq.withGame != nil || gfq.withUser != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, gamefavorite.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*GameFavorite).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &GameFavorite{config: gfq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(gfq.modifiers) > 0 {
		_spec.Modifiers = gfq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, gfq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := gfq.withGame; query != nil {
		if err := gfq.loadGame(ctx, query, nodes, nil,
			func(n *GameFavorite, e *Game) { n.Edges.Game = e }); err != nil {
			return nil, err
		}
	}
	if query := gfq.withUser; query != nil {
		if err := gfq.loadUser(ctx, query, nodes, nil,
			func(n *GameFavorite, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	for i := range gfq.loadTotal {
		if err := gfq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (gfq *GameFavoriteQuery) loadGame(ctx context.Context, query *GameQuery, nodes []*GameFavorite, init func(*GameFavorite), assign func(*GameFavorite, *Game)) error {
	ids := make([]guidgql.GUID, 0, len(nodes))
	nodeids := make(map[guidgql.GUID][]*GameFavorite)
	for i := range nodes {
		if nodes[i].game_favorites == nil {
			continue
		}
		fk := *nodes[i].game_favorites
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(game.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "game_favorites" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (gfq *GameFavoriteQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*GameFavorite, init func(*GameFavorite), assign func(*GameFavorite, *User)) error {
	ids := make([]guidgql.GUID, 0, len(nodes))
	nodeids := make(map[guidgql.GUID][]*GameFavorite)
	for i := range nodes {
		if nodes[i].user_favorite_games == nil {
			continue
		}
		fk := *nodes[i].user_favorite_games
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_favorite_games" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (gfq *GameFavoriteQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := gfq.querySpec()
	if len(gfq.modifiers) > 0 {
		_spec.Modifiers = gfq.modifiers
	}
	_spec.Node.Columns = gfq.fields
	if len(gfq.fields) > 0 {
		_spec.Unique = gfq.unique != nil && *gfq.unique
	}
	return sqlgraph.CountNodes(ctx, gfq.driver, _spec)
}

func (gfq *GameFavoriteQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := gfq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (gfq *GameFavoriteQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   gamefavorite.Table,
			Columns: gamefavorite.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: gamefavorite.FieldID,
			},
		},
		From:   gfq.sql,
		Unique: true,
	}
	if unique := gfq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := gfq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gamefavorite.FieldID)
		for i := range fields {
			if fields[i] != gamefavorite.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := gfq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := gfq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := gfq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := gfq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (gfq *GameFavoriteQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(gfq.driver.Dialect())
	t1 := builder.Table(gamefavorite.Table)
	columns := gfq.fields
	if len(columns) == 0 {
		columns = gamefavorite.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if gfq.sql != nil {
		selector = gfq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if gfq.unique != nil && *gfq.unique {
		selector.Distinct()
	}
	for _, p := range gfq.predicates {
		p(selector)
	}
	for _, p := range gfq.order {
		p(selector)
	}
	if offset := gfq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := gfq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// GameFavoriteGroupBy is the group-by builder for GameFavorite entities.
type GameFavoriteGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (gfgb *GameFavoriteGroupBy) Aggregate(fns ...AggregateFunc) *GameFavoriteGroupBy {
	gfgb.fns = append(gfgb.fns, fns...)
	return gfgb
}

// Scan applies the group-by query and scans the result into the given value.
func (gfgb *GameFavoriteGroupBy) Scan(ctx context.Context, v any) error {
	query, err := gfgb.path(ctx)
	if err != nil {
		return err
	}
	gfgb.sql = query
	return gfgb.sqlScan(ctx, v)
}

func (gfgb *GameFavoriteGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range gfgb.fields {
		if !gamefavorite.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := gfgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gfgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (gfgb *GameFavoriteGroupBy) sqlQuery() *sql.Selector {
	selector := gfgb.sql.Select()
	aggregation := make([]string, 0, len(gfgb.fns))
	for _, fn := range gfgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(gfgb.fields)+len(gfgb.fns))
		for _, f := range gfgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(gfgb.fields...)...)
}

// GameFavoriteSelect is the builder for selecting fields of GameFavorite entities.
type GameFavoriteSelect struct {
	*GameFavoriteQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (gfs *GameFavoriteSelect) Aggregate(fns ...AggregateFunc) *GameFavoriteSelect {
	gfs.fns = append(gfs.fns, fns...)
	return gfs
}

// Scan applies the selector query and scans the result into the given value.
func (gfs *GameFavoriteSelect) Scan(ctx context.Context, v any) error {
	if err := gfs.prepareQuery(ctx); err != nil {
		return err
	}
	gfs.sql = gfs.GameFavoriteQuery.sqlQuery(ctx)
	return gfs.sqlScan(ctx, v)
}

func (gfs *GameFavoriteSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(gfs.fns))
	for _, fn := range gfs.fns {
		aggregation = append(aggregation, fn(gfs.sql))
	}
	switch n := len(*gfs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		gfs.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		gfs.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := gfs.sql.Query()
	if err := gfs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
