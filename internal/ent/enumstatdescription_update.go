// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/open-boardgame-stats/backend/internal/ent/enumstat"
	"github.com/open-boardgame-stats/backend/internal/ent/enumstatdescription"
	"github.com/open-boardgame-stats/backend/internal/ent/game"
	"github.com/open-boardgame-stats/backend/internal/ent/predicate"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
)

// EnumStatDescriptionUpdate is the builder for updating EnumStatDescription entities.
type EnumStatDescriptionUpdate struct {
	config
	hooks    []Hook
	mutation *EnumStatDescriptionMutation
}

// Where appends a list predicates to the EnumStatDescriptionUpdate builder.
func (esdu *EnumStatDescriptionUpdate) Where(ps ...predicate.EnumStatDescription) *EnumStatDescriptionUpdate {
	esdu.mutation.Where(ps...)
	return esdu
}

// SetName sets the "name" field.
func (esdu *EnumStatDescriptionUpdate) SetName(s string) *EnumStatDescriptionUpdate {
	esdu.mutation.SetName(s)
	return esdu
}

// SetDescription sets the "description" field.
func (esdu *EnumStatDescriptionUpdate) SetDescription(s string) *EnumStatDescriptionUpdate {
	esdu.mutation.SetDescription(s)
	return esdu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (esdu *EnumStatDescriptionUpdate) SetNillableDescription(s *string) *EnumStatDescriptionUpdate {
	if s != nil {
		esdu.SetDescription(*s)
	}
	return esdu
}

// ClearDescription clears the value of the "description" field.
func (esdu *EnumStatDescriptionUpdate) ClearDescription() *EnumStatDescriptionUpdate {
	esdu.mutation.ClearDescription()
	return esdu
}

// SetPossibleValues sets the "possible_values" field.
func (esdu *EnumStatDescriptionUpdate) SetPossibleValues(s []string) *EnumStatDescriptionUpdate {
	esdu.mutation.SetPossibleValues(s)
	return esdu
}

// AppendPossibleValues appends s to the "possible_values" field.
func (esdu *EnumStatDescriptionUpdate) AppendPossibleValues(s []string) *EnumStatDescriptionUpdate {
	esdu.mutation.AppendPossibleValues(s)
	return esdu
}

// AddGameIDs adds the "game" edge to the Game entity by IDs.
func (esdu *EnumStatDescriptionUpdate) AddGameIDs(ids ...guidgql.GUID) *EnumStatDescriptionUpdate {
	esdu.mutation.AddGameIDs(ids...)
	return esdu
}

// AddGame adds the "game" edges to the Game entity.
func (esdu *EnumStatDescriptionUpdate) AddGame(g ...*Game) *EnumStatDescriptionUpdate {
	ids := make([]guidgql.GUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return esdu.AddGameIDs(ids...)
}

// AddEnumStatIDs adds the "enum_stats" edge to the EnumStat entity by IDs.
func (esdu *EnumStatDescriptionUpdate) AddEnumStatIDs(ids ...guidgql.GUID) *EnumStatDescriptionUpdate {
	esdu.mutation.AddEnumStatIDs(ids...)
	return esdu
}

// AddEnumStats adds the "enum_stats" edges to the EnumStat entity.
func (esdu *EnumStatDescriptionUpdate) AddEnumStats(e ...*EnumStat) *EnumStatDescriptionUpdate {
	ids := make([]guidgql.GUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return esdu.AddEnumStatIDs(ids...)
}

// Mutation returns the EnumStatDescriptionMutation object of the builder.
func (esdu *EnumStatDescriptionUpdate) Mutation() *EnumStatDescriptionMutation {
	return esdu.mutation
}

// ClearGame clears all "game" edges to the Game entity.
func (esdu *EnumStatDescriptionUpdate) ClearGame() *EnumStatDescriptionUpdate {
	esdu.mutation.ClearGame()
	return esdu
}

// RemoveGameIDs removes the "game" edge to Game entities by IDs.
func (esdu *EnumStatDescriptionUpdate) RemoveGameIDs(ids ...guidgql.GUID) *EnumStatDescriptionUpdate {
	esdu.mutation.RemoveGameIDs(ids...)
	return esdu
}

// RemoveGame removes "game" edges to Game entities.
func (esdu *EnumStatDescriptionUpdate) RemoveGame(g ...*Game) *EnumStatDescriptionUpdate {
	ids := make([]guidgql.GUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return esdu.RemoveGameIDs(ids...)
}

// ClearEnumStats clears all "enum_stats" edges to the EnumStat entity.
func (esdu *EnumStatDescriptionUpdate) ClearEnumStats() *EnumStatDescriptionUpdate {
	esdu.mutation.ClearEnumStats()
	return esdu
}

// RemoveEnumStatIDs removes the "enum_stats" edge to EnumStat entities by IDs.
func (esdu *EnumStatDescriptionUpdate) RemoveEnumStatIDs(ids ...guidgql.GUID) *EnumStatDescriptionUpdate {
	esdu.mutation.RemoveEnumStatIDs(ids...)
	return esdu
}

// RemoveEnumStats removes "enum_stats" edges to EnumStat entities.
func (esdu *EnumStatDescriptionUpdate) RemoveEnumStats(e ...*EnumStat) *EnumStatDescriptionUpdate {
	ids := make([]guidgql.GUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return esdu.RemoveEnumStatIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (esdu *EnumStatDescriptionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(esdu.hooks) == 0 {
		if err = esdu.check(); err != nil {
			return 0, err
		}
		affected, err = esdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnumStatDescriptionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = esdu.check(); err != nil {
				return 0, err
			}
			esdu.mutation = mutation
			affected, err = esdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(esdu.hooks) - 1; i >= 0; i-- {
			if esdu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = esdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, esdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (esdu *EnumStatDescriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := esdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (esdu *EnumStatDescriptionUpdate) Exec(ctx context.Context) error {
	_, err := esdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esdu *EnumStatDescriptionUpdate) ExecX(ctx context.Context) {
	if err := esdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (esdu *EnumStatDescriptionUpdate) check() error {
	if v, ok := esdu.mutation.Name(); ok {
		if err := enumstatdescription.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "EnumStatDescription.name": %w`, err)}
		}
	}
	return nil
}

func (esdu *EnumStatDescriptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   enumstatdescription.Table,
			Columns: enumstatdescription.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: enumstatdescription.FieldID,
			},
		},
	}
	if ps := esdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := esdu.mutation.Name(); ok {
		_spec.SetField(enumstatdescription.FieldName, field.TypeString, value)
	}
	if value, ok := esdu.mutation.Description(); ok {
		_spec.SetField(enumstatdescription.FieldDescription, field.TypeString, value)
	}
	if esdu.mutation.DescriptionCleared() {
		_spec.ClearField(enumstatdescription.FieldDescription, field.TypeString)
	}
	if value, ok := esdu.mutation.PossibleValues(); ok {
		_spec.SetField(enumstatdescription.FieldPossibleValues, field.TypeJSON, value)
	}
	if value, ok := esdu.mutation.AppendedPossibleValues(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, enumstatdescription.FieldPossibleValues, value)
		})
	}
	if esdu.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   enumstatdescription.GameTable,
			Columns: enumstatdescription.GamePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: game.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esdu.mutation.RemovedGameIDs(); len(nodes) > 0 && !esdu.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   enumstatdescription.GameTable,
			Columns: enumstatdescription.GamePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: game.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esdu.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   enumstatdescription.GameTable,
			Columns: enumstatdescription.GamePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: game.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if esdu.mutation.EnumStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumstatdescription.EnumStatsTable,
			Columns: []string{enumstatdescription.EnumStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: enumstat.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esdu.mutation.RemovedEnumStatsIDs(); len(nodes) > 0 && !esdu.mutation.EnumStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumstatdescription.EnumStatsTable,
			Columns: []string{enumstatdescription.EnumStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: enumstat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esdu.mutation.EnumStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumstatdescription.EnumStatsTable,
			Columns: []string{enumstatdescription.EnumStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: enumstat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, esdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enumstatdescription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// EnumStatDescriptionUpdateOne is the builder for updating a single EnumStatDescription entity.
type EnumStatDescriptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EnumStatDescriptionMutation
}

// SetName sets the "name" field.
func (esduo *EnumStatDescriptionUpdateOne) SetName(s string) *EnumStatDescriptionUpdateOne {
	esduo.mutation.SetName(s)
	return esduo
}

// SetDescription sets the "description" field.
func (esduo *EnumStatDescriptionUpdateOne) SetDescription(s string) *EnumStatDescriptionUpdateOne {
	esduo.mutation.SetDescription(s)
	return esduo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (esduo *EnumStatDescriptionUpdateOne) SetNillableDescription(s *string) *EnumStatDescriptionUpdateOne {
	if s != nil {
		esduo.SetDescription(*s)
	}
	return esduo
}

// ClearDescription clears the value of the "description" field.
func (esduo *EnumStatDescriptionUpdateOne) ClearDescription() *EnumStatDescriptionUpdateOne {
	esduo.mutation.ClearDescription()
	return esduo
}

// SetPossibleValues sets the "possible_values" field.
func (esduo *EnumStatDescriptionUpdateOne) SetPossibleValues(s []string) *EnumStatDescriptionUpdateOne {
	esduo.mutation.SetPossibleValues(s)
	return esduo
}

// AppendPossibleValues appends s to the "possible_values" field.
func (esduo *EnumStatDescriptionUpdateOne) AppendPossibleValues(s []string) *EnumStatDescriptionUpdateOne {
	esduo.mutation.AppendPossibleValues(s)
	return esduo
}

// AddGameIDs adds the "game" edge to the Game entity by IDs.
func (esduo *EnumStatDescriptionUpdateOne) AddGameIDs(ids ...guidgql.GUID) *EnumStatDescriptionUpdateOne {
	esduo.mutation.AddGameIDs(ids...)
	return esduo
}

// AddGame adds the "game" edges to the Game entity.
func (esduo *EnumStatDescriptionUpdateOne) AddGame(g ...*Game) *EnumStatDescriptionUpdateOne {
	ids := make([]guidgql.GUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return esduo.AddGameIDs(ids...)
}

// AddEnumStatIDs adds the "enum_stats" edge to the EnumStat entity by IDs.
func (esduo *EnumStatDescriptionUpdateOne) AddEnumStatIDs(ids ...guidgql.GUID) *EnumStatDescriptionUpdateOne {
	esduo.mutation.AddEnumStatIDs(ids...)
	return esduo
}

// AddEnumStats adds the "enum_stats" edges to the EnumStat entity.
func (esduo *EnumStatDescriptionUpdateOne) AddEnumStats(e ...*EnumStat) *EnumStatDescriptionUpdateOne {
	ids := make([]guidgql.GUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return esduo.AddEnumStatIDs(ids...)
}

// Mutation returns the EnumStatDescriptionMutation object of the builder.
func (esduo *EnumStatDescriptionUpdateOne) Mutation() *EnumStatDescriptionMutation {
	return esduo.mutation
}

// ClearGame clears all "game" edges to the Game entity.
func (esduo *EnumStatDescriptionUpdateOne) ClearGame() *EnumStatDescriptionUpdateOne {
	esduo.mutation.ClearGame()
	return esduo
}

// RemoveGameIDs removes the "game" edge to Game entities by IDs.
func (esduo *EnumStatDescriptionUpdateOne) RemoveGameIDs(ids ...guidgql.GUID) *EnumStatDescriptionUpdateOne {
	esduo.mutation.RemoveGameIDs(ids...)
	return esduo
}

// RemoveGame removes "game" edges to Game entities.
func (esduo *EnumStatDescriptionUpdateOne) RemoveGame(g ...*Game) *EnumStatDescriptionUpdateOne {
	ids := make([]guidgql.GUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return esduo.RemoveGameIDs(ids...)
}

// ClearEnumStats clears all "enum_stats" edges to the EnumStat entity.
func (esduo *EnumStatDescriptionUpdateOne) ClearEnumStats() *EnumStatDescriptionUpdateOne {
	esduo.mutation.ClearEnumStats()
	return esduo
}

// RemoveEnumStatIDs removes the "enum_stats" edge to EnumStat entities by IDs.
func (esduo *EnumStatDescriptionUpdateOne) RemoveEnumStatIDs(ids ...guidgql.GUID) *EnumStatDescriptionUpdateOne {
	esduo.mutation.RemoveEnumStatIDs(ids...)
	return esduo
}

// RemoveEnumStats removes "enum_stats" edges to EnumStat entities.
func (esduo *EnumStatDescriptionUpdateOne) RemoveEnumStats(e ...*EnumStat) *EnumStatDescriptionUpdateOne {
	ids := make([]guidgql.GUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return esduo.RemoveEnumStatIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (esduo *EnumStatDescriptionUpdateOne) Select(field string, fields ...string) *EnumStatDescriptionUpdateOne {
	esduo.fields = append([]string{field}, fields...)
	return esduo
}

// Save executes the query and returns the updated EnumStatDescription entity.
func (esduo *EnumStatDescriptionUpdateOne) Save(ctx context.Context) (*EnumStatDescription, error) {
	var (
		err  error
		node *EnumStatDescription
	)
	if len(esduo.hooks) == 0 {
		if err = esduo.check(); err != nil {
			return nil, err
		}
		node, err = esduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnumStatDescriptionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = esduo.check(); err != nil {
				return nil, err
			}
			esduo.mutation = mutation
			node, err = esduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(esduo.hooks) - 1; i >= 0; i-- {
			if esduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = esduo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, esduo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*EnumStatDescription)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EnumStatDescriptionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (esduo *EnumStatDescriptionUpdateOne) SaveX(ctx context.Context) *EnumStatDescription {
	node, err := esduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (esduo *EnumStatDescriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := esduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esduo *EnumStatDescriptionUpdateOne) ExecX(ctx context.Context) {
	if err := esduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (esduo *EnumStatDescriptionUpdateOne) check() error {
	if v, ok := esduo.mutation.Name(); ok {
		if err := enumstatdescription.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "EnumStatDescription.name": %w`, err)}
		}
	}
	return nil
}

func (esduo *EnumStatDescriptionUpdateOne) sqlSave(ctx context.Context) (_node *EnumStatDescription, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   enumstatdescription.Table,
			Columns: enumstatdescription.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: enumstatdescription.FieldID,
			},
		},
	}
	id, ok := esduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EnumStatDescription.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := esduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enumstatdescription.FieldID)
		for _, f := range fields {
			if !enumstatdescription.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != enumstatdescription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := esduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := esduo.mutation.Name(); ok {
		_spec.SetField(enumstatdescription.FieldName, field.TypeString, value)
	}
	if value, ok := esduo.mutation.Description(); ok {
		_spec.SetField(enumstatdescription.FieldDescription, field.TypeString, value)
	}
	if esduo.mutation.DescriptionCleared() {
		_spec.ClearField(enumstatdescription.FieldDescription, field.TypeString)
	}
	if value, ok := esduo.mutation.PossibleValues(); ok {
		_spec.SetField(enumstatdescription.FieldPossibleValues, field.TypeJSON, value)
	}
	if value, ok := esduo.mutation.AppendedPossibleValues(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, enumstatdescription.FieldPossibleValues, value)
		})
	}
	if esduo.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   enumstatdescription.GameTable,
			Columns: enumstatdescription.GamePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: game.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esduo.mutation.RemovedGameIDs(); len(nodes) > 0 && !esduo.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   enumstatdescription.GameTable,
			Columns: enumstatdescription.GamePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: game.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esduo.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   enumstatdescription.GameTable,
			Columns: enumstatdescription.GamePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: game.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if esduo.mutation.EnumStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumstatdescription.EnumStatsTable,
			Columns: []string{enumstatdescription.EnumStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: enumstat.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esduo.mutation.RemovedEnumStatsIDs(); len(nodes) > 0 && !esduo.mutation.EnumStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumstatdescription.EnumStatsTable,
			Columns: []string{enumstatdescription.EnumStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: enumstat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esduo.mutation.EnumStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumstatdescription.EnumStatsTable,
			Columns: []string{enumstatdescription.EnumStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: enumstat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EnumStatDescription{config: esduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, esduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enumstatdescription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
