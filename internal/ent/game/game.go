// Code generated by ent, DO NOT EDIT.

package game

import (
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
)

const (
	// Label holds the string label denoting the game type in the database.
	Label = "game"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldMinPlayers holds the string denoting the min_players field in the database.
	FieldMinPlayers = "min_players"
	// FieldMaxPlayers holds the string denoting the max_players field in the database.
	FieldMaxPlayers = "max_players"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldBoardgamegeekURL holds the string denoting the boardgamegeek_url field in the database.
	FieldBoardgamegeekURL = "boardgamegeek_url"
	// EdgeAuthor holds the string denoting the author edge name in mutations.
	EdgeAuthor = "author"
	// EdgeFavorites holds the string denoting the favorites edge name in mutations.
	EdgeFavorites = "favorites"
	// EdgeNumericalStatDescriptions holds the string denoting the numerical_stat_descriptions edge name in mutations.
	EdgeNumericalStatDescriptions = "numerical_stat_descriptions"
	// EdgeEnumStatDescriptions holds the string denoting the enum_stat_descriptions edge name in mutations.
	EdgeEnumStatDescriptions = "enum_stat_descriptions"
	// EdgeMatches holds the string denoting the matches edge name in mutations.
	EdgeMatches = "matches"
	// Table holds the table name of the game in the database.
	Table = "games"
	// AuthorTable is the table that holds the author relation/edge.
	AuthorTable = "games"
	// AuthorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	AuthorInverseTable = "users"
	// AuthorColumn is the table column denoting the author relation/edge.
	AuthorColumn = "user_games"
	// FavoritesTable is the table that holds the favorites relation/edge.
	FavoritesTable = "game_favorites"
	// FavoritesInverseTable is the table name for the GameFavorite entity.
	// It exists in this package in order to avoid circular dependency with the "gamefavorite" package.
	FavoritesInverseTable = "game_favorites"
	// FavoritesColumn is the table column denoting the favorites relation/edge.
	FavoritesColumn = "game_favorites"
	// NumericalStatDescriptionsTable is the table that holds the numerical_stat_descriptions relation/edge. The primary key declared below.
	NumericalStatDescriptionsTable = "numerical_stat_description_game"
	// NumericalStatDescriptionsInverseTable is the table name for the NumericalStatDescription entity.
	// It exists in this package in order to avoid circular dependency with the "numericalstatdescription" package.
	NumericalStatDescriptionsInverseTable = "numerical_stat_descriptions"
	// EnumStatDescriptionsTable is the table that holds the enum_stat_descriptions relation/edge. The primary key declared below.
	EnumStatDescriptionsTable = "enum_stat_description_game"
	// EnumStatDescriptionsInverseTable is the table name for the EnumStatDescription entity.
	// It exists in this package in order to avoid circular dependency with the "enumstatdescription" package.
	EnumStatDescriptionsInverseTable = "enum_stat_descriptions"
	// MatchesTable is the table that holds the matches relation/edge.
	MatchesTable = "matches"
	// MatchesInverseTable is the table name for the Match entity.
	// It exists in this package in order to avoid circular dependency with the "match" package.
	MatchesInverseTable = "matches"
	// MatchesColumn is the table column denoting the matches relation/edge.
	MatchesColumn = "game_matches"
)

// Columns holds all SQL columns for game fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldMinPlayers,
	FieldMaxPlayers,
	FieldDescription,
	FieldBoardgamegeekURL,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "games"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_games",
}

var (
	// NumericalStatDescriptionsPrimaryKey and NumericalStatDescriptionsColumn2 are the table columns denoting the
	// primary key for the numerical_stat_descriptions relation (M2M).
	NumericalStatDescriptionsPrimaryKey = []string{"numerical_stat_description_id", "game_id"}
	// EnumStatDescriptionsPrimaryKey and EnumStatDescriptionsColumn2 are the table columns denoting the
	// primary key for the enum_stat_descriptions relation (M2M).
	EnumStatDescriptionsPrimaryKey = []string{"enum_stat_description_id", "game_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultMinPlayers holds the default value on creation for the "min_players" field.
	DefaultMinPlayers int
	// DefaultMaxPlayers holds the default value on creation for the "max_players" field.
	DefaultMaxPlayers int
	// DefaultDescription holds the default value on creation for the "description" field.
	DefaultDescription string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() guidgql.GUID
)
