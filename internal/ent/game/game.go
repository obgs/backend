// Code generated by ent, DO NOT EDIT.

package game

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
)

const (
	// Label holds the string label denoting the game type in the database.
	Label = "game"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldMinPlayers holds the string denoting the min_players field in the database.
	FieldMinPlayers = "min_players"
	// FieldMaxPlayers holds the string denoting the max_players field in the database.
	FieldMaxPlayers = "max_players"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldBoardgamegeekURL holds the string denoting the boardgamegeek_url field in the database.
	FieldBoardgamegeekURL = "boardgamegeek_url"
	// EdgeAuthor holds the string denoting the author edge name in mutations.
	EdgeAuthor = "author"
	// EdgeFavorites holds the string denoting the favorites edge name in mutations.
	EdgeFavorites = "favorites"
	// EdgeVersions holds the string denoting the versions edge name in mutations.
	EdgeVersions = "versions"
	// Table holds the table name of the game in the database.
	Table = "games"
	// AuthorTable is the table that holds the author relation/edge.
	AuthorTable = "games"
	// AuthorInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	AuthorInverseTable = "users"
	// AuthorColumn is the table column denoting the author relation/edge.
	AuthorColumn = "user_games"
	// FavoritesTable is the table that holds the favorites relation/edge.
	FavoritesTable = "game_favorites"
	// FavoritesInverseTable is the table name for the GameFavorite entity.
	// It exists in this package in order to avoid circular dependency with the "gamefavorite" package.
	FavoritesInverseTable = "game_favorites"
	// FavoritesColumn is the table column denoting the favorites relation/edge.
	FavoritesColumn = "game_favorites"
	// VersionsTable is the table that holds the versions relation/edge.
	VersionsTable = "game_versions"
	// VersionsInverseTable is the table name for the GameVersion entity.
	// It exists in this package in order to avoid circular dependency with the "gameversion" package.
	VersionsInverseTable = "game_versions"
	// VersionsColumn is the table column denoting the versions relation/edge.
	VersionsColumn = "game_version_game"
)

// Columns holds all SQL columns for game fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldMinPlayers,
	FieldMaxPlayers,
	FieldDescription,
	FieldBoardgamegeekURL,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "games"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_games",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultMinPlayers holds the default value on creation for the "min_players" field.
	DefaultMinPlayers int
	// DefaultMaxPlayers holds the default value on creation for the "max_players" field.
	DefaultMaxPlayers int
	// DefaultDescription holds the default value on creation for the "description" field.
	DefaultDescription string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() guidgql.GUID
)

// OrderOption defines the ordering options for the Game queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByMinPlayers orders the results by the min_players field.
func ByMinPlayers(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinPlayers, opts...).ToFunc()
}

// ByMaxPlayers orders the results by the max_players field.
func ByMaxPlayers(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxPlayers, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByBoardgamegeekURL orders the results by the boardgamegeek_url field.
func ByBoardgamegeekURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBoardgamegeekURL, opts...).ToFunc()
}

// ByAuthorField orders the results by author field.
func ByAuthorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthorStep(), sql.OrderByField(field, opts...))
	}
}

// ByFavoritesCount orders the results by favorites count.
func ByFavoritesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFavoritesStep(), opts...)
	}
}

// ByFavorites orders the results by favorites terms.
func ByFavorites(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFavoritesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByVersionsCount orders the results by versions count.
func ByVersionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newVersionsStep(), opts...)
	}
}

// ByVersions orders the results by versions terms.
func ByVersions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newVersionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAuthorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AuthorTable, AuthorColumn),
	)
}
func newFavoritesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FavoritesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FavoritesTable, FavoritesColumn),
	)
}
func newVersionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(VersionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, VersionsTable, VersionsColumn),
	)
}
