// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-boardgame-stats/backend/internal/ent/enumstat"
	"github.com/open-boardgame-stats/backend/internal/ent/enumstatdescription"
	"github.com/open-boardgame-stats/backend/internal/ent/game"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
)

// EnumStatDescriptionCreate is the builder for creating a EnumStatDescription entity.
type EnumStatDescriptionCreate struct {
	config
	mutation *EnumStatDescriptionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (esdc *EnumStatDescriptionCreate) SetName(s string) *EnumStatDescriptionCreate {
	esdc.mutation.SetName(s)
	return esdc
}

// SetDescription sets the "description" field.
func (esdc *EnumStatDescriptionCreate) SetDescription(s string) *EnumStatDescriptionCreate {
	esdc.mutation.SetDescription(s)
	return esdc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (esdc *EnumStatDescriptionCreate) SetNillableDescription(s *string) *EnumStatDescriptionCreate {
	if s != nil {
		esdc.SetDescription(*s)
	}
	return esdc
}

// SetPossibleValues sets the "possible_values" field.
func (esdc *EnumStatDescriptionCreate) SetPossibleValues(s []string) *EnumStatDescriptionCreate {
	esdc.mutation.SetPossibleValues(s)
	return esdc
}

// SetID sets the "id" field.
func (esdc *EnumStatDescriptionCreate) SetID(gu guidgql.GUID) *EnumStatDescriptionCreate {
	esdc.mutation.SetID(gu)
	return esdc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (esdc *EnumStatDescriptionCreate) SetNillableID(gu *guidgql.GUID) *EnumStatDescriptionCreate {
	if gu != nil {
		esdc.SetID(*gu)
	}
	return esdc
}

// AddGameIDs adds the "game" edge to the Game entity by IDs.
func (esdc *EnumStatDescriptionCreate) AddGameIDs(ids ...guidgql.GUID) *EnumStatDescriptionCreate {
	esdc.mutation.AddGameIDs(ids...)
	return esdc
}

// AddGame adds the "game" edges to the Game entity.
func (esdc *EnumStatDescriptionCreate) AddGame(g ...*Game) *EnumStatDescriptionCreate {
	ids := make([]guidgql.GUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return esdc.AddGameIDs(ids...)
}

// AddEnumStatIDs adds the "enum_stats" edge to the EnumStat entity by IDs.
func (esdc *EnumStatDescriptionCreate) AddEnumStatIDs(ids ...guidgql.GUID) *EnumStatDescriptionCreate {
	esdc.mutation.AddEnumStatIDs(ids...)
	return esdc
}

// AddEnumStats adds the "enum_stats" edges to the EnumStat entity.
func (esdc *EnumStatDescriptionCreate) AddEnumStats(e ...*EnumStat) *EnumStatDescriptionCreate {
	ids := make([]guidgql.GUID, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return esdc.AddEnumStatIDs(ids...)
}

// Mutation returns the EnumStatDescriptionMutation object of the builder.
func (esdc *EnumStatDescriptionCreate) Mutation() *EnumStatDescriptionMutation {
	return esdc.mutation
}

// Save creates the EnumStatDescription in the database.
func (esdc *EnumStatDescriptionCreate) Save(ctx context.Context) (*EnumStatDescription, error) {
	var (
		err  error
		node *EnumStatDescription
	)
	esdc.defaults()
	if len(esdc.hooks) == 0 {
		if err = esdc.check(); err != nil {
			return nil, err
		}
		node, err = esdc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnumStatDescriptionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = esdc.check(); err != nil {
				return nil, err
			}
			esdc.mutation = mutation
			if node, err = esdc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(esdc.hooks) - 1; i >= 0; i-- {
			if esdc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = esdc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, esdc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*EnumStatDescription)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EnumStatDescriptionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (esdc *EnumStatDescriptionCreate) SaveX(ctx context.Context) *EnumStatDescription {
	v, err := esdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (esdc *EnumStatDescriptionCreate) Exec(ctx context.Context) error {
	_, err := esdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esdc *EnumStatDescriptionCreate) ExecX(ctx context.Context) {
	if err := esdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (esdc *EnumStatDescriptionCreate) defaults() {
	if _, ok := esdc.mutation.ID(); !ok {
		v := enumstatdescription.DefaultID()
		esdc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (esdc *EnumStatDescriptionCreate) check() error {
	if _, ok := esdc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "EnumStatDescription.name"`)}
	}
	if v, ok := esdc.mutation.Name(); ok {
		if err := enumstatdescription.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "EnumStatDescription.name": %w`, err)}
		}
	}
	if _, ok := esdc.mutation.PossibleValues(); !ok {
		return &ValidationError{Name: "possible_values", err: errors.New(`ent: missing required field "EnumStatDescription.possible_values"`)}
	}
	return nil
}

func (esdc *EnumStatDescriptionCreate) sqlSave(ctx context.Context) (*EnumStatDescription, error) {
	_node, _spec := esdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, esdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*guidgql.GUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (esdc *EnumStatDescriptionCreate) createSpec() (*EnumStatDescription, *sqlgraph.CreateSpec) {
	var (
		_node = &EnumStatDescription{config: esdc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: enumstatdescription.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: enumstatdescription.FieldID,
			},
		}
	)
	_spec.OnConflict = esdc.conflict
	if id, ok := esdc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := esdc.mutation.Name(); ok {
		_spec.SetField(enumstatdescription.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := esdc.mutation.Description(); ok {
		_spec.SetField(enumstatdescription.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := esdc.mutation.PossibleValues(); ok {
		_spec.SetField(enumstatdescription.FieldPossibleValues, field.TypeJSON, value)
		_node.PossibleValues = value
	}
	if nodes := esdc.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   enumstatdescription.GameTable,
			Columns: enumstatdescription.GamePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: game.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := esdc.mutation.EnumStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   enumstatdescription.EnumStatsTable,
			Columns: []string{enumstatdescription.EnumStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: enumstat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EnumStatDescription.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EnumStatDescriptionUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (esdc *EnumStatDescriptionCreate) OnConflict(opts ...sql.ConflictOption) *EnumStatDescriptionUpsertOne {
	esdc.conflict = opts
	return &EnumStatDescriptionUpsertOne{
		create: esdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EnumStatDescription.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (esdc *EnumStatDescriptionCreate) OnConflictColumns(columns ...string) *EnumStatDescriptionUpsertOne {
	esdc.conflict = append(esdc.conflict, sql.ConflictColumns(columns...))
	return &EnumStatDescriptionUpsertOne{
		create: esdc,
	}
}

type (
	// EnumStatDescriptionUpsertOne is the builder for "upsert"-ing
	//  one EnumStatDescription node.
	EnumStatDescriptionUpsertOne struct {
		create *EnumStatDescriptionCreate
	}

	// EnumStatDescriptionUpsert is the "OnConflict" setter.
	EnumStatDescriptionUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *EnumStatDescriptionUpsert) SetName(v string) *EnumStatDescriptionUpsert {
	u.Set(enumstatdescription.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *EnumStatDescriptionUpsert) UpdateName() *EnumStatDescriptionUpsert {
	u.SetExcluded(enumstatdescription.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *EnumStatDescriptionUpsert) SetDescription(v string) *EnumStatDescriptionUpsert {
	u.Set(enumstatdescription.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *EnumStatDescriptionUpsert) UpdateDescription() *EnumStatDescriptionUpsert {
	u.SetExcluded(enumstatdescription.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *EnumStatDescriptionUpsert) ClearDescription() *EnumStatDescriptionUpsert {
	u.SetNull(enumstatdescription.FieldDescription)
	return u
}

// SetPossibleValues sets the "possible_values" field.
func (u *EnumStatDescriptionUpsert) SetPossibleValues(v []string) *EnumStatDescriptionUpsert {
	u.Set(enumstatdescription.FieldPossibleValues, v)
	return u
}

// UpdatePossibleValues sets the "possible_values" field to the value that was provided on create.
func (u *EnumStatDescriptionUpsert) UpdatePossibleValues() *EnumStatDescriptionUpsert {
	u.SetExcluded(enumstatdescription.FieldPossibleValues)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.EnumStatDescription.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(enumstatdescription.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *EnumStatDescriptionUpsertOne) UpdateNewValues() *EnumStatDescriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(enumstatdescription.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EnumStatDescription.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EnumStatDescriptionUpsertOne) Ignore() *EnumStatDescriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EnumStatDescriptionUpsertOne) DoNothing() *EnumStatDescriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EnumStatDescriptionCreate.OnConflict
// documentation for more info.
func (u *EnumStatDescriptionUpsertOne) Update(set func(*EnumStatDescriptionUpsert)) *EnumStatDescriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EnumStatDescriptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *EnumStatDescriptionUpsertOne) SetName(v string) *EnumStatDescriptionUpsertOne {
	return u.Update(func(s *EnumStatDescriptionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *EnumStatDescriptionUpsertOne) UpdateName() *EnumStatDescriptionUpsertOne {
	return u.Update(func(s *EnumStatDescriptionUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *EnumStatDescriptionUpsertOne) SetDescription(v string) *EnumStatDescriptionUpsertOne {
	return u.Update(func(s *EnumStatDescriptionUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *EnumStatDescriptionUpsertOne) UpdateDescription() *EnumStatDescriptionUpsertOne {
	return u.Update(func(s *EnumStatDescriptionUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *EnumStatDescriptionUpsertOne) ClearDescription() *EnumStatDescriptionUpsertOne {
	return u.Update(func(s *EnumStatDescriptionUpsert) {
		s.ClearDescription()
	})
}

// SetPossibleValues sets the "possible_values" field.
func (u *EnumStatDescriptionUpsertOne) SetPossibleValues(v []string) *EnumStatDescriptionUpsertOne {
	return u.Update(func(s *EnumStatDescriptionUpsert) {
		s.SetPossibleValues(v)
	})
}

// UpdatePossibleValues sets the "possible_values" field to the value that was provided on create.
func (u *EnumStatDescriptionUpsertOne) UpdatePossibleValues() *EnumStatDescriptionUpsertOne {
	return u.Update(func(s *EnumStatDescriptionUpsert) {
		s.UpdatePossibleValues()
	})
}

// Exec executes the query.
func (u *EnumStatDescriptionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EnumStatDescriptionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EnumStatDescriptionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EnumStatDescriptionUpsertOne) ID(ctx context.Context) (id guidgql.GUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: EnumStatDescriptionUpsertOne.ID is not supported by MySQL driver. Use EnumStatDescriptionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EnumStatDescriptionUpsertOne) IDX(ctx context.Context) guidgql.GUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EnumStatDescriptionCreateBulk is the builder for creating many EnumStatDescription entities in bulk.
type EnumStatDescriptionCreateBulk struct {
	config
	builders []*EnumStatDescriptionCreate
	conflict []sql.ConflictOption
}

// Save creates the EnumStatDescription entities in the database.
func (esdcb *EnumStatDescriptionCreateBulk) Save(ctx context.Context) ([]*EnumStatDescription, error) {
	specs := make([]*sqlgraph.CreateSpec, len(esdcb.builders))
	nodes := make([]*EnumStatDescription, len(esdcb.builders))
	mutators := make([]Mutator, len(esdcb.builders))
	for i := range esdcb.builders {
		func(i int, root context.Context) {
			builder := esdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EnumStatDescriptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, esdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = esdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, esdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, esdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (esdcb *EnumStatDescriptionCreateBulk) SaveX(ctx context.Context) []*EnumStatDescription {
	v, err := esdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (esdcb *EnumStatDescriptionCreateBulk) Exec(ctx context.Context) error {
	_, err := esdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esdcb *EnumStatDescriptionCreateBulk) ExecX(ctx context.Context) {
	if err := esdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EnumStatDescription.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EnumStatDescriptionUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (esdcb *EnumStatDescriptionCreateBulk) OnConflict(opts ...sql.ConflictOption) *EnumStatDescriptionUpsertBulk {
	esdcb.conflict = opts
	return &EnumStatDescriptionUpsertBulk{
		create: esdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EnumStatDescription.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (esdcb *EnumStatDescriptionCreateBulk) OnConflictColumns(columns ...string) *EnumStatDescriptionUpsertBulk {
	esdcb.conflict = append(esdcb.conflict, sql.ConflictColumns(columns...))
	return &EnumStatDescriptionUpsertBulk{
		create: esdcb,
	}
}

// EnumStatDescriptionUpsertBulk is the builder for "upsert"-ing
// a bulk of EnumStatDescription nodes.
type EnumStatDescriptionUpsertBulk struct {
	create *EnumStatDescriptionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.EnumStatDescription.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(enumstatdescription.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *EnumStatDescriptionUpsertBulk) UpdateNewValues() *EnumStatDescriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(enumstatdescription.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EnumStatDescription.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EnumStatDescriptionUpsertBulk) Ignore() *EnumStatDescriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EnumStatDescriptionUpsertBulk) DoNothing() *EnumStatDescriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EnumStatDescriptionCreateBulk.OnConflict
// documentation for more info.
func (u *EnumStatDescriptionUpsertBulk) Update(set func(*EnumStatDescriptionUpsert)) *EnumStatDescriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EnumStatDescriptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *EnumStatDescriptionUpsertBulk) SetName(v string) *EnumStatDescriptionUpsertBulk {
	return u.Update(func(s *EnumStatDescriptionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *EnumStatDescriptionUpsertBulk) UpdateName() *EnumStatDescriptionUpsertBulk {
	return u.Update(func(s *EnumStatDescriptionUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *EnumStatDescriptionUpsertBulk) SetDescription(v string) *EnumStatDescriptionUpsertBulk {
	return u.Update(func(s *EnumStatDescriptionUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *EnumStatDescriptionUpsertBulk) UpdateDescription() *EnumStatDescriptionUpsertBulk {
	return u.Update(func(s *EnumStatDescriptionUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *EnumStatDescriptionUpsertBulk) ClearDescription() *EnumStatDescriptionUpsertBulk {
	return u.Update(func(s *EnumStatDescriptionUpsert) {
		s.ClearDescription()
	})
}

// SetPossibleValues sets the "possible_values" field.
func (u *EnumStatDescriptionUpsertBulk) SetPossibleValues(v []string) *EnumStatDescriptionUpsertBulk {
	return u.Update(func(s *EnumStatDescriptionUpsert) {
		s.SetPossibleValues(v)
	})
}

// UpdatePossibleValues sets the "possible_values" field to the value that was provided on create.
func (u *EnumStatDescriptionUpsertBulk) UpdatePossibleValues() *EnumStatDescriptionUpsertBulk {
	return u.Update(func(s *EnumStatDescriptionUpsert) {
		s.UpdatePossibleValues()
	})
}

// Exec executes the query.
func (u *EnumStatDescriptionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EnumStatDescriptionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EnumStatDescriptionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EnumStatDescriptionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
