// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/open-boardgame-stats/backend/internal/ent/groupmembershipapplication"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
)

// GroupMembershipApplication is the model entity for the GroupMembershipApplication schema.
type GroupMembershipApplication struct {
	config `json:"-"`
	// ID of the ent.
	ID guidgql.GUID `json:"id,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GroupMembershipApplicationQuery when eager-loading is set.
	Edges GroupMembershipApplicationEdges `json:"edges"`
}

// GroupMembershipApplicationEdges holds the relations/edges for other nodes in the graph.
type GroupMembershipApplicationEdges struct {
	// User holds the value of the user edge.
	User []*User `json:"user,omitempty"`
	// Group holds the value of the group edge.
	Group []*Group `json:"group,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedUser  map[string][]*User
	namedGroup map[string][]*Group
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e GroupMembershipApplicationEdges) UserOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// GroupOrErr returns the Group value or an error if the edge
// was not loaded in eager-loading.
func (e GroupMembershipApplicationEdges) GroupOrErr() ([]*Group, error) {
	if e.loadedTypes[1] {
		return e.Group, nil
	}
	return nil, &NotLoadedError{edge: "group"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GroupMembershipApplication) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case groupmembershipapplication.FieldID:
			values[i] = new(guidgql.GUID)
		case groupmembershipapplication.FieldMessage:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type GroupMembershipApplication", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GroupMembershipApplication fields.
func (gma *GroupMembershipApplication) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case groupmembershipapplication.FieldID:
			if value, ok := values[i].(*guidgql.GUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				gma.ID = *value
			}
		case groupmembershipapplication.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				gma.Message = value.String
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the GroupMembershipApplication entity.
func (gma *GroupMembershipApplication) QueryUser() *UserQuery {
	return (&GroupMembershipApplicationClient{config: gma.config}).QueryUser(gma)
}

// QueryGroup queries the "group" edge of the GroupMembershipApplication entity.
func (gma *GroupMembershipApplication) QueryGroup() *GroupQuery {
	return (&GroupMembershipApplicationClient{config: gma.config}).QueryGroup(gma)
}

// Update returns a builder for updating this GroupMembershipApplication.
// Note that you need to call GroupMembershipApplication.Unwrap() before calling this method if this GroupMembershipApplication
// was returned from a transaction, and the transaction was committed or rolled back.
func (gma *GroupMembershipApplication) Update() *GroupMembershipApplicationUpdateOne {
	return (&GroupMembershipApplicationClient{config: gma.config}).UpdateOne(gma)
}

// Unwrap unwraps the GroupMembershipApplication entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gma *GroupMembershipApplication) Unwrap() *GroupMembershipApplication {
	_tx, ok := gma.config.driver.(*txDriver)
	if !ok {
		panic("ent: GroupMembershipApplication is not a transactional entity")
	}
	gma.config.driver = _tx.drv
	return gma
}

// String implements the fmt.Stringer.
func (gma *GroupMembershipApplication) String() string {
	var builder strings.Builder
	builder.WriteString("GroupMembershipApplication(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gma.ID))
	builder.WriteString("message=")
	builder.WriteString(gma.Message)
	builder.WriteByte(')')
	return builder.String()
}

// NamedUser returns the User named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gma *GroupMembershipApplication) NamedUser(name string) ([]*User, error) {
	if gma.Edges.namedUser == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gma.Edges.namedUser[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gma *GroupMembershipApplication) appendNamedUser(name string, edges ...*User) {
	if gma.Edges.namedUser == nil {
		gma.Edges.namedUser = make(map[string][]*User)
	}
	if len(edges) == 0 {
		gma.Edges.namedUser[name] = []*User{}
	} else {
		gma.Edges.namedUser[name] = append(gma.Edges.namedUser[name], edges...)
	}
}

// NamedGroup returns the Group named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gma *GroupMembershipApplication) NamedGroup(name string) ([]*Group, error) {
	if gma.Edges.namedGroup == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gma.Edges.namedGroup[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gma *GroupMembershipApplication) appendNamedGroup(name string, edges ...*Group) {
	if gma.Edges.namedGroup == nil {
		gma.Edges.namedGroup = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		gma.Edges.namedGroup[name] = []*Group{}
	} else {
		gma.Edges.namedGroup[name] = append(gma.Edges.namedGroup[name], edges...)
	}
}

// GroupMembershipApplications is a parsable slice of GroupMembershipApplication.
type GroupMembershipApplications []*GroupMembershipApplication

func (gma GroupMembershipApplications) config(cfg config) {
	for _i := range gma {
		gma[_i].config = cfg
	}
}
