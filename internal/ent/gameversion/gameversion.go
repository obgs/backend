// Code generated by ent, DO NOT EDIT.

package gameversion

import (
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
)

const (
	// Label holds the string label denoting the gameversion type in the database.
	Label = "game_version"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVersionNumber holds the string denoting the version_number field in the database.
	FieldVersionNumber = "version_number"
	// EdgeGame holds the string denoting the game edge name in mutations.
	EdgeGame = "game"
	// EdgeStatDescriptions holds the string denoting the stat_descriptions edge name in mutations.
	EdgeStatDescriptions = "stat_descriptions"
	// EdgeMatches holds the string denoting the matches edge name in mutations.
	EdgeMatches = "matches"
	// Table holds the table name of the gameversion in the database.
	Table = "game_versions"
	// GameTable is the table that holds the game relation/edge.
	GameTable = "game_versions"
	// GameInverseTable is the table name for the Game entity.
	// It exists in this package in order to avoid circular dependency with the "game" package.
	GameInverseTable = "games"
	// GameColumn is the table column denoting the game relation/edge.
	GameColumn = "game_version_game"
	// StatDescriptionsTable is the table that holds the stat_descriptions relation/edge. The primary key declared below.
	StatDescriptionsTable = "stat_description_game_version"
	// StatDescriptionsInverseTable is the table name for the StatDescription entity.
	// It exists in this package in order to avoid circular dependency with the "statdescription" package.
	StatDescriptionsInverseTable = "stat_descriptions"
	// MatchesTable is the table that holds the matches relation/edge.
	MatchesTable = "matches"
	// MatchesInverseTable is the table name for the Match entity.
	// It exists in this package in order to avoid circular dependency with the "match" package.
	MatchesInverseTable = "matches"
	// MatchesColumn is the table column denoting the matches relation/edge.
	MatchesColumn = "game_version_matches"
)

// Columns holds all SQL columns for gameversion fields.
var Columns = []string{
	FieldID,
	FieldVersionNumber,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "game_versions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"game_version_game",
}

var (
	// StatDescriptionsPrimaryKey and StatDescriptionsColumn2 are the table columns denoting the
	// primary key for the stat_descriptions relation (M2M).
	StatDescriptionsPrimaryKey = []string{"stat_description_id", "game_version_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultVersionNumber holds the default value on creation for the "version_number" field.
	DefaultVersionNumber int
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() guidgql.GUID
)
