// Code generated by ent, DO NOT EDIT.

package groupsettings

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/open-boardgame-stats/backend/internal/ent/enums"
	"github.com/open-boardgame-stats/backend/internal/ent/predicate"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
)

// ID filters vertices based on their ID field.
func ID(id guidgql.GUID) predicate.GroupSettings {
	return predicate.GroupSettings(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id guidgql.GUID) predicate.GroupSettings {
	return predicate.GroupSettings(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id guidgql.GUID) predicate.GroupSettings {
	return predicate.GroupSettings(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...guidgql.GUID) predicate.GroupSettings {
	return predicate.GroupSettings(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...guidgql.GUID) predicate.GroupSettings {
	return predicate.GroupSettings(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id guidgql.GUID) predicate.GroupSettings {
	return predicate.GroupSettings(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id guidgql.GUID) predicate.GroupSettings {
	return predicate.GroupSettings(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id guidgql.GUID) predicate.GroupSettings {
	return predicate.GroupSettings(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id guidgql.GUID) predicate.GroupSettings {
	return predicate.GroupSettings(sql.FieldLTE(FieldID, id))
}

// VisibilityEQ applies the EQ predicate on the "visibility" field.
func VisibilityEQ(v Visibility) predicate.GroupSettings {
	return predicate.GroupSettings(sql.FieldEQ(FieldVisibility, v))
}

// VisibilityNEQ applies the NEQ predicate on the "visibility" field.
func VisibilityNEQ(v Visibility) predicate.GroupSettings {
	return predicate.GroupSettings(sql.FieldNEQ(FieldVisibility, v))
}

// VisibilityIn applies the In predicate on the "visibility" field.
func VisibilityIn(vs ...Visibility) predicate.GroupSettings {
	return predicate.GroupSettings(sql.FieldIn(FieldVisibility, vs...))
}

// VisibilityNotIn applies the NotIn predicate on the "visibility" field.
func VisibilityNotIn(vs ...Visibility) predicate.GroupSettings {
	return predicate.GroupSettings(sql.FieldNotIn(FieldVisibility, vs...))
}

// JoinPolicyEQ applies the EQ predicate on the "join_policy" field.
func JoinPolicyEQ(v JoinPolicy) predicate.GroupSettings {
	return predicate.GroupSettings(sql.FieldEQ(FieldJoinPolicy, v))
}

// JoinPolicyNEQ applies the NEQ predicate on the "join_policy" field.
func JoinPolicyNEQ(v JoinPolicy) predicate.GroupSettings {
	return predicate.GroupSettings(sql.FieldNEQ(FieldJoinPolicy, v))
}

// JoinPolicyIn applies the In predicate on the "join_policy" field.
func JoinPolicyIn(vs ...JoinPolicy) predicate.GroupSettings {
	return predicate.GroupSettings(sql.FieldIn(FieldJoinPolicy, vs...))
}

// JoinPolicyNotIn applies the NotIn predicate on the "join_policy" field.
func JoinPolicyNotIn(vs ...JoinPolicy) predicate.GroupSettings {
	return predicate.GroupSettings(sql.FieldNotIn(FieldJoinPolicy, vs...))
}

// MinimumRoleToInviteEQ applies the EQ predicate on the "minimum_role_to_invite" field.
func MinimumRoleToInviteEQ(v enums.Role) predicate.GroupSettings {
	vc := v
	return predicate.GroupSettings(sql.FieldEQ(FieldMinimumRoleToInvite, vc))
}

// MinimumRoleToInviteNEQ applies the NEQ predicate on the "minimum_role_to_invite" field.
func MinimumRoleToInviteNEQ(v enums.Role) predicate.GroupSettings {
	vc := v
	return predicate.GroupSettings(sql.FieldNEQ(FieldMinimumRoleToInvite, vc))
}

// MinimumRoleToInviteIn applies the In predicate on the "minimum_role_to_invite" field.
func MinimumRoleToInviteIn(vs ...enums.Role) predicate.GroupSettings {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GroupSettings(sql.FieldIn(FieldMinimumRoleToInvite, v...))
}

// MinimumRoleToInviteNotIn applies the NotIn predicate on the "minimum_role_to_invite" field.
func MinimumRoleToInviteNotIn(vs ...enums.Role) predicate.GroupSettings {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GroupSettings(sql.FieldNotIn(FieldMinimumRoleToInvite, v...))
}

// MinimumRoleToInviteIsNil applies the IsNil predicate on the "minimum_role_to_invite" field.
func MinimumRoleToInviteIsNil() predicate.GroupSettings {
	return predicate.GroupSettings(sql.FieldIsNull(FieldMinimumRoleToInvite))
}

// MinimumRoleToInviteNotNil applies the NotNil predicate on the "minimum_role_to_invite" field.
func MinimumRoleToInviteNotNil() predicate.GroupSettings {
	return predicate.GroupSettings(sql.FieldNotNull(FieldMinimumRoleToInvite))
}

// HasGroup applies the HasEdge predicate on the "group" edge.
func HasGroup() predicate.GroupSettings {
	return predicate.GroupSettings(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, GroupTable, GroupColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupWith applies the HasEdge predicate on the "group" edge with a given conditions (other predicates).
func HasGroupWith(preds ...predicate.Group) predicate.GroupSettings {
	return predicate.GroupSettings(func(s *sql.Selector) {
		step := newGroupStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GroupSettings) predicate.GroupSettings {
	return predicate.GroupSettings(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GroupSettings) predicate.GroupSettings {
	return predicate.GroupSettings(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GroupSettings) predicate.GroupSettings {
	return predicate.GroupSettings(sql.NotPredicates(p))
}
