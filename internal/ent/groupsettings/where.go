// Code generated by ent, DO NOT EDIT.

package groupsettings

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/open-boardgame-stats/backend/internal/ent/enums"
	"github.com/open-boardgame-stats/backend/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.GroupSettings {
	return predicate.GroupSettings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.GroupSettings {
	return predicate.GroupSettings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.GroupSettings {
	return predicate.GroupSettings(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.GroupSettings {
	return predicate.GroupSettings(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.GroupSettings {
	return predicate.GroupSettings(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.GroupSettings {
	return predicate.GroupSettings(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.GroupSettings {
	return predicate.GroupSettings(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.GroupSettings {
	return predicate.GroupSettings(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.GroupSettings {
	return predicate.GroupSettings(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// VisibilityEQ applies the EQ predicate on the "visibility" field.
func VisibilityEQ(v Visibility) predicate.GroupSettings {
	return predicate.GroupSettings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVisibility), v))
	})
}

// VisibilityNEQ applies the NEQ predicate on the "visibility" field.
func VisibilityNEQ(v Visibility) predicate.GroupSettings {
	return predicate.GroupSettings(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVisibility), v))
	})
}

// VisibilityIn applies the In predicate on the "visibility" field.
func VisibilityIn(vs ...Visibility) predicate.GroupSettings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GroupSettings(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldVisibility), v...))
	})
}

// VisibilityNotIn applies the NotIn predicate on the "visibility" field.
func VisibilityNotIn(vs ...Visibility) predicate.GroupSettings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GroupSettings(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldVisibility), v...))
	})
}

// JoinPolicyEQ applies the EQ predicate on the "join_policy" field.
func JoinPolicyEQ(v JoinPolicy) predicate.GroupSettings {
	return predicate.GroupSettings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJoinPolicy), v))
	})
}

// JoinPolicyNEQ applies the NEQ predicate on the "join_policy" field.
func JoinPolicyNEQ(v JoinPolicy) predicate.GroupSettings {
	return predicate.GroupSettings(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldJoinPolicy), v))
	})
}

// JoinPolicyIn applies the In predicate on the "join_policy" field.
func JoinPolicyIn(vs ...JoinPolicy) predicate.GroupSettings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GroupSettings(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldJoinPolicy), v...))
	})
}

// JoinPolicyNotIn applies the NotIn predicate on the "join_policy" field.
func JoinPolicyNotIn(vs ...JoinPolicy) predicate.GroupSettings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GroupSettings(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldJoinPolicy), v...))
	})
}

// MinimumRoleToInviteEQ applies the EQ predicate on the "minimum_role_to_invite" field.
func MinimumRoleToInviteEQ(v enums.Role) predicate.GroupSettings {
	vc := v
	return predicate.GroupSettings(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMinimumRoleToInvite), vc))
	})
}

// MinimumRoleToInviteNEQ applies the NEQ predicate on the "minimum_role_to_invite" field.
func MinimumRoleToInviteNEQ(v enums.Role) predicate.GroupSettings {
	vc := v
	return predicate.GroupSettings(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMinimumRoleToInvite), vc))
	})
}

// MinimumRoleToInviteIn applies the In predicate on the "minimum_role_to_invite" field.
func MinimumRoleToInviteIn(vs ...enums.Role) predicate.GroupSettings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GroupSettings(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMinimumRoleToInvite), v...))
	})
}

// MinimumRoleToInviteNotIn applies the NotIn predicate on the "minimum_role_to_invite" field.
func MinimumRoleToInviteNotIn(vs ...enums.Role) predicate.GroupSettings {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.GroupSettings(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMinimumRoleToInvite), v...))
	})
}

// MinimumRoleToInviteIsNil applies the IsNil predicate on the "minimum_role_to_invite" field.
func MinimumRoleToInviteIsNil() predicate.GroupSettings {
	return predicate.GroupSettings(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMinimumRoleToInvite)))
	})
}

// MinimumRoleToInviteNotNil applies the NotNil predicate on the "minimum_role_to_invite" field.
func MinimumRoleToInviteNotNil() predicate.GroupSettings {
	return predicate.GroupSettings(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMinimumRoleToInvite)))
	})
}

// HasGroup applies the HasEdge predicate on the "group" edge.
func HasGroup() predicate.GroupSettings {
	return predicate.GroupSettings(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GroupTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, GroupTable, GroupColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupWith applies the HasEdge predicate on the "group" edge with a given conditions (other predicates).
func HasGroupWith(preds ...predicate.Group) predicate.GroupSettings {
	return predicate.GroupSettings(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GroupInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, GroupTable, GroupColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.GroupSettings) predicate.GroupSettings {
	return predicate.GroupSettings(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.GroupSettings) predicate.GroupSettings {
	return predicate.GroupSettings(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.GroupSettings) predicate.GroupSettings {
	return predicate.GroupSettings(func(s *sql.Selector) {
		p(s.Not())
	})
}
