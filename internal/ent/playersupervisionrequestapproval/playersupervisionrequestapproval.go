// Code generated by ent, DO NOT EDIT.

package playersupervisionrequestapproval

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
)

const (
	// Label holds the string label denoting the playersupervisionrequestapproval type in the database.
	Label = "player_supervision_request_approval"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldApproved holds the string denoting the approved field in the database.
	FieldApproved = "approved"
	// EdgeApprover holds the string denoting the approver edge name in mutations.
	EdgeApprover = "approver"
	// EdgeSupervisionRequest holds the string denoting the supervision_request edge name in mutations.
	EdgeSupervisionRequest = "supervision_request"
	// Table holds the table name of the playersupervisionrequestapproval in the database.
	Table = "player_supervision_request_approvals"
	// ApproverTable is the table that holds the approver relation/edge.
	ApproverTable = "player_supervision_request_approvals"
	// ApproverInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	ApproverInverseTable = "users"
	// ApproverColumn is the table column denoting the approver relation/edge.
	ApproverColumn = "user_supervision_request_approvals"
	// SupervisionRequestTable is the table that holds the supervision_request relation/edge.
	SupervisionRequestTable = "player_supervision_request_approvals"
	// SupervisionRequestInverseTable is the table name for the PlayerSupervisionRequest entity.
	// It exists in this package in order to avoid circular dependency with the "playersupervisionrequest" package.
	SupervisionRequestInverseTable = "player_supervision_requests"
	// SupervisionRequestColumn is the table column denoting the supervision_request relation/edge.
	SupervisionRequestColumn = "player_supervision_request_approvals"
)

// Columns holds all SQL columns for playersupervisionrequestapproval fields.
var Columns = []string{
	FieldID,
	FieldApproved,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "player_supervision_request_approvals"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"player_supervision_request_approvals",
	"user_supervision_request_approvals",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() guidgql.GUID
)

// OrderOption defines the ordering options for the PlayerSupervisionRequestApproval queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByApproved orders the results by the approved field.
func ByApproved(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldApproved, opts...).ToFunc()
}

// ByApproverField orders the results by approver field.
func ByApproverField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newApproverStep(), sql.OrderByField(field, opts...))
	}
}

// BySupervisionRequestField orders the results by supervision_request field.
func BySupervisionRequestField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSupervisionRequestStep(), sql.OrderByField(field, opts...))
	}
}
func newApproverStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ApproverInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ApproverTable, ApproverColumn),
	)
}
func newSupervisionRequestStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SupervisionRequestInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SupervisionRequestTable, SupervisionRequestColumn),
	)
}
