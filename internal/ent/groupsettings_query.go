// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/open-boardgame-stats/backend/internal/ent/group"
	"github.com/open-boardgame-stats/backend/internal/ent/groupsettings"
	"github.com/open-boardgame-stats/backend/internal/ent/predicate"
)

// GroupSettingsQuery is the builder for querying GroupSettings entities.
type GroupSettingsQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.GroupSettings
	withGroup  *GroupQuery
	withFKs    bool
	modifiers  []func(*sql.Selector)
	loadTotal  []func(context.Context, []*GroupSettings) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GroupSettingsQuery builder.
func (gsq *GroupSettingsQuery) Where(ps ...predicate.GroupSettings) *GroupSettingsQuery {
	gsq.predicates = append(gsq.predicates, ps...)
	return gsq
}

// Limit adds a limit step to the query.
func (gsq *GroupSettingsQuery) Limit(limit int) *GroupSettingsQuery {
	gsq.limit = &limit
	return gsq
}

// Offset adds an offset step to the query.
func (gsq *GroupSettingsQuery) Offset(offset int) *GroupSettingsQuery {
	gsq.offset = &offset
	return gsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (gsq *GroupSettingsQuery) Unique(unique bool) *GroupSettingsQuery {
	gsq.unique = &unique
	return gsq
}

// Order adds an order step to the query.
func (gsq *GroupSettingsQuery) Order(o ...OrderFunc) *GroupSettingsQuery {
	gsq.order = append(gsq.order, o...)
	return gsq
}

// QueryGroup chains the current query on the "group" edge.
func (gsq *GroupSettingsQuery) QueryGroup() *GroupQuery {
	query := &GroupQuery{config: gsq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(groupsettings.Table, groupsettings.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, groupsettings.GroupTable, groupsettings.GroupColumn),
		)
		fromU = sqlgraph.SetNeighbors(gsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GroupSettings entity from the query.
// Returns a *NotFoundError when no GroupSettings was found.
func (gsq *GroupSettingsQuery) First(ctx context.Context) (*GroupSettings, error) {
	nodes, err := gsq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{groupsettings.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (gsq *GroupSettingsQuery) FirstX(ctx context.Context) *GroupSettings {
	node, err := gsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first GroupSettings ID from the query.
// Returns a *NotFoundError when no GroupSettings ID was found.
func (gsq *GroupSettingsQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = gsq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{groupsettings.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (gsq *GroupSettingsQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := gsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single GroupSettings entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one GroupSettings entity is found.
// Returns a *NotFoundError when no GroupSettings entities are found.
func (gsq *GroupSettingsQuery) Only(ctx context.Context) (*GroupSettings, error) {
	nodes, err := gsq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{groupsettings.Label}
	default:
		return nil, &NotSingularError{groupsettings.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (gsq *GroupSettingsQuery) OnlyX(ctx context.Context) *GroupSettings {
	node, err := gsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only GroupSettings ID in the query.
// Returns a *NotSingularError when more than one GroupSettings ID is found.
// Returns a *NotFoundError when no entities are found.
func (gsq *GroupSettingsQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = gsq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{groupsettings.Label}
	default:
		err = &NotSingularError{groupsettings.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (gsq *GroupSettingsQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := gsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GroupSettingsSlice.
func (gsq *GroupSettingsQuery) All(ctx context.Context) ([]*GroupSettings, error) {
	if err := gsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return gsq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (gsq *GroupSettingsQuery) AllX(ctx context.Context) []*GroupSettings {
	nodes, err := gsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of GroupSettings IDs.
func (gsq *GroupSettingsQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := gsq.Select(groupsettings.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (gsq *GroupSettingsQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := gsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (gsq *GroupSettingsQuery) Count(ctx context.Context) (int, error) {
	if err := gsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return gsq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (gsq *GroupSettingsQuery) CountX(ctx context.Context) int {
	count, err := gsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (gsq *GroupSettingsQuery) Exist(ctx context.Context) (bool, error) {
	if err := gsq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return gsq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (gsq *GroupSettingsQuery) ExistX(ctx context.Context) bool {
	exist, err := gsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GroupSettingsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (gsq *GroupSettingsQuery) Clone() *GroupSettingsQuery {
	if gsq == nil {
		return nil
	}
	return &GroupSettingsQuery{
		config:     gsq.config,
		limit:      gsq.limit,
		offset:     gsq.offset,
		order:      append([]OrderFunc{}, gsq.order...),
		predicates: append([]predicate.GroupSettings{}, gsq.predicates...),
		withGroup:  gsq.withGroup.Clone(),
		// clone intermediate query.
		sql:    gsq.sql.Clone(),
		path:   gsq.path,
		unique: gsq.unique,
	}
}

// WithGroup tells the query-builder to eager-load the nodes that are connected to
// the "group" edge. The optional arguments are used to configure the query builder of the edge.
func (gsq *GroupSettingsQuery) WithGroup(opts ...func(*GroupQuery)) *GroupSettingsQuery {
	query := &GroupQuery{config: gsq.config}
	for _, opt := range opts {
		opt(query)
	}
	gsq.withGroup = query
	return gsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Visibility groupsettings.Visibility `json:"visibility,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GroupSettings.Query().
//		GroupBy(groupsettings.FieldVisibility).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (gsq *GroupSettingsQuery) GroupBy(field string, fields ...string) *GroupSettingsGroupBy {
	grbuild := &GroupSettingsGroupBy{config: gsq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := gsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return gsq.sqlQuery(ctx), nil
	}
	grbuild.label = groupsettings.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Visibility groupsettings.Visibility `json:"visibility,omitempty"`
//	}
//
//	client.GroupSettings.Query().
//		Select(groupsettings.FieldVisibility).
//		Scan(ctx, &v)
func (gsq *GroupSettingsQuery) Select(fields ...string) *GroupSettingsSelect {
	gsq.fields = append(gsq.fields, fields...)
	selbuild := &GroupSettingsSelect{GroupSettingsQuery: gsq}
	selbuild.label = groupsettings.Label
	selbuild.flds, selbuild.scan = &gsq.fields, selbuild.Scan
	return selbuild
}

func (gsq *GroupSettingsQuery) prepareQuery(ctx context.Context) error {
	for _, f := range gsq.fields {
		if !groupsettings.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if gsq.path != nil {
		prev, err := gsq.path(ctx)
		if err != nil {
			return err
		}
		gsq.sql = prev
	}
	return nil
}

func (gsq *GroupSettingsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*GroupSettings, error) {
	var (
		nodes       = []*GroupSettings{}
		withFKs     = gsq.withFKs
		_spec       = gsq.querySpec()
		loadedTypes = [1]bool{
			gsq.withGroup != nil,
		}
	)
	if gsq.withGroup != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, groupsettings.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*GroupSettings).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &GroupSettings{config: gsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(gsq.modifiers) > 0 {
		_spec.Modifiers = gsq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, gsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := gsq.withGroup; query != nil {
		if err := gsq.loadGroup(ctx, query, nodes, nil,
			func(n *GroupSettings, e *Group) { n.Edges.Group = e }); err != nil {
			return nil, err
		}
	}
	for i := range gsq.loadTotal {
		if err := gsq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (gsq *GroupSettingsQuery) loadGroup(ctx context.Context, query *GroupQuery, nodes []*GroupSettings, init func(*GroupSettings), assign func(*GroupSettings, *Group)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*GroupSettings)
	for i := range nodes {
		if nodes[i].group_settings == nil {
			continue
		}
		fk := *nodes[i].group_settings
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(group.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "group_settings" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (gsq *GroupSettingsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := gsq.querySpec()
	if len(gsq.modifiers) > 0 {
		_spec.Modifiers = gsq.modifiers
	}
	_spec.Node.Columns = gsq.fields
	if len(gsq.fields) > 0 {
		_spec.Unique = gsq.unique != nil && *gsq.unique
	}
	return sqlgraph.CountNodes(ctx, gsq.driver, _spec)
}

func (gsq *GroupSettingsQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := gsq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (gsq *GroupSettingsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   groupsettings.Table,
			Columns: groupsettings.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: groupsettings.FieldID,
			},
		},
		From:   gsq.sql,
		Unique: true,
	}
	if unique := gsq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := gsq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, groupsettings.FieldID)
		for i := range fields {
			if fields[i] != groupsettings.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := gsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := gsq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := gsq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := gsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (gsq *GroupSettingsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(gsq.driver.Dialect())
	t1 := builder.Table(groupsettings.Table)
	columns := gsq.fields
	if len(columns) == 0 {
		columns = groupsettings.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if gsq.sql != nil {
		selector = gsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if gsq.unique != nil && *gsq.unique {
		selector.Distinct()
	}
	for _, p := range gsq.predicates {
		p(selector)
	}
	for _, p := range gsq.order {
		p(selector)
	}
	if offset := gsq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := gsq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// GroupSettingsGroupBy is the group-by builder for GroupSettings entities.
type GroupSettingsGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (gsgb *GroupSettingsGroupBy) Aggregate(fns ...AggregateFunc) *GroupSettingsGroupBy {
	gsgb.fns = append(gsgb.fns, fns...)
	return gsgb
}

// Scan applies the group-by query and scans the result into the given value.
func (gsgb *GroupSettingsGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := gsgb.path(ctx)
	if err != nil {
		return err
	}
	gsgb.sql = query
	return gsgb.sqlScan(ctx, v)
}

func (gsgb *GroupSettingsGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range gsgb.fields {
		if !groupsettings.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := gsgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gsgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (gsgb *GroupSettingsGroupBy) sqlQuery() *sql.Selector {
	selector := gsgb.sql.Select()
	aggregation := make([]string, 0, len(gsgb.fns))
	for _, fn := range gsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(gsgb.fields)+len(gsgb.fns))
		for _, f := range gsgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(gsgb.fields...)...)
}

// GroupSettingsSelect is the builder for selecting fields of GroupSettings entities.
type GroupSettingsSelect struct {
	*GroupSettingsQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (gss *GroupSettingsSelect) Scan(ctx context.Context, v interface{}) error {
	if err := gss.prepareQuery(ctx); err != nil {
		return err
	}
	gss.sql = gss.GroupSettingsQuery.sqlQuery(ctx)
	return gss.sqlScan(ctx, v)
}

func (gss *GroupSettingsSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := gss.sql.Query()
	if err := gss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
