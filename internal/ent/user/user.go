// Code generated by ent, DO NOT EDIT.

package user

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldAvatarURL holds the string denoting the avatar_url field in the database.
	FieldAvatarURL = "avatar_url"
	// EdgePlayers holds the string denoting the players edge name in mutations.
	EdgePlayers = "players"
	// EdgeMainPlayer holds the string denoting the main_player edge name in mutations.
	EdgeMainPlayer = "main_player"
	// EdgeSentSupervisionRequests holds the string denoting the sent_supervision_requests edge name in mutations.
	EdgeSentSupervisionRequests = "sent_supervision_requests"
	// EdgeSupervisionRequestApprovals holds the string denoting the supervision_request_approvals edge name in mutations.
	EdgeSupervisionRequestApprovals = "supervision_request_approvals"
	// Table holds the table name of the user in the database.
	Table = "users"
	// PlayersTable is the table that holds the players relation/edge. The primary key declared below.
	PlayersTable = "user_players"
	// PlayersInverseTable is the table name for the Player entity.
	// It exists in this package in order to avoid circular dependency with the "player" package.
	PlayersInverseTable = "players"
	// MainPlayerTable is the table that holds the main_player relation/edge.
	MainPlayerTable = "players"
	// MainPlayerInverseTable is the table name for the Player entity.
	// It exists in this package in order to avoid circular dependency with the "player" package.
	MainPlayerInverseTable = "players"
	// MainPlayerColumn is the table column denoting the main_player relation/edge.
	MainPlayerColumn = "user_main_player"
	// SentSupervisionRequestsTable is the table that holds the sent_supervision_requests relation/edge.
	SentSupervisionRequestsTable = "player_supervision_requests"
	// SentSupervisionRequestsInverseTable is the table name for the PlayerSupervisionRequest entity.
	// It exists in this package in order to avoid circular dependency with the "playersupervisionrequest" package.
	SentSupervisionRequestsInverseTable = "player_supervision_requests"
	// SentSupervisionRequestsColumn is the table column denoting the sent_supervision_requests relation/edge.
	SentSupervisionRequestsColumn = "user_sent_supervision_requests"
	// SupervisionRequestApprovalsTable is the table that holds the supervision_request_approvals relation/edge.
	SupervisionRequestApprovalsTable = "player_supervision_request_approvals"
	// SupervisionRequestApprovalsInverseTable is the table name for the PlayerSupervisionRequestApproval entity.
	// It exists in this package in order to avoid circular dependency with the "playersupervisionrequestapproval" package.
	SupervisionRequestApprovalsInverseTable = "player_supervision_request_approvals"
	// SupervisionRequestApprovalsColumn is the table column denoting the supervision_request_approvals relation/edge.
	SupervisionRequestApprovalsColumn = "user_supervision_request_approvals"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldEmail,
	FieldPassword,
	FieldAvatarURL,
}

var (
	// PlayersPrimaryKey and PlayersColumn2 are the table columns denoting the
	// primary key for the players relation (M2M).
	PlayersPrimaryKey = []string{"user_id", "player_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// DefaultAvatarURL holds the default value on creation for the "avatar_url" field.
	DefaultAvatarURL string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
