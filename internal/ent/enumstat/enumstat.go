// Code generated by ent, DO NOT EDIT.

package enumstat

import (
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
)

const (
	// Label holds the string label denoting the enumstat type in the database.
	Label = "enum_stat"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// EdgeMatch holds the string denoting the match edge name in mutations.
	EdgeMatch = "match"
	// EdgeEnumStatDescription holds the string denoting the enum_stat_description edge name in mutations.
	EdgeEnumStatDescription = "enum_stat_description"
	// EdgePlayer holds the string denoting the player edge name in mutations.
	EdgePlayer = "player"
	// Table holds the table name of the enumstat in the database.
	Table = "enum_stats"
	// MatchTable is the table that holds the match relation/edge.
	MatchTable = "enum_stats"
	// MatchInverseTable is the table name for the Match entity.
	// It exists in this package in order to avoid circular dependency with the "match" package.
	MatchInverseTable = "matches"
	// MatchColumn is the table column denoting the match relation/edge.
	MatchColumn = "match_enum_stats"
	// EnumStatDescriptionTable is the table that holds the enum_stat_description relation/edge.
	EnumStatDescriptionTable = "enum_stats"
	// EnumStatDescriptionInverseTable is the table name for the EnumStatDescription entity.
	// It exists in this package in order to avoid circular dependency with the "enumstatdescription" package.
	EnumStatDescriptionInverseTable = "enum_stat_descriptions"
	// EnumStatDescriptionColumn is the table column denoting the enum_stat_description relation/edge.
	EnumStatDescriptionColumn = "enum_stat_description_enum_stats"
	// PlayerTable is the table that holds the player relation/edge.
	PlayerTable = "enum_stats"
	// PlayerInverseTable is the table name for the Player entity.
	// It exists in this package in order to avoid circular dependency with the "player" package.
	PlayerInverseTable = "players"
	// PlayerColumn is the table column denoting the player relation/edge.
	PlayerColumn = "player_enum_stats"
)

// Columns holds all SQL columns for enumstat fields.
var Columns = []string{
	FieldID,
	FieldValue,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "enum_stats"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"enum_stat_description_enum_stats",
	"match_enum_stats",
	"player_enum_stats",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() guidgql.GUID
)
