// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-boardgame-stats/backend/internal/ent/player"
	"github.com/open-boardgame-stats/backend/internal/ent/playersupervisionrequest"
	"github.com/open-boardgame-stats/backend/internal/ent/playersupervisionrequestapproval"
	"github.com/open-boardgame-stats/backend/internal/ent/predicate"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
	"github.com/open-boardgame-stats/backend/internal/ent/user"
)

// PlayerSupervisionRequestQuery is the builder for querying PlayerSupervisionRequest entities.
type PlayerSupervisionRequestQuery struct {
	config
	limit              *int
	offset             *int
	unique             *bool
	order              []OrderFunc
	fields             []string
	predicates         []predicate.PlayerSupervisionRequest
	withSender         *UserQuery
	withPlayer         *PlayerQuery
	withApprovals      *PlayerSupervisionRequestApprovalQuery
	withFKs            bool
	modifiers          []func(*sql.Selector)
	loadTotal          []func(context.Context, []*PlayerSupervisionRequest) error
	withNamedApprovals map[string]*PlayerSupervisionRequestApprovalQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PlayerSupervisionRequestQuery builder.
func (psrq *PlayerSupervisionRequestQuery) Where(ps ...predicate.PlayerSupervisionRequest) *PlayerSupervisionRequestQuery {
	psrq.predicates = append(psrq.predicates, ps...)
	return psrq
}

// Limit adds a limit step to the query.
func (psrq *PlayerSupervisionRequestQuery) Limit(limit int) *PlayerSupervisionRequestQuery {
	psrq.limit = &limit
	return psrq
}

// Offset adds an offset step to the query.
func (psrq *PlayerSupervisionRequestQuery) Offset(offset int) *PlayerSupervisionRequestQuery {
	psrq.offset = &offset
	return psrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (psrq *PlayerSupervisionRequestQuery) Unique(unique bool) *PlayerSupervisionRequestQuery {
	psrq.unique = &unique
	return psrq
}

// Order adds an order step to the query.
func (psrq *PlayerSupervisionRequestQuery) Order(o ...OrderFunc) *PlayerSupervisionRequestQuery {
	psrq.order = append(psrq.order, o...)
	return psrq
}

// QuerySender chains the current query on the "sender" edge.
func (psrq *PlayerSupervisionRequestQuery) QuerySender() *UserQuery {
	query := &UserQuery{config: psrq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(playersupervisionrequest.Table, playersupervisionrequest.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, playersupervisionrequest.SenderTable, playersupervisionrequest.SenderColumn),
		)
		fromU = sqlgraph.SetNeighbors(psrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPlayer chains the current query on the "player" edge.
func (psrq *PlayerSupervisionRequestQuery) QueryPlayer() *PlayerQuery {
	query := &PlayerQuery{config: psrq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(playersupervisionrequest.Table, playersupervisionrequest.FieldID, selector),
			sqlgraph.To(player.Table, player.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, playersupervisionrequest.PlayerTable, playersupervisionrequest.PlayerColumn),
		)
		fromU = sqlgraph.SetNeighbors(psrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryApprovals chains the current query on the "approvals" edge.
func (psrq *PlayerSupervisionRequestQuery) QueryApprovals() *PlayerSupervisionRequestApprovalQuery {
	query := &PlayerSupervisionRequestApprovalQuery{config: psrq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := psrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := psrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(playersupervisionrequest.Table, playersupervisionrequest.FieldID, selector),
			sqlgraph.To(playersupervisionrequestapproval.Table, playersupervisionrequestapproval.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, playersupervisionrequest.ApprovalsTable, playersupervisionrequest.ApprovalsColumn),
		)
		fromU = sqlgraph.SetNeighbors(psrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PlayerSupervisionRequest entity from the query.
// Returns a *NotFoundError when no PlayerSupervisionRequest was found.
func (psrq *PlayerSupervisionRequestQuery) First(ctx context.Context) (*PlayerSupervisionRequest, error) {
	nodes, err := psrq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{playersupervisionrequest.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (psrq *PlayerSupervisionRequestQuery) FirstX(ctx context.Context) *PlayerSupervisionRequest {
	node, err := psrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PlayerSupervisionRequest ID from the query.
// Returns a *NotFoundError when no PlayerSupervisionRequest ID was found.
func (psrq *PlayerSupervisionRequestQuery) FirstID(ctx context.Context) (id guidgql.GUID, err error) {
	var ids []guidgql.GUID
	if ids, err = psrq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{playersupervisionrequest.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (psrq *PlayerSupervisionRequestQuery) FirstIDX(ctx context.Context) guidgql.GUID {
	id, err := psrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PlayerSupervisionRequest entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one PlayerSupervisionRequest entity is found.
// Returns a *NotFoundError when no PlayerSupervisionRequest entities are found.
func (psrq *PlayerSupervisionRequestQuery) Only(ctx context.Context) (*PlayerSupervisionRequest, error) {
	nodes, err := psrq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{playersupervisionrequest.Label}
	default:
		return nil, &NotSingularError{playersupervisionrequest.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (psrq *PlayerSupervisionRequestQuery) OnlyX(ctx context.Context) *PlayerSupervisionRequest {
	node, err := psrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PlayerSupervisionRequest ID in the query.
// Returns a *NotSingularError when more than one PlayerSupervisionRequest ID is found.
// Returns a *NotFoundError when no entities are found.
func (psrq *PlayerSupervisionRequestQuery) OnlyID(ctx context.Context) (id guidgql.GUID, err error) {
	var ids []guidgql.GUID
	if ids, err = psrq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{playersupervisionrequest.Label}
	default:
		err = &NotSingularError{playersupervisionrequest.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (psrq *PlayerSupervisionRequestQuery) OnlyIDX(ctx context.Context) guidgql.GUID {
	id, err := psrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PlayerSupervisionRequests.
func (psrq *PlayerSupervisionRequestQuery) All(ctx context.Context) ([]*PlayerSupervisionRequest, error) {
	if err := psrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return psrq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (psrq *PlayerSupervisionRequestQuery) AllX(ctx context.Context) []*PlayerSupervisionRequest {
	nodes, err := psrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PlayerSupervisionRequest IDs.
func (psrq *PlayerSupervisionRequestQuery) IDs(ctx context.Context) ([]guidgql.GUID, error) {
	var ids []guidgql.GUID
	if err := psrq.Select(playersupervisionrequest.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (psrq *PlayerSupervisionRequestQuery) IDsX(ctx context.Context) []guidgql.GUID {
	ids, err := psrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (psrq *PlayerSupervisionRequestQuery) Count(ctx context.Context) (int, error) {
	if err := psrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return psrq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (psrq *PlayerSupervisionRequestQuery) CountX(ctx context.Context) int {
	count, err := psrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (psrq *PlayerSupervisionRequestQuery) Exist(ctx context.Context) (bool, error) {
	if err := psrq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return psrq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (psrq *PlayerSupervisionRequestQuery) ExistX(ctx context.Context) bool {
	exist, err := psrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PlayerSupervisionRequestQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (psrq *PlayerSupervisionRequestQuery) Clone() *PlayerSupervisionRequestQuery {
	if psrq == nil {
		return nil
	}
	return &PlayerSupervisionRequestQuery{
		config:        psrq.config,
		limit:         psrq.limit,
		offset:        psrq.offset,
		order:         append([]OrderFunc{}, psrq.order...),
		predicates:    append([]predicate.PlayerSupervisionRequest{}, psrq.predicates...),
		withSender:    psrq.withSender.Clone(),
		withPlayer:    psrq.withPlayer.Clone(),
		withApprovals: psrq.withApprovals.Clone(),
		// clone intermediate query.
		sql:    psrq.sql.Clone(),
		path:   psrq.path,
		unique: psrq.unique,
	}
}

// WithSender tells the query-builder to eager-load the nodes that are connected to
// the "sender" edge. The optional arguments are used to configure the query builder of the edge.
func (psrq *PlayerSupervisionRequestQuery) WithSender(opts ...func(*UserQuery)) *PlayerSupervisionRequestQuery {
	query := &UserQuery{config: psrq.config}
	for _, opt := range opts {
		opt(query)
	}
	psrq.withSender = query
	return psrq
}

// WithPlayer tells the query-builder to eager-load the nodes that are connected to
// the "player" edge. The optional arguments are used to configure the query builder of the edge.
func (psrq *PlayerSupervisionRequestQuery) WithPlayer(opts ...func(*PlayerQuery)) *PlayerSupervisionRequestQuery {
	query := &PlayerQuery{config: psrq.config}
	for _, opt := range opts {
		opt(query)
	}
	psrq.withPlayer = query
	return psrq
}

// WithApprovals tells the query-builder to eager-load the nodes that are connected to
// the "approvals" edge. The optional arguments are used to configure the query builder of the edge.
func (psrq *PlayerSupervisionRequestQuery) WithApprovals(opts ...func(*PlayerSupervisionRequestApprovalQuery)) *PlayerSupervisionRequestQuery {
	query := &PlayerSupervisionRequestApprovalQuery{config: psrq.config}
	for _, opt := range opts {
		opt(query)
	}
	psrq.withApprovals = query
	return psrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Message string `json:"message,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PlayerSupervisionRequest.Query().
//		GroupBy(playersupervisionrequest.FieldMessage).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (psrq *PlayerSupervisionRequestQuery) GroupBy(field string, fields ...string) *PlayerSupervisionRequestGroupBy {
	grbuild := &PlayerSupervisionRequestGroupBy{config: psrq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := psrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return psrq.sqlQuery(ctx), nil
	}
	grbuild.label = playersupervisionrequest.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Message string `json:"message,omitempty"`
//	}
//
//	client.PlayerSupervisionRequest.Query().
//		Select(playersupervisionrequest.FieldMessage).
//		Scan(ctx, &v)
func (psrq *PlayerSupervisionRequestQuery) Select(fields ...string) *PlayerSupervisionRequestSelect {
	psrq.fields = append(psrq.fields, fields...)
	selbuild := &PlayerSupervisionRequestSelect{PlayerSupervisionRequestQuery: psrq}
	selbuild.label = playersupervisionrequest.Label
	selbuild.flds, selbuild.scan = &psrq.fields, selbuild.Scan
	return selbuild
}

func (psrq *PlayerSupervisionRequestQuery) prepareQuery(ctx context.Context) error {
	for _, f := range psrq.fields {
		if !playersupervisionrequest.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if psrq.path != nil {
		prev, err := psrq.path(ctx)
		if err != nil {
			return err
		}
		psrq.sql = prev
	}
	return nil
}

func (psrq *PlayerSupervisionRequestQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*PlayerSupervisionRequest, error) {
	var (
		nodes       = []*PlayerSupervisionRequest{}
		withFKs     = psrq.withFKs
		_spec       = psrq.querySpec()
		loadedTypes = [3]bool{
			psrq.withSender != nil,
			psrq.withPlayer != nil,
			psrq.withApprovals != nil,
		}
	)
	if psrq.withSender != nil || psrq.withPlayer != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, playersupervisionrequest.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*PlayerSupervisionRequest).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &PlayerSupervisionRequest{config: psrq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(psrq.modifiers) > 0 {
		_spec.Modifiers = psrq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, psrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := psrq.withSender; query != nil {
		if err := psrq.loadSender(ctx, query, nodes, nil,
			func(n *PlayerSupervisionRequest, e *User) { n.Edges.Sender = e }); err != nil {
			return nil, err
		}
	}
	if query := psrq.withPlayer; query != nil {
		if err := psrq.loadPlayer(ctx, query, nodes, nil,
			func(n *PlayerSupervisionRequest, e *Player) { n.Edges.Player = e }); err != nil {
			return nil, err
		}
	}
	if query := psrq.withApprovals; query != nil {
		if err := psrq.loadApprovals(ctx, query, nodes,
			func(n *PlayerSupervisionRequest) { n.Edges.Approvals = []*PlayerSupervisionRequestApproval{} },
			func(n *PlayerSupervisionRequest, e *PlayerSupervisionRequestApproval) {
				n.Edges.Approvals = append(n.Edges.Approvals, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range psrq.withNamedApprovals {
		if err := psrq.loadApprovals(ctx, query, nodes,
			func(n *PlayerSupervisionRequest) { n.appendNamedApprovals(name) },
			func(n *PlayerSupervisionRequest, e *PlayerSupervisionRequestApproval) {
				n.appendNamedApprovals(name, e)
			}); err != nil {
			return nil, err
		}
	}
	for i := range psrq.loadTotal {
		if err := psrq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (psrq *PlayerSupervisionRequestQuery) loadSender(ctx context.Context, query *UserQuery, nodes []*PlayerSupervisionRequest, init func(*PlayerSupervisionRequest), assign func(*PlayerSupervisionRequest, *User)) error {
	ids := make([]guidgql.GUID, 0, len(nodes))
	nodeids := make(map[guidgql.GUID][]*PlayerSupervisionRequest)
	for i := range nodes {
		if nodes[i].user_sent_supervision_requests == nil {
			continue
		}
		fk := *nodes[i].user_sent_supervision_requests
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_sent_supervision_requests" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (psrq *PlayerSupervisionRequestQuery) loadPlayer(ctx context.Context, query *PlayerQuery, nodes []*PlayerSupervisionRequest, init func(*PlayerSupervisionRequest), assign func(*PlayerSupervisionRequest, *Player)) error {
	ids := make([]guidgql.GUID, 0, len(nodes))
	nodeids := make(map[guidgql.GUID][]*PlayerSupervisionRequest)
	for i := range nodes {
		if nodes[i].player_supervision_requests == nil {
			continue
		}
		fk := *nodes[i].player_supervision_requests
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(player.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "player_supervision_requests" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (psrq *PlayerSupervisionRequestQuery) loadApprovals(ctx context.Context, query *PlayerSupervisionRequestApprovalQuery, nodes []*PlayerSupervisionRequest, init func(*PlayerSupervisionRequest), assign func(*PlayerSupervisionRequest, *PlayerSupervisionRequestApproval)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[guidgql.GUID]*PlayerSupervisionRequest)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.PlayerSupervisionRequestApproval(func(s *sql.Selector) {
		s.Where(sql.InValues(playersupervisionrequest.ApprovalsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.player_supervision_request_approvals
		if fk == nil {
			return fmt.Errorf(`foreign-key "player_supervision_request_approvals" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "player_supervision_request_approvals" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (psrq *PlayerSupervisionRequestQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := psrq.querySpec()
	if len(psrq.modifiers) > 0 {
		_spec.Modifiers = psrq.modifiers
	}
	_spec.Node.Columns = psrq.fields
	if len(psrq.fields) > 0 {
		_spec.Unique = psrq.unique != nil && *psrq.unique
	}
	return sqlgraph.CountNodes(ctx, psrq.driver, _spec)
}

func (psrq *PlayerSupervisionRequestQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := psrq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (psrq *PlayerSupervisionRequestQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   playersupervisionrequest.Table,
			Columns: playersupervisionrequest.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: playersupervisionrequest.FieldID,
			},
		},
		From:   psrq.sql,
		Unique: true,
	}
	if unique := psrq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := psrq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, playersupervisionrequest.FieldID)
		for i := range fields {
			if fields[i] != playersupervisionrequest.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := psrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := psrq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := psrq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := psrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (psrq *PlayerSupervisionRequestQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(psrq.driver.Dialect())
	t1 := builder.Table(playersupervisionrequest.Table)
	columns := psrq.fields
	if len(columns) == 0 {
		columns = playersupervisionrequest.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if psrq.sql != nil {
		selector = psrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if psrq.unique != nil && *psrq.unique {
		selector.Distinct()
	}
	for _, p := range psrq.predicates {
		p(selector)
	}
	for _, p := range psrq.order {
		p(selector)
	}
	if offset := psrq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := psrq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedApprovals tells the query-builder to eager-load the nodes that are connected to the "approvals"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (psrq *PlayerSupervisionRequestQuery) WithNamedApprovals(name string, opts ...func(*PlayerSupervisionRequestApprovalQuery)) *PlayerSupervisionRequestQuery {
	query := &PlayerSupervisionRequestApprovalQuery{config: psrq.config}
	for _, opt := range opts {
		opt(query)
	}
	if psrq.withNamedApprovals == nil {
		psrq.withNamedApprovals = make(map[string]*PlayerSupervisionRequestApprovalQuery)
	}
	psrq.withNamedApprovals[name] = query
	return psrq
}

// PlayerSupervisionRequestGroupBy is the group-by builder for PlayerSupervisionRequest entities.
type PlayerSupervisionRequestGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (psrgb *PlayerSupervisionRequestGroupBy) Aggregate(fns ...AggregateFunc) *PlayerSupervisionRequestGroupBy {
	psrgb.fns = append(psrgb.fns, fns...)
	return psrgb
}

// Scan applies the group-by query and scans the result into the given value.
func (psrgb *PlayerSupervisionRequestGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := psrgb.path(ctx)
	if err != nil {
		return err
	}
	psrgb.sql = query
	return psrgb.sqlScan(ctx, v)
}

func (psrgb *PlayerSupervisionRequestGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range psrgb.fields {
		if !playersupervisionrequest.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := psrgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := psrgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (psrgb *PlayerSupervisionRequestGroupBy) sqlQuery() *sql.Selector {
	selector := psrgb.sql.Select()
	aggregation := make([]string, 0, len(psrgb.fns))
	for _, fn := range psrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(psrgb.fields)+len(psrgb.fns))
		for _, f := range psrgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(psrgb.fields...)...)
}

// PlayerSupervisionRequestSelect is the builder for selecting fields of PlayerSupervisionRequest entities.
type PlayerSupervisionRequestSelect struct {
	*PlayerSupervisionRequestQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (psrs *PlayerSupervisionRequestSelect) Scan(ctx context.Context, v interface{}) error {
	if err := psrs.prepareQuery(ctx); err != nil {
		return err
	}
	psrs.sql = psrs.PlayerSupervisionRequestQuery.sqlQuery(ctx)
	return psrs.sqlScan(ctx, v)
}

func (psrs *PlayerSupervisionRequestSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := psrs.sql.Query()
	if err := psrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
