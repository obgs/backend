// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/open-boardgame-stats/backend/internal/ent/enumstatdescription"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
)

// EnumStatDescription is the model entity for the EnumStatDescription schema.
type EnumStatDescription struct {
	config `json:"-"`
	// ID of the ent.
	ID guidgql.GUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// PossibleValues holds the value of the "possible_values" field.
	PossibleValues []string `json:"possible_values,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EnumStatDescriptionQuery when eager-loading is set.
	Edges EnumStatDescriptionEdges `json:"edges"`
}

// EnumStatDescriptionEdges holds the relations/edges for other nodes in the graph.
type EnumStatDescriptionEdges struct {
	// Game holds the value of the game edge.
	Game []*Game `json:"game,omitempty"`
	// EnumStats holds the value of the enum_stats edge.
	EnumStats []*EnumStat `json:"enum_stats,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedGame      map[string][]*Game
	namedEnumStats map[string][]*EnumStat
}

// GameOrErr returns the Game value or an error if the edge
// was not loaded in eager-loading.
func (e EnumStatDescriptionEdges) GameOrErr() ([]*Game, error) {
	if e.loadedTypes[0] {
		return e.Game, nil
	}
	return nil, &NotLoadedError{edge: "game"}
}

// EnumStatsOrErr returns the EnumStats value or an error if the edge
// was not loaded in eager-loading.
func (e EnumStatDescriptionEdges) EnumStatsOrErr() ([]*EnumStat, error) {
	if e.loadedTypes[1] {
		return e.EnumStats, nil
	}
	return nil, &NotLoadedError{edge: "enum_stats"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EnumStatDescription) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case enumstatdescription.FieldPossibleValues:
			values[i] = new([]byte)
		case enumstatdescription.FieldID:
			values[i] = new(guidgql.GUID)
		case enumstatdescription.FieldName, enumstatdescription.FieldDescription:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type EnumStatDescription", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EnumStatDescription fields.
func (esd *EnumStatDescription) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case enumstatdescription.FieldID:
			if value, ok := values[i].(*guidgql.GUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				esd.ID = *value
			}
		case enumstatdescription.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				esd.Name = value.String
			}
		case enumstatdescription.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				esd.Description = value.String
			}
		case enumstatdescription.FieldPossibleValues:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field possible_values", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &esd.PossibleValues); err != nil {
					return fmt.Errorf("unmarshal field possible_values: %w", err)
				}
			}
		}
	}
	return nil
}

// QueryGame queries the "game" edge of the EnumStatDescription entity.
func (esd *EnumStatDescription) QueryGame() *GameQuery {
	return (&EnumStatDescriptionClient{config: esd.config}).QueryGame(esd)
}

// QueryEnumStats queries the "enum_stats" edge of the EnumStatDescription entity.
func (esd *EnumStatDescription) QueryEnumStats() *EnumStatQuery {
	return (&EnumStatDescriptionClient{config: esd.config}).QueryEnumStats(esd)
}

// Update returns a builder for updating this EnumStatDescription.
// Note that you need to call EnumStatDescription.Unwrap() before calling this method if this EnumStatDescription
// was returned from a transaction, and the transaction was committed or rolled back.
func (esd *EnumStatDescription) Update() *EnumStatDescriptionUpdateOne {
	return (&EnumStatDescriptionClient{config: esd.config}).UpdateOne(esd)
}

// Unwrap unwraps the EnumStatDescription entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (esd *EnumStatDescription) Unwrap() *EnumStatDescription {
	_tx, ok := esd.config.driver.(*txDriver)
	if !ok {
		panic("ent: EnumStatDescription is not a transactional entity")
	}
	esd.config.driver = _tx.drv
	return esd
}

// String implements the fmt.Stringer.
func (esd *EnumStatDescription) String() string {
	var builder strings.Builder
	builder.WriteString("EnumStatDescription(")
	builder.WriteString(fmt.Sprintf("id=%v, ", esd.ID))
	builder.WriteString("name=")
	builder.WriteString(esd.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(esd.Description)
	builder.WriteString(", ")
	builder.WriteString("possible_values=")
	builder.WriteString(fmt.Sprintf("%v", esd.PossibleValues))
	builder.WriteByte(')')
	return builder.String()
}

// NamedGame returns the Game named value or an error if the edge was not
// loaded in eager-loading with this name.
func (esd *EnumStatDescription) NamedGame(name string) ([]*Game, error) {
	if esd.Edges.namedGame == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := esd.Edges.namedGame[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (esd *EnumStatDescription) appendNamedGame(name string, edges ...*Game) {
	if esd.Edges.namedGame == nil {
		esd.Edges.namedGame = make(map[string][]*Game)
	}
	if len(edges) == 0 {
		esd.Edges.namedGame[name] = []*Game{}
	} else {
		esd.Edges.namedGame[name] = append(esd.Edges.namedGame[name], edges...)
	}
}

// NamedEnumStats returns the EnumStats named value or an error if the edge was not
// loaded in eager-loading with this name.
func (esd *EnumStatDescription) NamedEnumStats(name string) ([]*EnumStat, error) {
	if esd.Edges.namedEnumStats == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := esd.Edges.namedEnumStats[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (esd *EnumStatDescription) appendNamedEnumStats(name string, edges ...*EnumStat) {
	if esd.Edges.namedEnumStats == nil {
		esd.Edges.namedEnumStats = make(map[string][]*EnumStat)
	}
	if len(edges) == 0 {
		esd.Edges.namedEnumStats[name] = []*EnumStat{}
	} else {
		esd.Edges.namedEnumStats[name] = append(esd.Edges.namedEnumStats[name], edges...)
	}
}

// EnumStatDescriptions is a parsable slice of EnumStatDescription.
type EnumStatDescriptions []*EnumStatDescription

func (esd EnumStatDescriptions) config(cfg config) {
	for _i := range esd {
		esd[_i].config = cfg
	}
}
