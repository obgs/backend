// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-boardgame-stats/backend/internal/ent/enumstat"
	"github.com/open-boardgame-stats/backend/internal/ent/enumstatdescription"
	"github.com/open-boardgame-stats/backend/internal/ent/match"
	"github.com/open-boardgame-stats/backend/internal/ent/player"
	"github.com/open-boardgame-stats/backend/internal/ent/predicate"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
)

// EnumStatUpdate is the builder for updating EnumStat entities.
type EnumStatUpdate struct {
	config
	hooks    []Hook
	mutation *EnumStatMutation
}

// Where appends a list predicates to the EnumStatUpdate builder.
func (esu *EnumStatUpdate) Where(ps ...predicate.EnumStat) *EnumStatUpdate {
	esu.mutation.Where(ps...)
	return esu
}

// SetValue sets the "value" field.
func (esu *EnumStatUpdate) SetValue(s string) *EnumStatUpdate {
	esu.mutation.SetValue(s)
	return esu
}

// SetMatchID sets the "match" edge to the Match entity by ID.
func (esu *EnumStatUpdate) SetMatchID(id guidgql.GUID) *EnumStatUpdate {
	esu.mutation.SetMatchID(id)
	return esu
}

// SetMatch sets the "match" edge to the Match entity.
func (esu *EnumStatUpdate) SetMatch(m *Match) *EnumStatUpdate {
	return esu.SetMatchID(m.ID)
}

// SetEnumStatDescriptionID sets the "enum_stat_description" edge to the EnumStatDescription entity by ID.
func (esu *EnumStatUpdate) SetEnumStatDescriptionID(id guidgql.GUID) *EnumStatUpdate {
	esu.mutation.SetEnumStatDescriptionID(id)
	return esu
}

// SetEnumStatDescription sets the "enum_stat_description" edge to the EnumStatDescription entity.
func (esu *EnumStatUpdate) SetEnumStatDescription(e *EnumStatDescription) *EnumStatUpdate {
	return esu.SetEnumStatDescriptionID(e.ID)
}

// SetPlayerID sets the "player" edge to the Player entity by ID.
func (esu *EnumStatUpdate) SetPlayerID(id guidgql.GUID) *EnumStatUpdate {
	esu.mutation.SetPlayerID(id)
	return esu
}

// SetPlayer sets the "player" edge to the Player entity.
func (esu *EnumStatUpdate) SetPlayer(p *Player) *EnumStatUpdate {
	return esu.SetPlayerID(p.ID)
}

// Mutation returns the EnumStatMutation object of the builder.
func (esu *EnumStatUpdate) Mutation() *EnumStatMutation {
	return esu.mutation
}

// ClearMatch clears the "match" edge to the Match entity.
func (esu *EnumStatUpdate) ClearMatch() *EnumStatUpdate {
	esu.mutation.ClearMatch()
	return esu
}

// ClearEnumStatDescription clears the "enum_stat_description" edge to the EnumStatDescription entity.
func (esu *EnumStatUpdate) ClearEnumStatDescription() *EnumStatUpdate {
	esu.mutation.ClearEnumStatDescription()
	return esu
}

// ClearPlayer clears the "player" edge to the Player entity.
func (esu *EnumStatUpdate) ClearPlayer() *EnumStatUpdate {
	esu.mutation.ClearPlayer()
	return esu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (esu *EnumStatUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(esu.hooks) == 0 {
		if err = esu.check(); err != nil {
			return 0, err
		}
		affected, err = esu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnumStatMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = esu.check(); err != nil {
				return 0, err
			}
			esu.mutation = mutation
			affected, err = esu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(esu.hooks) - 1; i >= 0; i-- {
			if esu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = esu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, esu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (esu *EnumStatUpdate) SaveX(ctx context.Context) int {
	affected, err := esu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (esu *EnumStatUpdate) Exec(ctx context.Context) error {
	_, err := esu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esu *EnumStatUpdate) ExecX(ctx context.Context) {
	if err := esu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (esu *EnumStatUpdate) check() error {
	if _, ok := esu.mutation.MatchID(); esu.mutation.MatchCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EnumStat.match"`)
	}
	if _, ok := esu.mutation.EnumStatDescriptionID(); esu.mutation.EnumStatDescriptionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EnumStat.enum_stat_description"`)
	}
	if _, ok := esu.mutation.PlayerID(); esu.mutation.PlayerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EnumStat.player"`)
	}
	return nil
}

func (esu *EnumStatUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   enumstat.Table,
			Columns: enumstat.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: enumstat.FieldID,
			},
		},
	}
	if ps := esu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := esu.mutation.Value(); ok {
		_spec.SetField(enumstat.FieldValue, field.TypeString, value)
	}
	if esu.mutation.MatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enumstat.MatchTable,
			Columns: []string{enumstat.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: match.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esu.mutation.MatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enumstat.MatchTable,
			Columns: []string{enumstat.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: match.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if esu.mutation.EnumStatDescriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enumstat.EnumStatDescriptionTable,
			Columns: []string{enumstat.EnumStatDescriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: enumstatdescription.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esu.mutation.EnumStatDescriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enumstat.EnumStatDescriptionTable,
			Columns: []string{enumstat.EnumStatDescriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: enumstatdescription.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if esu.mutation.PlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enumstat.PlayerTable,
			Columns: []string{enumstat.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: player.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esu.mutation.PlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enumstat.PlayerTable,
			Columns: []string{enumstat.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: player.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, esu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enumstat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// EnumStatUpdateOne is the builder for updating a single EnumStat entity.
type EnumStatUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EnumStatMutation
}

// SetValue sets the "value" field.
func (esuo *EnumStatUpdateOne) SetValue(s string) *EnumStatUpdateOne {
	esuo.mutation.SetValue(s)
	return esuo
}

// SetMatchID sets the "match" edge to the Match entity by ID.
func (esuo *EnumStatUpdateOne) SetMatchID(id guidgql.GUID) *EnumStatUpdateOne {
	esuo.mutation.SetMatchID(id)
	return esuo
}

// SetMatch sets the "match" edge to the Match entity.
func (esuo *EnumStatUpdateOne) SetMatch(m *Match) *EnumStatUpdateOne {
	return esuo.SetMatchID(m.ID)
}

// SetEnumStatDescriptionID sets the "enum_stat_description" edge to the EnumStatDescription entity by ID.
func (esuo *EnumStatUpdateOne) SetEnumStatDescriptionID(id guidgql.GUID) *EnumStatUpdateOne {
	esuo.mutation.SetEnumStatDescriptionID(id)
	return esuo
}

// SetEnumStatDescription sets the "enum_stat_description" edge to the EnumStatDescription entity.
func (esuo *EnumStatUpdateOne) SetEnumStatDescription(e *EnumStatDescription) *EnumStatUpdateOne {
	return esuo.SetEnumStatDescriptionID(e.ID)
}

// SetPlayerID sets the "player" edge to the Player entity by ID.
func (esuo *EnumStatUpdateOne) SetPlayerID(id guidgql.GUID) *EnumStatUpdateOne {
	esuo.mutation.SetPlayerID(id)
	return esuo
}

// SetPlayer sets the "player" edge to the Player entity.
func (esuo *EnumStatUpdateOne) SetPlayer(p *Player) *EnumStatUpdateOne {
	return esuo.SetPlayerID(p.ID)
}

// Mutation returns the EnumStatMutation object of the builder.
func (esuo *EnumStatUpdateOne) Mutation() *EnumStatMutation {
	return esuo.mutation
}

// ClearMatch clears the "match" edge to the Match entity.
func (esuo *EnumStatUpdateOne) ClearMatch() *EnumStatUpdateOne {
	esuo.mutation.ClearMatch()
	return esuo
}

// ClearEnumStatDescription clears the "enum_stat_description" edge to the EnumStatDescription entity.
func (esuo *EnumStatUpdateOne) ClearEnumStatDescription() *EnumStatUpdateOne {
	esuo.mutation.ClearEnumStatDescription()
	return esuo
}

// ClearPlayer clears the "player" edge to the Player entity.
func (esuo *EnumStatUpdateOne) ClearPlayer() *EnumStatUpdateOne {
	esuo.mutation.ClearPlayer()
	return esuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (esuo *EnumStatUpdateOne) Select(field string, fields ...string) *EnumStatUpdateOne {
	esuo.fields = append([]string{field}, fields...)
	return esuo
}

// Save executes the query and returns the updated EnumStat entity.
func (esuo *EnumStatUpdateOne) Save(ctx context.Context) (*EnumStat, error) {
	var (
		err  error
		node *EnumStat
	)
	if len(esuo.hooks) == 0 {
		if err = esuo.check(); err != nil {
			return nil, err
		}
		node, err = esuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnumStatMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = esuo.check(); err != nil {
				return nil, err
			}
			esuo.mutation = mutation
			node, err = esuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(esuo.hooks) - 1; i >= 0; i-- {
			if esuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = esuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, esuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*EnumStat)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EnumStatMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (esuo *EnumStatUpdateOne) SaveX(ctx context.Context) *EnumStat {
	node, err := esuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (esuo *EnumStatUpdateOne) Exec(ctx context.Context) error {
	_, err := esuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esuo *EnumStatUpdateOne) ExecX(ctx context.Context) {
	if err := esuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (esuo *EnumStatUpdateOne) check() error {
	if _, ok := esuo.mutation.MatchID(); esuo.mutation.MatchCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EnumStat.match"`)
	}
	if _, ok := esuo.mutation.EnumStatDescriptionID(); esuo.mutation.EnumStatDescriptionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EnumStat.enum_stat_description"`)
	}
	if _, ok := esuo.mutation.PlayerID(); esuo.mutation.PlayerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "EnumStat.player"`)
	}
	return nil
}

func (esuo *EnumStatUpdateOne) sqlSave(ctx context.Context) (_node *EnumStat, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   enumstat.Table,
			Columns: enumstat.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: enumstat.FieldID,
			},
		},
	}
	id, ok := esuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EnumStat.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := esuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enumstat.FieldID)
		for _, f := range fields {
			if !enumstat.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != enumstat.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := esuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := esuo.mutation.Value(); ok {
		_spec.SetField(enumstat.FieldValue, field.TypeString, value)
	}
	if esuo.mutation.MatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enumstat.MatchTable,
			Columns: []string{enumstat.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: match.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esuo.mutation.MatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enumstat.MatchTable,
			Columns: []string{enumstat.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: match.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if esuo.mutation.EnumStatDescriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enumstat.EnumStatDescriptionTable,
			Columns: []string{enumstat.EnumStatDescriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: enumstatdescription.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esuo.mutation.EnumStatDescriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enumstat.EnumStatDescriptionTable,
			Columns: []string{enumstat.EnumStatDescriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: enumstatdescription.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if esuo.mutation.PlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enumstat.PlayerTable,
			Columns: []string{enumstat.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: player.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := esuo.mutation.PlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enumstat.PlayerTable,
			Columns: []string{enumstat.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: player.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EnumStat{config: esuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, esuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{enumstat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
