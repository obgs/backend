// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-boardgame-stats/backend/internal/ent/game"
	"github.com/open-boardgame-stats/backend/internal/ent/gameversion"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
)

// GameVersion is the model entity for the GameVersion schema.
type GameVersion struct {
	config `json:"-"`
	// ID of the ent.
	ID guidgql.GUID `json:"id,omitempty"`
	// VersionNumber holds the value of the "version_number" field.
	VersionNumber int `json:"version_number,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GameVersionQuery when eager-loading is set.
	Edges             GameVersionEdges `json:"edges"`
	game_version_game *guidgql.GUID
	selectValues      sql.SelectValues
}

// GameVersionEdges holds the relations/edges for other nodes in the graph.
type GameVersionEdges struct {
	// Game holds the value of the game edge.
	Game *Game `json:"game,omitempty"`
	// StatDescriptions holds the value of the stat_descriptions edge.
	StatDescriptions []*StatDescription `json:"stat_descriptions,omitempty"`
	// Matches holds the value of the matches edge.
	Matches []*Match `json:"matches,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedStatDescriptions map[string][]*StatDescription
	namedMatches          map[string][]*Match
}

// GameOrErr returns the Game value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GameVersionEdges) GameOrErr() (*Game, error) {
	if e.Game != nil {
		return e.Game, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: game.Label}
	}
	return nil, &NotLoadedError{edge: "game"}
}

// StatDescriptionsOrErr returns the StatDescriptions value or an error if the edge
// was not loaded in eager-loading.
func (e GameVersionEdges) StatDescriptionsOrErr() ([]*StatDescription, error) {
	if e.loadedTypes[1] {
		return e.StatDescriptions, nil
	}
	return nil, &NotLoadedError{edge: "stat_descriptions"}
}

// MatchesOrErr returns the Matches value or an error if the edge
// was not loaded in eager-loading.
func (e GameVersionEdges) MatchesOrErr() ([]*Match, error) {
	if e.loadedTypes[2] {
		return e.Matches, nil
	}
	return nil, &NotLoadedError{edge: "matches"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GameVersion) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case gameversion.FieldID:
			values[i] = new(guidgql.GUID)
		case gameversion.FieldVersionNumber:
			values[i] = new(sql.NullInt64)
		case gameversion.ForeignKeys[0]: // game_version_game
			values[i] = &sql.NullScanner{S: new(guidgql.GUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GameVersion fields.
func (gv *GameVersion) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case gameversion.FieldID:
			if value, ok := values[i].(*guidgql.GUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				gv.ID = *value
			}
		case gameversion.FieldVersionNumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version_number", values[i])
			} else if value.Valid {
				gv.VersionNumber = int(value.Int64)
			}
		case gameversion.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field game_version_game", values[i])
			} else if value.Valid {
				gv.game_version_game = new(guidgql.GUID)
				*gv.game_version_game = *value.S.(*guidgql.GUID)
			}
		default:
			gv.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GameVersion.
// This includes values selected through modifiers, order, etc.
func (gv *GameVersion) Value(name string) (ent.Value, error) {
	return gv.selectValues.Get(name)
}

// QueryGame queries the "game" edge of the GameVersion entity.
func (gv *GameVersion) QueryGame() *GameQuery {
	return NewGameVersionClient(gv.config).QueryGame(gv)
}

// QueryStatDescriptions queries the "stat_descriptions" edge of the GameVersion entity.
func (gv *GameVersion) QueryStatDescriptions() *StatDescriptionQuery {
	return NewGameVersionClient(gv.config).QueryStatDescriptions(gv)
}

// QueryMatches queries the "matches" edge of the GameVersion entity.
func (gv *GameVersion) QueryMatches() *MatchQuery {
	return NewGameVersionClient(gv.config).QueryMatches(gv)
}

// Update returns a builder for updating this GameVersion.
// Note that you need to call GameVersion.Unwrap() before calling this method if this GameVersion
// was returned from a transaction, and the transaction was committed or rolled back.
func (gv *GameVersion) Update() *GameVersionUpdateOne {
	return NewGameVersionClient(gv.config).UpdateOne(gv)
}

// Unwrap unwraps the GameVersion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gv *GameVersion) Unwrap() *GameVersion {
	_tx, ok := gv.config.driver.(*txDriver)
	if !ok {
		panic("ent: GameVersion is not a transactional entity")
	}
	gv.config.driver = _tx.drv
	return gv
}

// String implements the fmt.Stringer.
func (gv *GameVersion) String() string {
	var builder strings.Builder
	builder.WriteString("GameVersion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gv.ID))
	builder.WriteString("version_number=")
	builder.WriteString(fmt.Sprintf("%v", gv.VersionNumber))
	builder.WriteByte(')')
	return builder.String()
}

// NamedStatDescriptions returns the StatDescriptions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gv *GameVersion) NamedStatDescriptions(name string) ([]*StatDescription, error) {
	if gv.Edges.namedStatDescriptions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gv.Edges.namedStatDescriptions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gv *GameVersion) appendNamedStatDescriptions(name string, edges ...*StatDescription) {
	if gv.Edges.namedStatDescriptions == nil {
		gv.Edges.namedStatDescriptions = make(map[string][]*StatDescription)
	}
	if len(edges) == 0 {
		gv.Edges.namedStatDescriptions[name] = []*StatDescription{}
	} else {
		gv.Edges.namedStatDescriptions[name] = append(gv.Edges.namedStatDescriptions[name], edges...)
	}
}

// NamedMatches returns the Matches named value or an error if the edge was not
// loaded in eager-loading with this name.
func (gv *GameVersion) NamedMatches(name string) ([]*Match, error) {
	if gv.Edges.namedMatches == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := gv.Edges.namedMatches[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (gv *GameVersion) appendNamedMatches(name string, edges ...*Match) {
	if gv.Edges.namedMatches == nil {
		gv.Edges.namedMatches = make(map[string][]*Match)
	}
	if len(edges) == 0 {
		gv.Edges.namedMatches[name] = []*Match{}
	} else {
		gv.Edges.namedMatches[name] = append(gv.Edges.namedMatches[name], edges...)
	}
}

// GameVersions is a parsable slice of GameVersion.
type GameVersions []*GameVersion
