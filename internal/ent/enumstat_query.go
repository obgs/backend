// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-boardgame-stats/backend/internal/ent/enumstat"
	"github.com/open-boardgame-stats/backend/internal/ent/enumstatdescription"
	"github.com/open-boardgame-stats/backend/internal/ent/match"
	"github.com/open-boardgame-stats/backend/internal/ent/player"
	"github.com/open-boardgame-stats/backend/internal/ent/predicate"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
)

// EnumStatQuery is the builder for querying EnumStat entities.
type EnumStatQuery struct {
	config
	limit                   *int
	offset                  *int
	unique                  *bool
	order                   []OrderFunc
	fields                  []string
	predicates              []predicate.EnumStat
	withMatch               *MatchQuery
	withEnumStatDescription *EnumStatDescriptionQuery
	withPlayer              *PlayerQuery
	withFKs                 bool
	modifiers               []func(*sql.Selector)
	loadTotal               []func(context.Context, []*EnumStat) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EnumStatQuery builder.
func (esq *EnumStatQuery) Where(ps ...predicate.EnumStat) *EnumStatQuery {
	esq.predicates = append(esq.predicates, ps...)
	return esq
}

// Limit adds a limit step to the query.
func (esq *EnumStatQuery) Limit(limit int) *EnumStatQuery {
	esq.limit = &limit
	return esq
}

// Offset adds an offset step to the query.
func (esq *EnumStatQuery) Offset(offset int) *EnumStatQuery {
	esq.offset = &offset
	return esq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (esq *EnumStatQuery) Unique(unique bool) *EnumStatQuery {
	esq.unique = &unique
	return esq
}

// Order adds an order step to the query.
func (esq *EnumStatQuery) Order(o ...OrderFunc) *EnumStatQuery {
	esq.order = append(esq.order, o...)
	return esq
}

// QueryMatch chains the current query on the "match" edge.
func (esq *EnumStatQuery) QueryMatch() *MatchQuery {
	query := &MatchQuery{config: esq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := esq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := esq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enumstat.Table, enumstat.FieldID, selector),
			sqlgraph.To(match.Table, match.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enumstat.MatchTable, enumstat.MatchColumn),
		)
		fromU = sqlgraph.SetNeighbors(esq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnumStatDescription chains the current query on the "enum_stat_description" edge.
func (esq *EnumStatQuery) QueryEnumStatDescription() *EnumStatDescriptionQuery {
	query := &EnumStatDescriptionQuery{config: esq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := esq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := esq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enumstat.Table, enumstat.FieldID, selector),
			sqlgraph.To(enumstatdescription.Table, enumstatdescription.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enumstat.EnumStatDescriptionTable, enumstat.EnumStatDescriptionColumn),
		)
		fromU = sqlgraph.SetNeighbors(esq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPlayer chains the current query on the "player" edge.
func (esq *EnumStatQuery) QueryPlayer() *PlayerQuery {
	query := &PlayerQuery{config: esq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := esq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := esq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enumstat.Table, enumstat.FieldID, selector),
			sqlgraph.To(player.Table, player.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, enumstat.PlayerTable, enumstat.PlayerColumn),
		)
		fromU = sqlgraph.SetNeighbors(esq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EnumStat entity from the query.
// Returns a *NotFoundError when no EnumStat was found.
func (esq *EnumStatQuery) First(ctx context.Context) (*EnumStat, error) {
	nodes, err := esq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{enumstat.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (esq *EnumStatQuery) FirstX(ctx context.Context) *EnumStat {
	node, err := esq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EnumStat ID from the query.
// Returns a *NotFoundError when no EnumStat ID was found.
func (esq *EnumStatQuery) FirstID(ctx context.Context) (id guidgql.GUID, err error) {
	var ids []guidgql.GUID
	if ids, err = esq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{enumstat.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (esq *EnumStatQuery) FirstIDX(ctx context.Context) guidgql.GUID {
	id, err := esq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EnumStat entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EnumStat entity is found.
// Returns a *NotFoundError when no EnumStat entities are found.
func (esq *EnumStatQuery) Only(ctx context.Context) (*EnumStat, error) {
	nodes, err := esq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{enumstat.Label}
	default:
		return nil, &NotSingularError{enumstat.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (esq *EnumStatQuery) OnlyX(ctx context.Context) *EnumStat {
	node, err := esq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EnumStat ID in the query.
// Returns a *NotSingularError when more than one EnumStat ID is found.
// Returns a *NotFoundError when no entities are found.
func (esq *EnumStatQuery) OnlyID(ctx context.Context) (id guidgql.GUID, err error) {
	var ids []guidgql.GUID
	if ids, err = esq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{enumstat.Label}
	default:
		err = &NotSingularError{enumstat.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (esq *EnumStatQuery) OnlyIDX(ctx context.Context) guidgql.GUID {
	id, err := esq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EnumStats.
func (esq *EnumStatQuery) All(ctx context.Context) ([]*EnumStat, error) {
	if err := esq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return esq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (esq *EnumStatQuery) AllX(ctx context.Context) []*EnumStat {
	nodes, err := esq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EnumStat IDs.
func (esq *EnumStatQuery) IDs(ctx context.Context) ([]guidgql.GUID, error) {
	var ids []guidgql.GUID
	if err := esq.Select(enumstat.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (esq *EnumStatQuery) IDsX(ctx context.Context) []guidgql.GUID {
	ids, err := esq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (esq *EnumStatQuery) Count(ctx context.Context) (int, error) {
	if err := esq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return esq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (esq *EnumStatQuery) CountX(ctx context.Context) int {
	count, err := esq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (esq *EnumStatQuery) Exist(ctx context.Context) (bool, error) {
	if err := esq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return esq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (esq *EnumStatQuery) ExistX(ctx context.Context) bool {
	exist, err := esq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EnumStatQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (esq *EnumStatQuery) Clone() *EnumStatQuery {
	if esq == nil {
		return nil
	}
	return &EnumStatQuery{
		config:                  esq.config,
		limit:                   esq.limit,
		offset:                  esq.offset,
		order:                   append([]OrderFunc{}, esq.order...),
		predicates:              append([]predicate.EnumStat{}, esq.predicates...),
		withMatch:               esq.withMatch.Clone(),
		withEnumStatDescription: esq.withEnumStatDescription.Clone(),
		withPlayer:              esq.withPlayer.Clone(),
		// clone intermediate query.
		sql:    esq.sql.Clone(),
		path:   esq.path,
		unique: esq.unique,
	}
}

// WithMatch tells the query-builder to eager-load the nodes that are connected to
// the "match" edge. The optional arguments are used to configure the query builder of the edge.
func (esq *EnumStatQuery) WithMatch(opts ...func(*MatchQuery)) *EnumStatQuery {
	query := &MatchQuery{config: esq.config}
	for _, opt := range opts {
		opt(query)
	}
	esq.withMatch = query
	return esq
}

// WithEnumStatDescription tells the query-builder to eager-load the nodes that are connected to
// the "enum_stat_description" edge. The optional arguments are used to configure the query builder of the edge.
func (esq *EnumStatQuery) WithEnumStatDescription(opts ...func(*EnumStatDescriptionQuery)) *EnumStatQuery {
	query := &EnumStatDescriptionQuery{config: esq.config}
	for _, opt := range opts {
		opt(query)
	}
	esq.withEnumStatDescription = query
	return esq
}

// WithPlayer tells the query-builder to eager-load the nodes that are connected to
// the "player" edge. The optional arguments are used to configure the query builder of the edge.
func (esq *EnumStatQuery) WithPlayer(opts ...func(*PlayerQuery)) *EnumStatQuery {
	query := &PlayerQuery{config: esq.config}
	for _, opt := range opts {
		opt(query)
	}
	esq.withPlayer = query
	return esq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Value string `json:"value,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EnumStat.Query().
//		GroupBy(enumstat.FieldValue).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (esq *EnumStatQuery) GroupBy(field string, fields ...string) *EnumStatGroupBy {
	grbuild := &EnumStatGroupBy{config: esq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := esq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return esq.sqlQuery(ctx), nil
	}
	grbuild.label = enumstat.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Value string `json:"value,omitempty"`
//	}
//
//	client.EnumStat.Query().
//		Select(enumstat.FieldValue).
//		Scan(ctx, &v)
func (esq *EnumStatQuery) Select(fields ...string) *EnumStatSelect {
	esq.fields = append(esq.fields, fields...)
	selbuild := &EnumStatSelect{EnumStatQuery: esq}
	selbuild.label = enumstat.Label
	selbuild.flds, selbuild.scan = &esq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a EnumStatSelect configured with the given aggregations.
func (esq *EnumStatQuery) Aggregate(fns ...AggregateFunc) *EnumStatSelect {
	return esq.Select().Aggregate(fns...)
}

func (esq *EnumStatQuery) prepareQuery(ctx context.Context) error {
	for _, f := range esq.fields {
		if !enumstat.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if esq.path != nil {
		prev, err := esq.path(ctx)
		if err != nil {
			return err
		}
		esq.sql = prev
	}
	return nil
}

func (esq *EnumStatQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EnumStat, error) {
	var (
		nodes       = []*EnumStat{}
		withFKs     = esq.withFKs
		_spec       = esq.querySpec()
		loadedTypes = [3]bool{
			esq.withMatch != nil,
			esq.withEnumStatDescription != nil,
			esq.withPlayer != nil,
		}
	)
	if esq.withMatch != nil || esq.withEnumStatDescription != nil || esq.withPlayer != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, enumstat.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*EnumStat).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &EnumStat{config: esq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(esq.modifiers) > 0 {
		_spec.Modifiers = esq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, esq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := esq.withMatch; query != nil {
		if err := esq.loadMatch(ctx, query, nodes, nil,
			func(n *EnumStat, e *Match) { n.Edges.Match = e }); err != nil {
			return nil, err
		}
	}
	if query := esq.withEnumStatDescription; query != nil {
		if err := esq.loadEnumStatDescription(ctx, query, nodes, nil,
			func(n *EnumStat, e *EnumStatDescription) { n.Edges.EnumStatDescription = e }); err != nil {
			return nil, err
		}
	}
	if query := esq.withPlayer; query != nil {
		if err := esq.loadPlayer(ctx, query, nodes, nil,
			func(n *EnumStat, e *Player) { n.Edges.Player = e }); err != nil {
			return nil, err
		}
	}
	for i := range esq.loadTotal {
		if err := esq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (esq *EnumStatQuery) loadMatch(ctx context.Context, query *MatchQuery, nodes []*EnumStat, init func(*EnumStat), assign func(*EnumStat, *Match)) error {
	ids := make([]guidgql.GUID, 0, len(nodes))
	nodeids := make(map[guidgql.GUID][]*EnumStat)
	for i := range nodes {
		if nodes[i].match_enum_stats == nil {
			continue
		}
		fk := *nodes[i].match_enum_stats
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(match.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "match_enum_stats" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (esq *EnumStatQuery) loadEnumStatDescription(ctx context.Context, query *EnumStatDescriptionQuery, nodes []*EnumStat, init func(*EnumStat), assign func(*EnumStat, *EnumStatDescription)) error {
	ids := make([]guidgql.GUID, 0, len(nodes))
	nodeids := make(map[guidgql.GUID][]*EnumStat)
	for i := range nodes {
		if nodes[i].enum_stat_description_enum_stats == nil {
			continue
		}
		fk := *nodes[i].enum_stat_description_enum_stats
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(enumstatdescription.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "enum_stat_description_enum_stats" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (esq *EnumStatQuery) loadPlayer(ctx context.Context, query *PlayerQuery, nodes []*EnumStat, init func(*EnumStat), assign func(*EnumStat, *Player)) error {
	ids := make([]guidgql.GUID, 0, len(nodes))
	nodeids := make(map[guidgql.GUID][]*EnumStat)
	for i := range nodes {
		if nodes[i].player_enum_stats == nil {
			continue
		}
		fk := *nodes[i].player_enum_stats
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(player.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "player_enum_stats" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (esq *EnumStatQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := esq.querySpec()
	if len(esq.modifiers) > 0 {
		_spec.Modifiers = esq.modifiers
	}
	_spec.Node.Columns = esq.fields
	if len(esq.fields) > 0 {
		_spec.Unique = esq.unique != nil && *esq.unique
	}
	return sqlgraph.CountNodes(ctx, esq.driver, _spec)
}

func (esq *EnumStatQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := esq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (esq *EnumStatQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   enumstat.Table,
			Columns: enumstat.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: enumstat.FieldID,
			},
		},
		From:   esq.sql,
		Unique: true,
	}
	if unique := esq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := esq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enumstat.FieldID)
		for i := range fields {
			if fields[i] != enumstat.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := esq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := esq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := esq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := esq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (esq *EnumStatQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(esq.driver.Dialect())
	t1 := builder.Table(enumstat.Table)
	columns := esq.fields
	if len(columns) == 0 {
		columns = enumstat.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if esq.sql != nil {
		selector = esq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if esq.unique != nil && *esq.unique {
		selector.Distinct()
	}
	for _, p := range esq.predicates {
		p(selector)
	}
	for _, p := range esq.order {
		p(selector)
	}
	if offset := esq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := esq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EnumStatGroupBy is the group-by builder for EnumStat entities.
type EnumStatGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (esgb *EnumStatGroupBy) Aggregate(fns ...AggregateFunc) *EnumStatGroupBy {
	esgb.fns = append(esgb.fns, fns...)
	return esgb
}

// Scan applies the group-by query and scans the result into the given value.
func (esgb *EnumStatGroupBy) Scan(ctx context.Context, v any) error {
	query, err := esgb.path(ctx)
	if err != nil {
		return err
	}
	esgb.sql = query
	return esgb.sqlScan(ctx, v)
}

func (esgb *EnumStatGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range esgb.fields {
		if !enumstat.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := esgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := esgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (esgb *EnumStatGroupBy) sqlQuery() *sql.Selector {
	selector := esgb.sql.Select()
	aggregation := make([]string, 0, len(esgb.fns))
	for _, fn := range esgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(esgb.fields)+len(esgb.fns))
		for _, f := range esgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(esgb.fields...)...)
}

// EnumStatSelect is the builder for selecting fields of EnumStat entities.
type EnumStatSelect struct {
	*EnumStatQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ess *EnumStatSelect) Aggregate(fns ...AggregateFunc) *EnumStatSelect {
	ess.fns = append(ess.fns, fns...)
	return ess
}

// Scan applies the selector query and scans the result into the given value.
func (ess *EnumStatSelect) Scan(ctx context.Context, v any) error {
	if err := ess.prepareQuery(ctx); err != nil {
		return err
	}
	ess.sql = ess.EnumStatQuery.sqlQuery(ctx)
	return ess.sqlScan(ctx, v)
}

func (ess *EnumStatSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(ess.fns))
	for _, fn := range ess.fns {
		aggregation = append(aggregation, fn(ess.sql))
	}
	switch n := len(*ess.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		ess.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		ess.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := ess.sql.Query()
	if err := ess.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
