// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/obgs/backend/internal/ent/enums"
	"github.com/obgs/backend/internal/ent/group"
	"github.com/obgs/backend/internal/ent/groupsettings"
	"github.com/obgs/backend/internal/ent/schema/guidgql"
)

// GroupSettingsCreate is the builder for creating a GroupSettings entity.
type GroupSettingsCreate struct {
	config
	mutation *GroupSettingsMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetVisibility sets the "visibility" field.
func (gsc *GroupSettingsCreate) SetVisibility(gr groupsettings.Visibility) *GroupSettingsCreate {
	gsc.mutation.SetVisibility(gr)
	return gsc
}

// SetNillableVisibility sets the "visibility" field if the given value is not nil.
func (gsc *GroupSettingsCreate) SetNillableVisibility(gr *groupsettings.Visibility) *GroupSettingsCreate {
	if gr != nil {
		gsc.SetVisibility(*gr)
	}
	return gsc
}

// SetJoinPolicy sets the "join_policy" field.
func (gsc *GroupSettingsCreate) SetJoinPolicy(gp groupsettings.JoinPolicy) *GroupSettingsCreate {
	gsc.mutation.SetJoinPolicy(gp)
	return gsc
}

// SetNillableJoinPolicy sets the "join_policy" field if the given value is not nil.
func (gsc *GroupSettingsCreate) SetNillableJoinPolicy(gp *groupsettings.JoinPolicy) *GroupSettingsCreate {
	if gp != nil {
		gsc.SetJoinPolicy(*gp)
	}
	return gsc
}

// SetMinimumRoleToInvite sets the "minimum_role_to_invite" field.
func (gsc *GroupSettingsCreate) SetMinimumRoleToInvite(e enums.Role) *GroupSettingsCreate {
	gsc.mutation.SetMinimumRoleToInvite(e)
	return gsc
}

// SetNillableMinimumRoleToInvite sets the "minimum_role_to_invite" field if the given value is not nil.
func (gsc *GroupSettingsCreate) SetNillableMinimumRoleToInvite(e *enums.Role) *GroupSettingsCreate {
	if e != nil {
		gsc.SetMinimumRoleToInvite(*e)
	}
	return gsc
}

// SetID sets the "id" field.
func (gsc *GroupSettingsCreate) SetID(gu guidgql.GUID) *GroupSettingsCreate {
	gsc.mutation.SetID(gu)
	return gsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (gsc *GroupSettingsCreate) SetNillableID(gu *guidgql.GUID) *GroupSettingsCreate {
	if gu != nil {
		gsc.SetID(*gu)
	}
	return gsc
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (gsc *GroupSettingsCreate) SetGroupID(id guidgql.GUID) *GroupSettingsCreate {
	gsc.mutation.SetGroupID(id)
	return gsc
}

// SetNillableGroupID sets the "group" edge to the Group entity by ID if the given value is not nil.
func (gsc *GroupSettingsCreate) SetNillableGroupID(id *guidgql.GUID) *GroupSettingsCreate {
	if id != nil {
		gsc = gsc.SetGroupID(*id)
	}
	return gsc
}

// SetGroup sets the "group" edge to the Group entity.
func (gsc *GroupSettingsCreate) SetGroup(g *Group) *GroupSettingsCreate {
	return gsc.SetGroupID(g.ID)
}

// Mutation returns the GroupSettingsMutation object of the builder.
func (gsc *GroupSettingsCreate) Mutation() *GroupSettingsMutation {
	return gsc.mutation
}

// Save creates the GroupSettings in the database.
func (gsc *GroupSettingsCreate) Save(ctx context.Context) (*GroupSettings, error) {
	gsc.defaults()
	return withHooks(ctx, gsc.sqlSave, gsc.mutation, gsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gsc *GroupSettingsCreate) SaveX(ctx context.Context) *GroupSettings {
	v, err := gsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gsc *GroupSettingsCreate) Exec(ctx context.Context) error {
	_, err := gsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gsc *GroupSettingsCreate) ExecX(ctx context.Context) {
	if err := gsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gsc *GroupSettingsCreate) defaults() {
	if _, ok := gsc.mutation.Visibility(); !ok {
		v := groupsettings.DefaultVisibility
		gsc.mutation.SetVisibility(v)
	}
	if _, ok := gsc.mutation.JoinPolicy(); !ok {
		v := groupsettings.DefaultJoinPolicy
		gsc.mutation.SetJoinPolicy(v)
	}
	if _, ok := gsc.mutation.ID(); !ok {
		v := groupsettings.DefaultID()
		gsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gsc *GroupSettingsCreate) check() error {
	if _, ok := gsc.mutation.Visibility(); !ok {
		return &ValidationError{Name: "visibility", err: errors.New(`ent: missing required field "GroupSettings.visibility"`)}
	}
	if v, ok := gsc.mutation.Visibility(); ok {
		if err := groupsettings.VisibilityValidator(v); err != nil {
			return &ValidationError{Name: "visibility", err: fmt.Errorf(`ent: validator failed for field "GroupSettings.visibility": %w`, err)}
		}
	}
	if _, ok := gsc.mutation.JoinPolicy(); !ok {
		return &ValidationError{Name: "join_policy", err: errors.New(`ent: missing required field "GroupSettings.join_policy"`)}
	}
	if v, ok := gsc.mutation.JoinPolicy(); ok {
		if err := groupsettings.JoinPolicyValidator(v); err != nil {
			return &ValidationError{Name: "join_policy", err: fmt.Errorf(`ent: validator failed for field "GroupSettings.join_policy": %w`, err)}
		}
	}
	if v, ok := gsc.mutation.MinimumRoleToInvite(); ok {
		if err := groupsettings.MinimumRoleToInviteValidator(v); err != nil {
			return &ValidationError{Name: "minimum_role_to_invite", err: fmt.Errorf(`ent: validator failed for field "GroupSettings.minimum_role_to_invite": %w`, err)}
		}
	}
	return nil
}

func (gsc *GroupSettingsCreate) sqlSave(ctx context.Context) (*GroupSettings, error) {
	if err := gsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*guidgql.GUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	gsc.mutation.id = &_node.ID
	gsc.mutation.done = true
	return _node, nil
}

func (gsc *GroupSettingsCreate) createSpec() (*GroupSettings, *sqlgraph.CreateSpec) {
	var (
		_node = &GroupSettings{config: gsc.config}
		_spec = sqlgraph.NewCreateSpec(groupsettings.Table, sqlgraph.NewFieldSpec(groupsettings.FieldID, field.TypeString))
	)
	_spec.OnConflict = gsc.conflict
	if id, ok := gsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := gsc.mutation.Visibility(); ok {
		_spec.SetField(groupsettings.FieldVisibility, field.TypeEnum, value)
		_node.Visibility = value
	}
	if value, ok := gsc.mutation.JoinPolicy(); ok {
		_spec.SetField(groupsettings.FieldJoinPolicy, field.TypeEnum, value)
		_node.JoinPolicy = value
	}
	if value, ok := gsc.mutation.MinimumRoleToInvite(); ok {
		_spec.SetField(groupsettings.FieldMinimumRoleToInvite, field.TypeEnum, value)
		_node.MinimumRoleToInvite = &value
	}
	if nodes := gsc.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   groupsettings.GroupTable,
			Columns: []string{groupsettings.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.group_settings = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GroupSettings.Create().
//		SetVisibility(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GroupSettingsUpsert) {
//			SetVisibility(v+v).
//		}).
//		Exec(ctx)
func (gsc *GroupSettingsCreate) OnConflict(opts ...sql.ConflictOption) *GroupSettingsUpsertOne {
	gsc.conflict = opts
	return &GroupSettingsUpsertOne{
		create: gsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GroupSettings.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gsc *GroupSettingsCreate) OnConflictColumns(columns ...string) *GroupSettingsUpsertOne {
	gsc.conflict = append(gsc.conflict, sql.ConflictColumns(columns...))
	return &GroupSettingsUpsertOne{
		create: gsc,
	}
}

type (
	// GroupSettingsUpsertOne is the builder for "upsert"-ing
	//  one GroupSettings node.
	GroupSettingsUpsertOne struct {
		create *GroupSettingsCreate
	}

	// GroupSettingsUpsert is the "OnConflict" setter.
	GroupSettingsUpsert struct {
		*sql.UpdateSet
	}
)

// SetVisibility sets the "visibility" field.
func (u *GroupSettingsUpsert) SetVisibility(v groupsettings.Visibility) *GroupSettingsUpsert {
	u.Set(groupsettings.FieldVisibility, v)
	return u
}

// UpdateVisibility sets the "visibility" field to the value that was provided on create.
func (u *GroupSettingsUpsert) UpdateVisibility() *GroupSettingsUpsert {
	u.SetExcluded(groupsettings.FieldVisibility)
	return u
}

// SetJoinPolicy sets the "join_policy" field.
func (u *GroupSettingsUpsert) SetJoinPolicy(v groupsettings.JoinPolicy) *GroupSettingsUpsert {
	u.Set(groupsettings.FieldJoinPolicy, v)
	return u
}

// UpdateJoinPolicy sets the "join_policy" field to the value that was provided on create.
func (u *GroupSettingsUpsert) UpdateJoinPolicy() *GroupSettingsUpsert {
	u.SetExcluded(groupsettings.FieldJoinPolicy)
	return u
}

// SetMinimumRoleToInvite sets the "minimum_role_to_invite" field.
func (u *GroupSettingsUpsert) SetMinimumRoleToInvite(v enums.Role) *GroupSettingsUpsert {
	u.Set(groupsettings.FieldMinimumRoleToInvite, v)
	return u
}

// UpdateMinimumRoleToInvite sets the "minimum_role_to_invite" field to the value that was provided on create.
func (u *GroupSettingsUpsert) UpdateMinimumRoleToInvite() *GroupSettingsUpsert {
	u.SetExcluded(groupsettings.FieldMinimumRoleToInvite)
	return u
}

// ClearMinimumRoleToInvite clears the value of the "minimum_role_to_invite" field.
func (u *GroupSettingsUpsert) ClearMinimumRoleToInvite() *GroupSettingsUpsert {
	u.SetNull(groupsettings.FieldMinimumRoleToInvite)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.GroupSettings.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(groupsettings.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GroupSettingsUpsertOne) UpdateNewValues() *GroupSettingsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(groupsettings.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GroupSettings.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GroupSettingsUpsertOne) Ignore() *GroupSettingsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GroupSettingsUpsertOne) DoNothing() *GroupSettingsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GroupSettingsCreate.OnConflict
// documentation for more info.
func (u *GroupSettingsUpsertOne) Update(set func(*GroupSettingsUpsert)) *GroupSettingsUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GroupSettingsUpsert{UpdateSet: update})
	}))
	return u
}

// SetVisibility sets the "visibility" field.
func (u *GroupSettingsUpsertOne) SetVisibility(v groupsettings.Visibility) *GroupSettingsUpsertOne {
	return u.Update(func(s *GroupSettingsUpsert) {
		s.SetVisibility(v)
	})
}

// UpdateVisibility sets the "visibility" field to the value that was provided on create.
func (u *GroupSettingsUpsertOne) UpdateVisibility() *GroupSettingsUpsertOne {
	return u.Update(func(s *GroupSettingsUpsert) {
		s.UpdateVisibility()
	})
}

// SetJoinPolicy sets the "join_policy" field.
func (u *GroupSettingsUpsertOne) SetJoinPolicy(v groupsettings.JoinPolicy) *GroupSettingsUpsertOne {
	return u.Update(func(s *GroupSettingsUpsert) {
		s.SetJoinPolicy(v)
	})
}

// UpdateJoinPolicy sets the "join_policy" field to the value that was provided on create.
func (u *GroupSettingsUpsertOne) UpdateJoinPolicy() *GroupSettingsUpsertOne {
	return u.Update(func(s *GroupSettingsUpsert) {
		s.UpdateJoinPolicy()
	})
}

// SetMinimumRoleToInvite sets the "minimum_role_to_invite" field.
func (u *GroupSettingsUpsertOne) SetMinimumRoleToInvite(v enums.Role) *GroupSettingsUpsertOne {
	return u.Update(func(s *GroupSettingsUpsert) {
		s.SetMinimumRoleToInvite(v)
	})
}

// UpdateMinimumRoleToInvite sets the "minimum_role_to_invite" field to the value that was provided on create.
func (u *GroupSettingsUpsertOne) UpdateMinimumRoleToInvite() *GroupSettingsUpsertOne {
	return u.Update(func(s *GroupSettingsUpsert) {
		s.UpdateMinimumRoleToInvite()
	})
}

// ClearMinimumRoleToInvite clears the value of the "minimum_role_to_invite" field.
func (u *GroupSettingsUpsertOne) ClearMinimumRoleToInvite() *GroupSettingsUpsertOne {
	return u.Update(func(s *GroupSettingsUpsert) {
		s.ClearMinimumRoleToInvite()
	})
}

// Exec executes the query.
func (u *GroupSettingsUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GroupSettingsCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GroupSettingsUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GroupSettingsUpsertOne) ID(ctx context.Context) (id guidgql.GUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: GroupSettingsUpsertOne.ID is not supported by MySQL driver. Use GroupSettingsUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GroupSettingsUpsertOne) IDX(ctx context.Context) guidgql.GUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GroupSettingsCreateBulk is the builder for creating many GroupSettings entities in bulk.
type GroupSettingsCreateBulk struct {
	config
	err      error
	builders []*GroupSettingsCreate
	conflict []sql.ConflictOption
}

// Save creates the GroupSettings entities in the database.
func (gscb *GroupSettingsCreateBulk) Save(ctx context.Context) ([]*GroupSettings, error) {
	if gscb.err != nil {
		return nil, gscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gscb.builders))
	nodes := make([]*GroupSettings, len(gscb.builders))
	mutators := make([]Mutator, len(gscb.builders))
	for i := range gscb.builders {
		func(i int, root context.Context) {
			builder := gscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GroupSettingsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gscb *GroupSettingsCreateBulk) SaveX(ctx context.Context) []*GroupSettings {
	v, err := gscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gscb *GroupSettingsCreateBulk) Exec(ctx context.Context) error {
	_, err := gscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gscb *GroupSettingsCreateBulk) ExecX(ctx context.Context) {
	if err := gscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GroupSettings.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GroupSettingsUpsert) {
//			SetVisibility(v+v).
//		}).
//		Exec(ctx)
func (gscb *GroupSettingsCreateBulk) OnConflict(opts ...sql.ConflictOption) *GroupSettingsUpsertBulk {
	gscb.conflict = opts
	return &GroupSettingsUpsertBulk{
		create: gscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GroupSettings.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gscb *GroupSettingsCreateBulk) OnConflictColumns(columns ...string) *GroupSettingsUpsertBulk {
	gscb.conflict = append(gscb.conflict, sql.ConflictColumns(columns...))
	return &GroupSettingsUpsertBulk{
		create: gscb,
	}
}

// GroupSettingsUpsertBulk is the builder for "upsert"-ing
// a bulk of GroupSettings nodes.
type GroupSettingsUpsertBulk struct {
	create *GroupSettingsCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GroupSettings.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(groupsettings.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GroupSettingsUpsertBulk) UpdateNewValues() *GroupSettingsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(groupsettings.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GroupSettings.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GroupSettingsUpsertBulk) Ignore() *GroupSettingsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GroupSettingsUpsertBulk) DoNothing() *GroupSettingsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GroupSettingsCreateBulk.OnConflict
// documentation for more info.
func (u *GroupSettingsUpsertBulk) Update(set func(*GroupSettingsUpsert)) *GroupSettingsUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GroupSettingsUpsert{UpdateSet: update})
	}))
	return u
}

// SetVisibility sets the "visibility" field.
func (u *GroupSettingsUpsertBulk) SetVisibility(v groupsettings.Visibility) *GroupSettingsUpsertBulk {
	return u.Update(func(s *GroupSettingsUpsert) {
		s.SetVisibility(v)
	})
}

// UpdateVisibility sets the "visibility" field to the value that was provided on create.
func (u *GroupSettingsUpsertBulk) UpdateVisibility() *GroupSettingsUpsertBulk {
	return u.Update(func(s *GroupSettingsUpsert) {
		s.UpdateVisibility()
	})
}

// SetJoinPolicy sets the "join_policy" field.
func (u *GroupSettingsUpsertBulk) SetJoinPolicy(v groupsettings.JoinPolicy) *GroupSettingsUpsertBulk {
	return u.Update(func(s *GroupSettingsUpsert) {
		s.SetJoinPolicy(v)
	})
}

// UpdateJoinPolicy sets the "join_policy" field to the value that was provided on create.
func (u *GroupSettingsUpsertBulk) UpdateJoinPolicy() *GroupSettingsUpsertBulk {
	return u.Update(func(s *GroupSettingsUpsert) {
		s.UpdateJoinPolicy()
	})
}

// SetMinimumRoleToInvite sets the "minimum_role_to_invite" field.
func (u *GroupSettingsUpsertBulk) SetMinimumRoleToInvite(v enums.Role) *GroupSettingsUpsertBulk {
	return u.Update(func(s *GroupSettingsUpsert) {
		s.SetMinimumRoleToInvite(v)
	})
}

// UpdateMinimumRoleToInvite sets the "minimum_role_to_invite" field to the value that was provided on create.
func (u *GroupSettingsUpsertBulk) UpdateMinimumRoleToInvite() *GroupSettingsUpsertBulk {
	return u.Update(func(s *GroupSettingsUpsert) {
		s.UpdateMinimumRoleToInvite()
	})
}

// ClearMinimumRoleToInvite clears the value of the "minimum_role_to_invite" field.
func (u *GroupSettingsUpsertBulk) ClearMinimumRoleToInvite() *GroupSettingsUpsertBulk {
	return u.Update(func(s *GroupSettingsUpsert) {
		s.ClearMinimumRoleToInvite()
	})
}

// Exec executes the query.
func (u *GroupSettingsUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GroupSettingsCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GroupSettingsCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GroupSettingsUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
