// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-boardgame-stats/backend/internal/ent/enums"
	"github.com/open-boardgame-stats/backend/internal/ent/game"
	"github.com/open-boardgame-stats/backend/internal/ent/gamefavorite"
	"github.com/open-boardgame-stats/backend/internal/ent/gameversion"
	"github.com/open-boardgame-stats/backend/internal/ent/group"
	"github.com/open-boardgame-stats/backend/internal/ent/groupmembership"
	"github.com/open-boardgame-stats/backend/internal/ent/groupmembershipapplication"
	"github.com/open-boardgame-stats/backend/internal/ent/groupsettings"
	"github.com/open-boardgame-stats/backend/internal/ent/match"
	"github.com/open-boardgame-stats/backend/internal/ent/player"
	"github.com/open-boardgame-stats/backend/internal/ent/playersupervisionrequest"
	"github.com/open-boardgame-stats/backend/internal/ent/playersupervisionrequestapproval"
	"github.com/open-boardgame-stats/backend/internal/ent/predicate"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/stat"
	"github.com/open-boardgame-stats/backend/internal/ent/statdescription"
	"github.com/open-boardgame-stats/backend/internal/ent/statistic"
	"github.com/open-boardgame-stats/backend/internal/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeGame                             = "Game"
	TypeGameFavorite                     = "GameFavorite"
	TypeGameVersion                      = "GameVersion"
	TypeGroup                            = "Group"
	TypeGroupMembership                  = "GroupMembership"
	TypeGroupMembershipApplication       = "GroupMembershipApplication"
	TypeGroupSettings                    = "GroupSettings"
	TypeMatch                            = "Match"
	TypePlayer                           = "Player"
	TypePlayerSupervisionRequest         = "PlayerSupervisionRequest"
	TypePlayerSupervisionRequestApproval = "PlayerSupervisionRequestApproval"
	TypeStatDescription                  = "StatDescription"
	TypeStatistic                        = "Statistic"
	TypeUser                             = "User"
)

// GameMutation represents an operation that mutates the Game nodes in the graph.
type GameMutation struct {
	config
	op                Op
	typ               string
	id                *guidgql.GUID
	name              *string
	min_players       *int
	addmin_players    *int
	max_players       *int
	addmax_players    *int
	description       *string
	boardgamegeek_url *string
	clearedFields     map[string]struct{}
	author            *guidgql.GUID
	clearedauthor     bool
	favorites         map[guidgql.GUID]struct{}
	removedfavorites  map[guidgql.GUID]struct{}
	clearedfavorites  bool
	versions          map[guidgql.GUID]struct{}
	removedversions   map[guidgql.GUID]struct{}
	clearedversions   bool
	done              bool
	oldValue          func(context.Context) (*Game, error)
	predicates        []predicate.Game
}

var _ ent.Mutation = (*GameMutation)(nil)

// gameOption allows management of the mutation configuration using functional options.
type gameOption func(*GameMutation)

// newGameMutation creates new mutation for the Game entity.
func newGameMutation(c config, op Op, opts ...gameOption) *GameMutation {
	m := &GameMutation{
		config:        c,
		op:            op,
		typ:           TypeGame,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGameID sets the ID field of the mutation.
func withGameID(id guidgql.GUID) gameOption {
	return func(m *GameMutation) {
		var (
			err   error
			once  sync.Once
			value *Game
		)
		m.oldValue = func(ctx context.Context) (*Game, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Game.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGame sets the old Game of the mutation.
func withGame(node *Game) gameOption {
	return func(m *GameMutation) {
		m.oldValue = func(context.Context) (*Game, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GameMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GameMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Game entities.
func (m *GameMutation) SetID(id guidgql.GUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GameMutation) ID() (id guidgql.GUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GameMutation) IDs(ctx context.Context) ([]guidgql.GUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []guidgql.GUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Game.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *GameMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *GameMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Game entity.
// If the Game object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *GameMutation) ResetName() {
	m.name = nil
}

// SetMinPlayers sets the "min_players" field.
func (m *GameMutation) SetMinPlayers(i int) {
	m.min_players = &i
	m.addmin_players = nil
}

// MinPlayers returns the value of the "min_players" field in the mutation.
func (m *GameMutation) MinPlayers() (r int, exists bool) {
	v := m.min_players
	if v == nil {
		return
	}
	return *v, true
}

// OldMinPlayers returns the old "min_players" field's value of the Game entity.
// If the Game object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameMutation) OldMinPlayers(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMinPlayers is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMinPlayers requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMinPlayers: %w", err)
	}
	return oldValue.MinPlayers, nil
}

// AddMinPlayers adds i to the "min_players" field.
func (m *GameMutation) AddMinPlayers(i int) {
	if m.addmin_players != nil {
		*m.addmin_players += i
	} else {
		m.addmin_players = &i
	}
}

// AddedMinPlayers returns the value that was added to the "min_players" field in this mutation.
func (m *GameMutation) AddedMinPlayers() (r int, exists bool) {
	v := m.addmin_players
	if v == nil {
		return
	}
	return *v, true
}

// ResetMinPlayers resets all changes to the "min_players" field.
func (m *GameMutation) ResetMinPlayers() {
	m.min_players = nil
	m.addmin_players = nil
}

// SetMaxPlayers sets the "max_players" field.
func (m *GameMutation) SetMaxPlayers(i int) {
	m.max_players = &i
	m.addmax_players = nil
}

// MaxPlayers returns the value of the "max_players" field in the mutation.
func (m *GameMutation) MaxPlayers() (r int, exists bool) {
	v := m.max_players
	if v == nil {
		return
	}
	return *v, true
}

// OldMaxPlayers returns the old "max_players" field's value of the Game entity.
// If the Game object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameMutation) OldMaxPlayers(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMaxPlayers is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMaxPlayers requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaxPlayers: %w", err)
	}
	return oldValue.MaxPlayers, nil
}

// AddMaxPlayers adds i to the "max_players" field.
func (m *GameMutation) AddMaxPlayers(i int) {
	if m.addmax_players != nil {
		*m.addmax_players += i
	} else {
		m.addmax_players = &i
	}
}

// AddedMaxPlayers returns the value that was added to the "max_players" field in this mutation.
func (m *GameMutation) AddedMaxPlayers() (r int, exists bool) {
	v := m.addmax_players
	if v == nil {
		return
	}
	return *v, true
}

// ResetMaxPlayers resets all changes to the "max_players" field.
func (m *GameMutation) ResetMaxPlayers() {
	m.max_players = nil
	m.addmax_players = nil
}

// SetDescription sets the "description" field.
func (m *GameMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *GameMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Game entity.
// If the Game object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *GameMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[game.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *GameMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[game.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *GameMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, game.FieldDescription)
}

// SetBoardgamegeekURL sets the "boardgamegeek_url" field.
func (m *GameMutation) SetBoardgamegeekURL(s string) {
	m.boardgamegeek_url = &s
}

// BoardgamegeekURL returns the value of the "boardgamegeek_url" field in the mutation.
func (m *GameMutation) BoardgamegeekURL() (r string, exists bool) {
	v := m.boardgamegeek_url
	if v == nil {
		return
	}
	return *v, true
}

// OldBoardgamegeekURL returns the old "boardgamegeek_url" field's value of the Game entity.
// If the Game object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameMutation) OldBoardgamegeekURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBoardgamegeekURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBoardgamegeekURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBoardgamegeekURL: %w", err)
	}
	return oldValue.BoardgamegeekURL, nil
}

// ClearBoardgamegeekURL clears the value of the "boardgamegeek_url" field.
func (m *GameMutation) ClearBoardgamegeekURL() {
	m.boardgamegeek_url = nil
	m.clearedFields[game.FieldBoardgamegeekURL] = struct{}{}
}

// BoardgamegeekURLCleared returns if the "boardgamegeek_url" field was cleared in this mutation.
func (m *GameMutation) BoardgamegeekURLCleared() bool {
	_, ok := m.clearedFields[game.FieldBoardgamegeekURL]
	return ok
}

// ResetBoardgamegeekURL resets all changes to the "boardgamegeek_url" field.
func (m *GameMutation) ResetBoardgamegeekURL() {
	m.boardgamegeek_url = nil
	delete(m.clearedFields, game.FieldBoardgamegeekURL)
}

// SetAuthorID sets the "author" edge to the User entity by id.
func (m *GameMutation) SetAuthorID(id guidgql.GUID) {
	m.author = &id
}

// ClearAuthor clears the "author" edge to the User entity.
func (m *GameMutation) ClearAuthor() {
	m.clearedauthor = true
}

// AuthorCleared reports if the "author" edge to the User entity was cleared.
func (m *GameMutation) AuthorCleared() bool {
	return m.clearedauthor
}

// AuthorID returns the "author" edge ID in the mutation.
func (m *GameMutation) AuthorID() (id guidgql.GUID, exists bool) {
	if m.author != nil {
		return *m.author, true
	}
	return
}

// AuthorIDs returns the "author" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AuthorID instead. It exists only for internal usage by the builders.
func (m *GameMutation) AuthorIDs() (ids []guidgql.GUID) {
	if id := m.author; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAuthor resets all changes to the "author" edge.
func (m *GameMutation) ResetAuthor() {
	m.author = nil
	m.clearedauthor = false
}

// AddFavoriteIDs adds the "favorites" edge to the GameFavorite entity by ids.
func (m *GameMutation) AddFavoriteIDs(ids ...guidgql.GUID) {
	if m.favorites == nil {
		m.favorites = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		m.favorites[ids[i]] = struct{}{}
	}
}

// ClearFavorites clears the "favorites" edge to the GameFavorite entity.
func (m *GameMutation) ClearFavorites() {
	m.clearedfavorites = true
}

// FavoritesCleared reports if the "favorites" edge to the GameFavorite entity was cleared.
func (m *GameMutation) FavoritesCleared() bool {
	return m.clearedfavorites
}

// RemoveFavoriteIDs removes the "favorites" edge to the GameFavorite entity by IDs.
func (m *GameMutation) RemoveFavoriteIDs(ids ...guidgql.GUID) {
	if m.removedfavorites == nil {
		m.removedfavorites = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		delete(m.favorites, ids[i])
		m.removedfavorites[ids[i]] = struct{}{}
	}
}

// RemovedFavorites returns the removed IDs of the "favorites" edge to the GameFavorite entity.
func (m *GameMutation) RemovedFavoritesIDs() (ids []guidgql.GUID) {
	for id := range m.removedfavorites {
		ids = append(ids, id)
	}
	return
}

// FavoritesIDs returns the "favorites" edge IDs in the mutation.
func (m *GameMutation) FavoritesIDs() (ids []guidgql.GUID) {
	for id := range m.favorites {
		ids = append(ids, id)
	}
	return
}

// ResetFavorites resets all changes to the "favorites" edge.
func (m *GameMutation) ResetFavorites() {
	m.favorites = nil
	m.clearedfavorites = false
	m.removedfavorites = nil
}

// AddVersionIDs adds the "versions" edge to the GameVersion entity by ids.
func (m *GameMutation) AddVersionIDs(ids ...guidgql.GUID) {
	if m.versions == nil {
		m.versions = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		m.versions[ids[i]] = struct{}{}
	}
}

// ClearVersions clears the "versions" edge to the GameVersion entity.
func (m *GameMutation) ClearVersions() {
	m.clearedversions = true
}

// VersionsCleared reports if the "versions" edge to the GameVersion entity was cleared.
func (m *GameMutation) VersionsCleared() bool {
	return m.clearedversions
}

// RemoveVersionIDs removes the "versions" edge to the GameVersion entity by IDs.
func (m *GameMutation) RemoveVersionIDs(ids ...guidgql.GUID) {
	if m.removedversions == nil {
		m.removedversions = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		delete(m.versions, ids[i])
		m.removedversions[ids[i]] = struct{}{}
	}
}

// RemovedVersions returns the removed IDs of the "versions" edge to the GameVersion entity.
func (m *GameMutation) RemovedVersionsIDs() (ids []guidgql.GUID) {
	for id := range m.removedversions {
		ids = append(ids, id)
	}
	return
}

// VersionsIDs returns the "versions" edge IDs in the mutation.
func (m *GameMutation) VersionsIDs() (ids []guidgql.GUID) {
	for id := range m.versions {
		ids = append(ids, id)
	}
	return
}

// ResetVersions resets all changes to the "versions" edge.
func (m *GameMutation) ResetVersions() {
	m.versions = nil
	m.clearedversions = false
	m.removedversions = nil
}

// Where appends a list predicates to the GameMutation builder.
func (m *GameMutation) Where(ps ...predicate.Game) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GameMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GameMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Game, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GameMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GameMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Game).
func (m *GameMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GameMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, game.FieldName)
	}
	if m.min_players != nil {
		fields = append(fields, game.FieldMinPlayers)
	}
	if m.max_players != nil {
		fields = append(fields, game.FieldMaxPlayers)
	}
	if m.description != nil {
		fields = append(fields, game.FieldDescription)
	}
	if m.boardgamegeek_url != nil {
		fields = append(fields, game.FieldBoardgamegeekURL)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GameMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case game.FieldName:
		return m.Name()
	case game.FieldMinPlayers:
		return m.MinPlayers()
	case game.FieldMaxPlayers:
		return m.MaxPlayers()
	case game.FieldDescription:
		return m.Description()
	case game.FieldBoardgamegeekURL:
		return m.BoardgamegeekURL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GameMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case game.FieldName:
		return m.OldName(ctx)
	case game.FieldMinPlayers:
		return m.OldMinPlayers(ctx)
	case game.FieldMaxPlayers:
		return m.OldMaxPlayers(ctx)
	case game.FieldDescription:
		return m.OldDescription(ctx)
	case game.FieldBoardgamegeekURL:
		return m.OldBoardgamegeekURL(ctx)
	}
	return nil, fmt.Errorf("unknown Game field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GameMutation) SetField(name string, value ent.Value) error {
	switch name {
	case game.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case game.FieldMinPlayers:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMinPlayers(v)
		return nil
	case game.FieldMaxPlayers:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaxPlayers(v)
		return nil
	case game.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case game.FieldBoardgamegeekURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBoardgamegeekURL(v)
		return nil
	}
	return fmt.Errorf("unknown Game field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GameMutation) AddedFields() []string {
	var fields []string
	if m.addmin_players != nil {
		fields = append(fields, game.FieldMinPlayers)
	}
	if m.addmax_players != nil {
		fields = append(fields, game.FieldMaxPlayers)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GameMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case game.FieldMinPlayers:
		return m.AddedMinPlayers()
	case game.FieldMaxPlayers:
		return m.AddedMaxPlayers()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GameMutation) AddField(name string, value ent.Value) error {
	switch name {
	case game.FieldMinPlayers:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMinPlayers(v)
		return nil
	case game.FieldMaxPlayers:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMaxPlayers(v)
		return nil
	}
	return fmt.Errorf("unknown Game numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GameMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(game.FieldDescription) {
		fields = append(fields, game.FieldDescription)
	}
	if m.FieldCleared(game.FieldBoardgamegeekURL) {
		fields = append(fields, game.FieldBoardgamegeekURL)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GameMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GameMutation) ClearField(name string) error {
	switch name {
	case game.FieldDescription:
		m.ClearDescription()
		return nil
	case game.FieldBoardgamegeekURL:
		m.ClearBoardgamegeekURL()
		return nil
	}
	return fmt.Errorf("unknown Game nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GameMutation) ResetField(name string) error {
	switch name {
	case game.FieldName:
		m.ResetName()
		return nil
	case game.FieldMinPlayers:
		m.ResetMinPlayers()
		return nil
	case game.FieldMaxPlayers:
		m.ResetMaxPlayers()
		return nil
	case game.FieldDescription:
		m.ResetDescription()
		return nil
	case game.FieldBoardgamegeekURL:
		m.ResetBoardgamegeekURL()
		return nil
	}
	return fmt.Errorf("unknown Game field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GameMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.author != nil {
		edges = append(edges, game.EdgeAuthor)
	}
	if m.favorites != nil {
		edges = append(edges, game.EdgeFavorites)
	}
	if m.versions != nil {
		edges = append(edges, game.EdgeVersions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GameMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case game.EdgeAuthor:
		if id := m.author; id != nil {
			return []ent.Value{*id}
		}
	case game.EdgeFavorites:
		ids := make([]ent.Value, 0, len(m.favorites))
		for id := range m.favorites {
			ids = append(ids, id)
		}
		return ids
	case game.EdgeVersions:
		ids := make([]ent.Value, 0, len(m.versions))
		for id := range m.versions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GameMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedfavorites != nil {
		edges = append(edges, game.EdgeFavorites)
	}
	if m.removedversions != nil {
		edges = append(edges, game.EdgeVersions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GameMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case game.EdgeFavorites:
		ids := make([]ent.Value, 0, len(m.removedfavorites))
		for id := range m.removedfavorites {
			ids = append(ids, id)
		}
		return ids
	case game.EdgeVersions:
		ids := make([]ent.Value, 0, len(m.removedversions))
		for id := range m.removedversions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GameMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedauthor {
		edges = append(edges, game.EdgeAuthor)
	}
	if m.clearedfavorites {
		edges = append(edges, game.EdgeFavorites)
	}
	if m.clearedversions {
		edges = append(edges, game.EdgeVersions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GameMutation) EdgeCleared(name string) bool {
	switch name {
	case game.EdgeAuthor:
		return m.clearedauthor
	case game.EdgeFavorites:
		return m.clearedfavorites
	case game.EdgeVersions:
		return m.clearedversions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GameMutation) ClearEdge(name string) error {
	switch name {
	case game.EdgeAuthor:
		m.ClearAuthor()
		return nil
	}
	return fmt.Errorf("unknown Game unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GameMutation) ResetEdge(name string) error {
	switch name {
	case game.EdgeAuthor:
		m.ResetAuthor()
		return nil
	case game.EdgeFavorites:
		m.ResetFavorites()
		return nil
	case game.EdgeVersions:
		m.ResetVersions()
		return nil
	}
	return fmt.Errorf("unknown Game edge %s", name)
}

// GameFavoriteMutation represents an operation that mutates the GameFavorite nodes in the graph.
type GameFavoriteMutation struct {
	config
	op            Op
	typ           string
	id            *guidgql.GUID
	clearedFields map[string]struct{}
	game          *guidgql.GUID
	clearedgame   bool
	user          *guidgql.GUID
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*GameFavorite, error)
	predicates    []predicate.GameFavorite
}

var _ ent.Mutation = (*GameFavoriteMutation)(nil)

// gamefavoriteOption allows management of the mutation configuration using functional options.
type gamefavoriteOption func(*GameFavoriteMutation)

// newGameFavoriteMutation creates new mutation for the GameFavorite entity.
func newGameFavoriteMutation(c config, op Op, opts ...gamefavoriteOption) *GameFavoriteMutation {
	m := &GameFavoriteMutation{
		config:        c,
		op:            op,
		typ:           TypeGameFavorite,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGameFavoriteID sets the ID field of the mutation.
func withGameFavoriteID(id guidgql.GUID) gamefavoriteOption {
	return func(m *GameFavoriteMutation) {
		var (
			err   error
			once  sync.Once
			value *GameFavorite
		)
		m.oldValue = func(ctx context.Context) (*GameFavorite, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GameFavorite.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGameFavorite sets the old GameFavorite of the mutation.
func withGameFavorite(node *GameFavorite) gamefavoriteOption {
	return func(m *GameFavoriteMutation) {
		m.oldValue = func(context.Context) (*GameFavorite, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GameFavoriteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GameFavoriteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GameFavorite entities.
func (m *GameFavoriteMutation) SetID(id guidgql.GUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GameFavoriteMutation) ID() (id guidgql.GUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GameFavoriteMutation) IDs(ctx context.Context) ([]guidgql.GUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []guidgql.GUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GameFavorite.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetGameID sets the "game" edge to the Game entity by id.
func (m *GameFavoriteMutation) SetGameID(id guidgql.GUID) {
	m.game = &id
}

// ClearGame clears the "game" edge to the Game entity.
func (m *GameFavoriteMutation) ClearGame() {
	m.clearedgame = true
}

// GameCleared reports if the "game" edge to the Game entity was cleared.
func (m *GameFavoriteMutation) GameCleared() bool {
	return m.clearedgame
}

// GameID returns the "game" edge ID in the mutation.
func (m *GameFavoriteMutation) GameID() (id guidgql.GUID, exists bool) {
	if m.game != nil {
		return *m.game, true
	}
	return
}

// GameIDs returns the "game" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GameID instead. It exists only for internal usage by the builders.
func (m *GameFavoriteMutation) GameIDs() (ids []guidgql.GUID) {
	if id := m.game; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGame resets all changes to the "game" edge.
func (m *GameFavoriteMutation) ResetGame() {
	m.game = nil
	m.clearedgame = false
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *GameFavoriteMutation) SetUserID(id guidgql.GUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *GameFavoriteMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *GameFavoriteMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *GameFavoriteMutation) UserID() (id guidgql.GUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *GameFavoriteMutation) UserIDs() (ids []guidgql.GUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *GameFavoriteMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the GameFavoriteMutation builder.
func (m *GameFavoriteMutation) Where(ps ...predicate.GameFavorite) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GameFavoriteMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GameFavoriteMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.GameFavorite, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GameFavoriteMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GameFavoriteMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (GameFavorite).
func (m *GameFavoriteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GameFavoriteMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GameFavoriteMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GameFavoriteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown GameFavorite field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GameFavoriteMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown GameFavorite field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GameFavoriteMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GameFavoriteMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GameFavoriteMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown GameFavorite numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GameFavoriteMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GameFavoriteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GameFavoriteMutation) ClearField(name string) error {
	return fmt.Errorf("unknown GameFavorite nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GameFavoriteMutation) ResetField(name string) error {
	return fmt.Errorf("unknown GameFavorite field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GameFavoriteMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.game != nil {
		edges = append(edges, gamefavorite.EdgeGame)
	}
	if m.user != nil {
		edges = append(edges, gamefavorite.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GameFavoriteMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case gamefavorite.EdgeGame:
		if id := m.game; id != nil {
			return []ent.Value{*id}
		}
	case gamefavorite.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GameFavoriteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GameFavoriteMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GameFavoriteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedgame {
		edges = append(edges, gamefavorite.EdgeGame)
	}
	if m.cleareduser {
		edges = append(edges, gamefavorite.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GameFavoriteMutation) EdgeCleared(name string) bool {
	switch name {
	case gamefavorite.EdgeGame:
		return m.clearedgame
	case gamefavorite.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GameFavoriteMutation) ClearEdge(name string) error {
	switch name {
	case gamefavorite.EdgeGame:
		m.ClearGame()
		return nil
	case gamefavorite.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown GameFavorite unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GameFavoriteMutation) ResetEdge(name string) error {
	switch name {
	case gamefavorite.EdgeGame:
		m.ResetGame()
		return nil
	case gamefavorite.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown GameFavorite edge %s", name)
}

// GameVersionMutation represents an operation that mutates the GameVersion nodes in the graph.
type GameVersionMutation struct {
	config
	op                       Op
	typ                      string
	id                       *guidgql.GUID
	version_number           *int
	addversion_number        *int
	clearedFields            map[string]struct{}
	game                     *guidgql.GUID
	clearedgame              bool
	stat_descriptions        map[guidgql.GUID]struct{}
	removedstat_descriptions map[guidgql.GUID]struct{}
	clearedstat_descriptions bool
	matches                  map[guidgql.GUID]struct{}
	removedmatches           map[guidgql.GUID]struct{}
	clearedmatches           bool
	done                     bool
	oldValue                 func(context.Context) (*GameVersion, error)
	predicates               []predicate.GameVersion
}

var _ ent.Mutation = (*GameVersionMutation)(nil)

// gameversionOption allows management of the mutation configuration using functional options.
type gameversionOption func(*GameVersionMutation)

// newGameVersionMutation creates new mutation for the GameVersion entity.
func newGameVersionMutation(c config, op Op, opts ...gameversionOption) *GameVersionMutation {
	m := &GameVersionMutation{
		config:        c,
		op:            op,
		typ:           TypeGameVersion,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGameVersionID sets the ID field of the mutation.
func withGameVersionID(id guidgql.GUID) gameversionOption {
	return func(m *GameVersionMutation) {
		var (
			err   error
			once  sync.Once
			value *GameVersion
		)
		m.oldValue = func(ctx context.Context) (*GameVersion, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GameVersion.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGameVersion sets the old GameVersion of the mutation.
func withGameVersion(node *GameVersion) gameversionOption {
	return func(m *GameVersionMutation) {
		m.oldValue = func(context.Context) (*GameVersion, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GameVersionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GameVersionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GameVersion entities.
func (m *GameVersionMutation) SetID(id guidgql.GUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GameVersionMutation) ID() (id guidgql.GUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GameVersionMutation) IDs(ctx context.Context) ([]guidgql.GUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []guidgql.GUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GameVersion.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetVersionNumber sets the "version_number" field.
func (m *GameVersionMutation) SetVersionNumber(i int) {
	m.version_number = &i
	m.addversion_number = nil
}

// VersionNumber returns the value of the "version_number" field in the mutation.
func (m *GameVersionMutation) VersionNumber() (r int, exists bool) {
	v := m.version_number
	if v == nil {
		return
	}
	return *v, true
}

// OldVersionNumber returns the old "version_number" field's value of the GameVersion entity.
// If the GameVersion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameVersionMutation) OldVersionNumber(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersionNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersionNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersionNumber: %w", err)
	}
	return oldValue.VersionNumber, nil
}

// AddVersionNumber adds i to the "version_number" field.
func (m *GameVersionMutation) AddVersionNumber(i int) {
	if m.addversion_number != nil {
		*m.addversion_number += i
	} else {
		m.addversion_number = &i
	}
}

// AddedVersionNumber returns the value that was added to the "version_number" field in this mutation.
func (m *GameVersionMutation) AddedVersionNumber() (r int, exists bool) {
	v := m.addversion_number
	if v == nil {
		return
	}
	return *v, true
}

// ResetVersionNumber resets all changes to the "version_number" field.
func (m *GameVersionMutation) ResetVersionNumber() {
	m.version_number = nil
	m.addversion_number = nil
}

// SetGameID sets the "game" edge to the Game entity by id.
func (m *GameVersionMutation) SetGameID(id guidgql.GUID) {
	m.game = &id
}

// ClearGame clears the "game" edge to the Game entity.
func (m *GameVersionMutation) ClearGame() {
	m.clearedgame = true
}

// GameCleared reports if the "game" edge to the Game entity was cleared.
func (m *GameVersionMutation) GameCleared() bool {
	return m.clearedgame
}

// GameID returns the "game" edge ID in the mutation.
func (m *GameVersionMutation) GameID() (id guidgql.GUID, exists bool) {
	if m.game != nil {
		return *m.game, true
	}
	return
}

// GameIDs returns the "game" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GameID instead. It exists only for internal usage by the builders.
func (m *GameVersionMutation) GameIDs() (ids []guidgql.GUID) {
	if id := m.game; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGame resets all changes to the "game" edge.
func (m *GameVersionMutation) ResetGame() {
	m.game = nil
	m.clearedgame = false
}

// AddStatDescriptionIDs adds the "stat_descriptions" edge to the StatDescription entity by ids.
func (m *GameVersionMutation) AddStatDescriptionIDs(ids ...guidgql.GUID) {
	if m.stat_descriptions == nil {
		m.stat_descriptions = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		m.stat_descriptions[ids[i]] = struct{}{}
	}
}

// ClearStatDescriptions clears the "stat_descriptions" edge to the StatDescription entity.
func (m *GameVersionMutation) ClearStatDescriptions() {
	m.clearedstat_descriptions = true
}

// StatDescriptionsCleared reports if the "stat_descriptions" edge to the StatDescription entity was cleared.
func (m *GameVersionMutation) StatDescriptionsCleared() bool {
	return m.clearedstat_descriptions
}

// RemoveStatDescriptionIDs removes the "stat_descriptions" edge to the StatDescription entity by IDs.
func (m *GameVersionMutation) RemoveStatDescriptionIDs(ids ...guidgql.GUID) {
	if m.removedstat_descriptions == nil {
		m.removedstat_descriptions = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		delete(m.stat_descriptions, ids[i])
		m.removedstat_descriptions[ids[i]] = struct{}{}
	}
}

// RemovedStatDescriptions returns the removed IDs of the "stat_descriptions" edge to the StatDescription entity.
func (m *GameVersionMutation) RemovedStatDescriptionsIDs() (ids []guidgql.GUID) {
	for id := range m.removedstat_descriptions {
		ids = append(ids, id)
	}
	return
}

// StatDescriptionsIDs returns the "stat_descriptions" edge IDs in the mutation.
func (m *GameVersionMutation) StatDescriptionsIDs() (ids []guidgql.GUID) {
	for id := range m.stat_descriptions {
		ids = append(ids, id)
	}
	return
}

// ResetStatDescriptions resets all changes to the "stat_descriptions" edge.
func (m *GameVersionMutation) ResetStatDescriptions() {
	m.stat_descriptions = nil
	m.clearedstat_descriptions = false
	m.removedstat_descriptions = nil
}

// AddMatchIDs adds the "matches" edge to the Match entity by ids.
func (m *GameVersionMutation) AddMatchIDs(ids ...guidgql.GUID) {
	if m.matches == nil {
		m.matches = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		m.matches[ids[i]] = struct{}{}
	}
}

// ClearMatches clears the "matches" edge to the Match entity.
func (m *GameVersionMutation) ClearMatches() {
	m.clearedmatches = true
}

// MatchesCleared reports if the "matches" edge to the Match entity was cleared.
func (m *GameVersionMutation) MatchesCleared() bool {
	return m.clearedmatches
}

// RemoveMatchIDs removes the "matches" edge to the Match entity by IDs.
func (m *GameVersionMutation) RemoveMatchIDs(ids ...guidgql.GUID) {
	if m.removedmatches == nil {
		m.removedmatches = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		delete(m.matches, ids[i])
		m.removedmatches[ids[i]] = struct{}{}
	}
}

// RemovedMatches returns the removed IDs of the "matches" edge to the Match entity.
func (m *GameVersionMutation) RemovedMatchesIDs() (ids []guidgql.GUID) {
	for id := range m.removedmatches {
		ids = append(ids, id)
	}
	return
}

// MatchesIDs returns the "matches" edge IDs in the mutation.
func (m *GameVersionMutation) MatchesIDs() (ids []guidgql.GUID) {
	for id := range m.matches {
		ids = append(ids, id)
	}
	return
}

// ResetMatches resets all changes to the "matches" edge.
func (m *GameVersionMutation) ResetMatches() {
	m.matches = nil
	m.clearedmatches = false
	m.removedmatches = nil
}

// Where appends a list predicates to the GameVersionMutation builder.
func (m *GameVersionMutation) Where(ps ...predicate.GameVersion) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GameVersionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GameVersionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.GameVersion, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GameVersionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GameVersionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (GameVersion).
func (m *GameVersionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GameVersionMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.version_number != nil {
		fields = append(fields, gameversion.FieldVersionNumber)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GameVersionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case gameversion.FieldVersionNumber:
		return m.VersionNumber()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GameVersionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case gameversion.FieldVersionNumber:
		return m.OldVersionNumber(ctx)
	}
	return nil, fmt.Errorf("unknown GameVersion field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GameVersionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case gameversion.FieldVersionNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersionNumber(v)
		return nil
	}
	return fmt.Errorf("unknown GameVersion field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GameVersionMutation) AddedFields() []string {
	var fields []string
	if m.addversion_number != nil {
		fields = append(fields, gameversion.FieldVersionNumber)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GameVersionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case gameversion.FieldVersionNumber:
		return m.AddedVersionNumber()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GameVersionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case gameversion.FieldVersionNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVersionNumber(v)
		return nil
	}
	return fmt.Errorf("unknown GameVersion numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GameVersionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GameVersionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GameVersionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown GameVersion nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GameVersionMutation) ResetField(name string) error {
	switch name {
	case gameversion.FieldVersionNumber:
		m.ResetVersionNumber()
		return nil
	}
	return fmt.Errorf("unknown GameVersion field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GameVersionMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.game != nil {
		edges = append(edges, gameversion.EdgeGame)
	}
	if m.stat_descriptions != nil {
		edges = append(edges, gameversion.EdgeStatDescriptions)
	}
	if m.matches != nil {
		edges = append(edges, gameversion.EdgeMatches)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GameVersionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case gameversion.EdgeGame:
		if id := m.game; id != nil {
			return []ent.Value{*id}
		}
	case gameversion.EdgeStatDescriptions:
		ids := make([]ent.Value, 0, len(m.stat_descriptions))
		for id := range m.stat_descriptions {
			ids = append(ids, id)
		}
		return ids
	case gameversion.EdgeMatches:
		ids := make([]ent.Value, 0, len(m.matches))
		for id := range m.matches {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GameVersionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedstat_descriptions != nil {
		edges = append(edges, gameversion.EdgeStatDescriptions)
	}
	if m.removedmatches != nil {
		edges = append(edges, gameversion.EdgeMatches)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GameVersionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case gameversion.EdgeStatDescriptions:
		ids := make([]ent.Value, 0, len(m.removedstat_descriptions))
		for id := range m.removedstat_descriptions {
			ids = append(ids, id)
		}
		return ids
	case gameversion.EdgeMatches:
		ids := make([]ent.Value, 0, len(m.removedmatches))
		for id := range m.removedmatches {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GameVersionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedgame {
		edges = append(edges, gameversion.EdgeGame)
	}
	if m.clearedstat_descriptions {
		edges = append(edges, gameversion.EdgeStatDescriptions)
	}
	if m.clearedmatches {
		edges = append(edges, gameversion.EdgeMatches)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GameVersionMutation) EdgeCleared(name string) bool {
	switch name {
	case gameversion.EdgeGame:
		return m.clearedgame
	case gameversion.EdgeStatDescriptions:
		return m.clearedstat_descriptions
	case gameversion.EdgeMatches:
		return m.clearedmatches
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GameVersionMutation) ClearEdge(name string) error {
	switch name {
	case gameversion.EdgeGame:
		m.ClearGame()
		return nil
	}
	return fmt.Errorf("unknown GameVersion unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GameVersionMutation) ResetEdge(name string) error {
	switch name {
	case gameversion.EdgeGame:
		m.ResetGame()
		return nil
	case gameversion.EdgeStatDescriptions:
		m.ResetStatDescriptions()
		return nil
	case gameversion.EdgeMatches:
		m.ResetMatches()
		return nil
	}
	return fmt.Errorf("unknown GameVersion edge %s", name)
}

// GroupMutation represents an operation that mutates the Group nodes in the graph.
type GroupMutation struct {
	config
	op                  Op
	typ                 string
	id                  *guidgql.GUID
	name                *string
	description         *string
	logo_url            *string
	clearedFields       map[string]struct{}
	settings            *guidgql.GUID
	clearedsettings     bool
	members             map[guidgql.GUID]struct{}
	removedmembers      map[guidgql.GUID]struct{}
	clearedmembers      bool
	applications        map[guidgql.GUID]struct{}
	removedapplications map[guidgql.GUID]struct{}
	clearedapplications bool
	done                bool
	oldValue            func(context.Context) (*Group, error)
	predicates          []predicate.Group
}

var _ ent.Mutation = (*GroupMutation)(nil)

// groupOption allows management of the mutation configuration using functional options.
type groupOption func(*GroupMutation)

// newGroupMutation creates new mutation for the Group entity.
func newGroupMutation(c config, op Op, opts ...groupOption) *GroupMutation {
	m := &GroupMutation{
		config:        c,
		op:            op,
		typ:           TypeGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupID sets the ID field of the mutation.
func withGroupID(id guidgql.GUID) groupOption {
	return func(m *GroupMutation) {
		var (
			err   error
			once  sync.Once
			value *Group
		)
		m.oldValue = func(ctx context.Context) (*Group, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Group.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroup sets the old Group of the mutation.
func withGroup(node *Group) groupOption {
	return func(m *GroupMutation) {
		m.oldValue = func(context.Context) (*Group, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Group entities.
func (m *GroupMutation) SetID(id guidgql.GUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupMutation) ID() (id guidgql.GUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GroupMutation) IDs(ctx context.Context) ([]guidgql.GUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []guidgql.GUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Group.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *GroupMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *GroupMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *GroupMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *GroupMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *GroupMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *GroupMutation) ResetDescription() {
	m.description = nil
}

// SetLogoURL sets the "logo_url" field.
func (m *GroupMutation) SetLogoURL(s string) {
	m.logo_url = &s
}

// LogoURL returns the value of the "logo_url" field in the mutation.
func (m *GroupMutation) LogoURL() (r string, exists bool) {
	v := m.logo_url
	if v == nil {
		return
	}
	return *v, true
}

// OldLogoURL returns the old "logo_url" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldLogoURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogoURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogoURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogoURL: %w", err)
	}
	return oldValue.LogoURL, nil
}

// ResetLogoURL resets all changes to the "logo_url" field.
func (m *GroupMutation) ResetLogoURL() {
	m.logo_url = nil
}

// SetSettingsID sets the "settings" edge to the GroupSettings entity by id.
func (m *GroupMutation) SetSettingsID(id guidgql.GUID) {
	m.settings = &id
}

// ClearSettings clears the "settings" edge to the GroupSettings entity.
func (m *GroupMutation) ClearSettings() {
	m.clearedsettings = true
}

// SettingsCleared reports if the "settings" edge to the GroupSettings entity was cleared.
func (m *GroupMutation) SettingsCleared() bool {
	return m.clearedsettings
}

// SettingsID returns the "settings" edge ID in the mutation.
func (m *GroupMutation) SettingsID() (id guidgql.GUID, exists bool) {
	if m.settings != nil {
		return *m.settings, true
	}
	return
}

// SettingsIDs returns the "settings" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SettingsID instead. It exists only for internal usage by the builders.
func (m *GroupMutation) SettingsIDs() (ids []guidgql.GUID) {
	if id := m.settings; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSettings resets all changes to the "settings" edge.
func (m *GroupMutation) ResetSettings() {
	m.settings = nil
	m.clearedsettings = false
}

// AddMemberIDs adds the "members" edge to the GroupMembership entity by ids.
func (m *GroupMutation) AddMemberIDs(ids ...guidgql.GUID) {
	if m.members == nil {
		m.members = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		m.members[ids[i]] = struct{}{}
	}
}

// ClearMembers clears the "members" edge to the GroupMembership entity.
func (m *GroupMutation) ClearMembers() {
	m.clearedmembers = true
}

// MembersCleared reports if the "members" edge to the GroupMembership entity was cleared.
func (m *GroupMutation) MembersCleared() bool {
	return m.clearedmembers
}

// RemoveMemberIDs removes the "members" edge to the GroupMembership entity by IDs.
func (m *GroupMutation) RemoveMemberIDs(ids ...guidgql.GUID) {
	if m.removedmembers == nil {
		m.removedmembers = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		delete(m.members, ids[i])
		m.removedmembers[ids[i]] = struct{}{}
	}
}

// RemovedMembers returns the removed IDs of the "members" edge to the GroupMembership entity.
func (m *GroupMutation) RemovedMembersIDs() (ids []guidgql.GUID) {
	for id := range m.removedmembers {
		ids = append(ids, id)
	}
	return
}

// MembersIDs returns the "members" edge IDs in the mutation.
func (m *GroupMutation) MembersIDs() (ids []guidgql.GUID) {
	for id := range m.members {
		ids = append(ids, id)
	}
	return
}

// ResetMembers resets all changes to the "members" edge.
func (m *GroupMutation) ResetMembers() {
	m.members = nil
	m.clearedmembers = false
	m.removedmembers = nil
}

// AddApplicationIDs adds the "applications" edge to the GroupMembershipApplication entity by ids.
func (m *GroupMutation) AddApplicationIDs(ids ...guidgql.GUID) {
	if m.applications == nil {
		m.applications = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		m.applications[ids[i]] = struct{}{}
	}
}

// ClearApplications clears the "applications" edge to the GroupMembershipApplication entity.
func (m *GroupMutation) ClearApplications() {
	m.clearedapplications = true
}

// ApplicationsCleared reports if the "applications" edge to the GroupMembershipApplication entity was cleared.
func (m *GroupMutation) ApplicationsCleared() bool {
	return m.clearedapplications
}

// RemoveApplicationIDs removes the "applications" edge to the GroupMembershipApplication entity by IDs.
func (m *GroupMutation) RemoveApplicationIDs(ids ...guidgql.GUID) {
	if m.removedapplications == nil {
		m.removedapplications = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		delete(m.applications, ids[i])
		m.removedapplications[ids[i]] = struct{}{}
	}
}

// RemovedApplications returns the removed IDs of the "applications" edge to the GroupMembershipApplication entity.
func (m *GroupMutation) RemovedApplicationsIDs() (ids []guidgql.GUID) {
	for id := range m.removedapplications {
		ids = append(ids, id)
	}
	return
}

// ApplicationsIDs returns the "applications" edge IDs in the mutation.
func (m *GroupMutation) ApplicationsIDs() (ids []guidgql.GUID) {
	for id := range m.applications {
		ids = append(ids, id)
	}
	return
}

// ResetApplications resets all changes to the "applications" edge.
func (m *GroupMutation) ResetApplications() {
	m.applications = nil
	m.clearedapplications = false
	m.removedapplications = nil
}

// Where appends a list predicates to the GroupMutation builder.
func (m *GroupMutation) Where(ps ...predicate.Group) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GroupMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GroupMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Group, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GroupMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GroupMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Group).
func (m *GroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, group.FieldName)
	}
	if m.description != nil {
		fields = append(fields, group.FieldDescription)
	}
	if m.logo_url != nil {
		fields = append(fields, group.FieldLogoURL)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case group.FieldName:
		return m.Name()
	case group.FieldDescription:
		return m.Description()
	case group.FieldLogoURL:
		return m.LogoURL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case group.FieldName:
		return m.OldName(ctx)
	case group.FieldDescription:
		return m.OldDescription(ctx)
	case group.FieldLogoURL:
		return m.OldLogoURL(ctx)
	}
	return nil, fmt.Errorf("unknown Group field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case group.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case group.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case group.FieldLogoURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogoURL(v)
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Group numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Group nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupMutation) ResetField(name string) error {
	switch name {
	case group.FieldName:
		m.ResetName()
		return nil
	case group.FieldDescription:
		m.ResetDescription()
		return nil
	case group.FieldLogoURL:
		m.ResetLogoURL()
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.settings != nil {
		edges = append(edges, group.EdgeSettings)
	}
	if m.members != nil {
		edges = append(edges, group.EdgeMembers)
	}
	if m.applications != nil {
		edges = append(edges, group.EdgeApplications)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeSettings:
		if id := m.settings; id != nil {
			return []ent.Value{*id}
		}
	case group.EdgeMembers:
		ids := make([]ent.Value, 0, len(m.members))
		for id := range m.members {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeApplications:
		ids := make([]ent.Value, 0, len(m.applications))
		for id := range m.applications {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedmembers != nil {
		edges = append(edges, group.EdgeMembers)
	}
	if m.removedapplications != nil {
		edges = append(edges, group.EdgeApplications)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeMembers:
		ids := make([]ent.Value, 0, len(m.removedmembers))
		for id := range m.removedmembers {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeApplications:
		ids := make([]ent.Value, 0, len(m.removedapplications))
		for id := range m.removedapplications {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedsettings {
		edges = append(edges, group.EdgeSettings)
	}
	if m.clearedmembers {
		edges = append(edges, group.EdgeMembers)
	}
	if m.clearedapplications {
		edges = append(edges, group.EdgeApplications)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupMutation) EdgeCleared(name string) bool {
	switch name {
	case group.EdgeSettings:
		return m.clearedsettings
	case group.EdgeMembers:
		return m.clearedmembers
	case group.EdgeApplications:
		return m.clearedapplications
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupMutation) ClearEdge(name string) error {
	switch name {
	case group.EdgeSettings:
		m.ClearSettings()
		return nil
	}
	return fmt.Errorf("unknown Group unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupMutation) ResetEdge(name string) error {
	switch name {
	case group.EdgeSettings:
		m.ResetSettings()
		return nil
	case group.EdgeMembers:
		m.ResetMembers()
		return nil
	case group.EdgeApplications:
		m.ResetApplications()
		return nil
	}
	return fmt.Errorf("unknown Group edge %s", name)
}

// GroupMembershipMutation represents an operation that mutates the GroupMembership nodes in the graph.
type GroupMembershipMutation struct {
	config
	op            Op
	typ           string
	id            *guidgql.GUID
	role          *enums.Role
	clearedFields map[string]struct{}
	group         *guidgql.GUID
	clearedgroup  bool
	user          *guidgql.GUID
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*GroupMembership, error)
	predicates    []predicate.GroupMembership
}

var _ ent.Mutation = (*GroupMembershipMutation)(nil)

// groupmembershipOption allows management of the mutation configuration using functional options.
type groupmembershipOption func(*GroupMembershipMutation)

// newGroupMembershipMutation creates new mutation for the GroupMembership entity.
func newGroupMembershipMutation(c config, op Op, opts ...groupmembershipOption) *GroupMembershipMutation {
	m := &GroupMembershipMutation{
		config:        c,
		op:            op,
		typ:           TypeGroupMembership,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupMembershipID sets the ID field of the mutation.
func withGroupMembershipID(id guidgql.GUID) groupmembershipOption {
	return func(m *GroupMembershipMutation) {
		var (
			err   error
			once  sync.Once
			value *GroupMembership
		)
		m.oldValue = func(ctx context.Context) (*GroupMembership, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GroupMembership.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroupMembership sets the old GroupMembership of the mutation.
func withGroupMembership(node *GroupMembership) groupmembershipOption {
	return func(m *GroupMembershipMutation) {
		m.oldValue = func(context.Context) (*GroupMembership, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupMembershipMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupMembershipMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GroupMembership entities.
func (m *GroupMembershipMutation) SetID(id guidgql.GUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupMembershipMutation) ID() (id guidgql.GUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GroupMembershipMutation) IDs(ctx context.Context) ([]guidgql.GUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []guidgql.GUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GroupMembership.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRole sets the "role" field.
func (m *GroupMembershipMutation) SetRole(e enums.Role) {
	m.role = &e
}

// Role returns the value of the "role" field in the mutation.
func (m *GroupMembershipMutation) Role() (r enums.Role, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the GroupMembership entity.
// If the GroupMembership object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMembershipMutation) OldRole(ctx context.Context) (v enums.Role, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *GroupMembershipMutation) ResetRole() {
	m.role = nil
}

// SetGroupID sets the "group" edge to the Group entity by id.
func (m *GroupMembershipMutation) SetGroupID(id guidgql.GUID) {
	m.group = &id
}

// ClearGroup clears the "group" edge to the Group entity.
func (m *GroupMembershipMutation) ClearGroup() {
	m.clearedgroup = true
}

// GroupCleared reports if the "group" edge to the Group entity was cleared.
func (m *GroupMembershipMutation) GroupCleared() bool {
	return m.clearedgroup
}

// GroupID returns the "group" edge ID in the mutation.
func (m *GroupMembershipMutation) GroupID() (id guidgql.GUID, exists bool) {
	if m.group != nil {
		return *m.group, true
	}
	return
}

// GroupIDs returns the "group" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GroupID instead. It exists only for internal usage by the builders.
func (m *GroupMembershipMutation) GroupIDs() (ids []guidgql.GUID) {
	if id := m.group; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGroup resets all changes to the "group" edge.
func (m *GroupMembershipMutation) ResetGroup() {
	m.group = nil
	m.clearedgroup = false
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *GroupMembershipMutation) SetUserID(id guidgql.GUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *GroupMembershipMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *GroupMembershipMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *GroupMembershipMutation) UserID() (id guidgql.GUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *GroupMembershipMutation) UserIDs() (ids []guidgql.GUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *GroupMembershipMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the GroupMembershipMutation builder.
func (m *GroupMembershipMutation) Where(ps ...predicate.GroupMembership) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GroupMembershipMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GroupMembershipMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.GroupMembership, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GroupMembershipMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GroupMembershipMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (GroupMembership).
func (m *GroupMembershipMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupMembershipMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.role != nil {
		fields = append(fields, groupmembership.FieldRole)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupMembershipMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case groupmembership.FieldRole:
		return m.Role()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupMembershipMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case groupmembership.FieldRole:
		return m.OldRole(ctx)
	}
	return nil, fmt.Errorf("unknown GroupMembership field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMembershipMutation) SetField(name string, value ent.Value) error {
	switch name {
	case groupmembership.FieldRole:
		v, ok := value.(enums.Role)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	}
	return fmt.Errorf("unknown GroupMembership field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupMembershipMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupMembershipMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMembershipMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown GroupMembership numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupMembershipMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupMembershipMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupMembershipMutation) ClearField(name string) error {
	return fmt.Errorf("unknown GroupMembership nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupMembershipMutation) ResetField(name string) error {
	switch name {
	case groupmembership.FieldRole:
		m.ResetRole()
		return nil
	}
	return fmt.Errorf("unknown GroupMembership field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupMembershipMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.group != nil {
		edges = append(edges, groupmembership.EdgeGroup)
	}
	if m.user != nil {
		edges = append(edges, groupmembership.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupMembershipMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case groupmembership.EdgeGroup:
		if id := m.group; id != nil {
			return []ent.Value{*id}
		}
	case groupmembership.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupMembershipMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupMembershipMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupMembershipMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedgroup {
		edges = append(edges, groupmembership.EdgeGroup)
	}
	if m.cleareduser {
		edges = append(edges, groupmembership.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupMembershipMutation) EdgeCleared(name string) bool {
	switch name {
	case groupmembership.EdgeGroup:
		return m.clearedgroup
	case groupmembership.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupMembershipMutation) ClearEdge(name string) error {
	switch name {
	case groupmembership.EdgeGroup:
		m.ClearGroup()
		return nil
	case groupmembership.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown GroupMembership unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupMembershipMutation) ResetEdge(name string) error {
	switch name {
	case groupmembership.EdgeGroup:
		m.ResetGroup()
		return nil
	case groupmembership.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown GroupMembership edge %s", name)
}

// GroupMembershipApplicationMutation represents an operation that mutates the GroupMembershipApplication nodes in the graph.
type GroupMembershipApplicationMutation struct {
	config
	op            Op
	typ           string
	id            *guidgql.GUID
	message       *string
	clearedFields map[string]struct{}
	user          *guidgql.GUID
	cleareduser   bool
	group         *guidgql.GUID
	clearedgroup  bool
	done          bool
	oldValue      func(context.Context) (*GroupMembershipApplication, error)
	predicates    []predicate.GroupMembershipApplication
}

var _ ent.Mutation = (*GroupMembershipApplicationMutation)(nil)

// groupmembershipapplicationOption allows management of the mutation configuration using functional options.
type groupmembershipapplicationOption func(*GroupMembershipApplicationMutation)

// newGroupMembershipApplicationMutation creates new mutation for the GroupMembershipApplication entity.
func newGroupMembershipApplicationMutation(c config, op Op, opts ...groupmembershipapplicationOption) *GroupMembershipApplicationMutation {
	m := &GroupMembershipApplicationMutation{
		config:        c,
		op:            op,
		typ:           TypeGroupMembershipApplication,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupMembershipApplicationID sets the ID field of the mutation.
func withGroupMembershipApplicationID(id guidgql.GUID) groupmembershipapplicationOption {
	return func(m *GroupMembershipApplicationMutation) {
		var (
			err   error
			once  sync.Once
			value *GroupMembershipApplication
		)
		m.oldValue = func(ctx context.Context) (*GroupMembershipApplication, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GroupMembershipApplication.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroupMembershipApplication sets the old GroupMembershipApplication of the mutation.
func withGroupMembershipApplication(node *GroupMembershipApplication) groupmembershipapplicationOption {
	return func(m *GroupMembershipApplicationMutation) {
		m.oldValue = func(context.Context) (*GroupMembershipApplication, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupMembershipApplicationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupMembershipApplicationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GroupMembershipApplication entities.
func (m *GroupMembershipApplicationMutation) SetID(id guidgql.GUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupMembershipApplicationMutation) ID() (id guidgql.GUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GroupMembershipApplicationMutation) IDs(ctx context.Context) ([]guidgql.GUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []guidgql.GUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GroupMembershipApplication.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMessage sets the "message" field.
func (m *GroupMembershipApplicationMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *GroupMembershipApplicationMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the GroupMembershipApplication entity.
// If the GroupMembershipApplication object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMembershipApplicationMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ResetMessage resets all changes to the "message" field.
func (m *GroupMembershipApplicationMutation) ResetMessage() {
	m.message = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *GroupMembershipApplicationMutation) SetUserID(id guidgql.GUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *GroupMembershipApplicationMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *GroupMembershipApplicationMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *GroupMembershipApplicationMutation) UserID() (id guidgql.GUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *GroupMembershipApplicationMutation) UserIDs() (ids []guidgql.GUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *GroupMembershipApplicationMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetGroupID sets the "group" edge to the Group entity by id.
func (m *GroupMembershipApplicationMutation) SetGroupID(id guidgql.GUID) {
	m.group = &id
}

// ClearGroup clears the "group" edge to the Group entity.
func (m *GroupMembershipApplicationMutation) ClearGroup() {
	m.clearedgroup = true
}

// GroupCleared reports if the "group" edge to the Group entity was cleared.
func (m *GroupMembershipApplicationMutation) GroupCleared() bool {
	return m.clearedgroup
}

// GroupID returns the "group" edge ID in the mutation.
func (m *GroupMembershipApplicationMutation) GroupID() (id guidgql.GUID, exists bool) {
	if m.group != nil {
		return *m.group, true
	}
	return
}

// GroupIDs returns the "group" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GroupID instead. It exists only for internal usage by the builders.
func (m *GroupMembershipApplicationMutation) GroupIDs() (ids []guidgql.GUID) {
	if id := m.group; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGroup resets all changes to the "group" edge.
func (m *GroupMembershipApplicationMutation) ResetGroup() {
	m.group = nil
	m.clearedgroup = false
}

// Where appends a list predicates to the GroupMembershipApplicationMutation builder.
func (m *GroupMembershipApplicationMutation) Where(ps ...predicate.GroupMembershipApplication) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GroupMembershipApplicationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GroupMembershipApplicationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.GroupMembershipApplication, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GroupMembershipApplicationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GroupMembershipApplicationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (GroupMembershipApplication).
func (m *GroupMembershipApplicationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupMembershipApplicationMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.message != nil {
		fields = append(fields, groupmembershipapplication.FieldMessage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupMembershipApplicationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case groupmembershipapplication.FieldMessage:
		return m.Message()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupMembershipApplicationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case groupmembershipapplication.FieldMessage:
		return m.OldMessage(ctx)
	}
	return nil, fmt.Errorf("unknown GroupMembershipApplication field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMembershipApplicationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case groupmembershipapplication.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	}
	return fmt.Errorf("unknown GroupMembershipApplication field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupMembershipApplicationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupMembershipApplicationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMembershipApplicationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown GroupMembershipApplication numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupMembershipApplicationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupMembershipApplicationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupMembershipApplicationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown GroupMembershipApplication nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupMembershipApplicationMutation) ResetField(name string) error {
	switch name {
	case groupmembershipapplication.FieldMessage:
		m.ResetMessage()
		return nil
	}
	return fmt.Errorf("unknown GroupMembershipApplication field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupMembershipApplicationMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, groupmembershipapplication.EdgeUser)
	}
	if m.group != nil {
		edges = append(edges, groupmembershipapplication.EdgeGroup)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupMembershipApplicationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case groupmembershipapplication.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case groupmembershipapplication.EdgeGroup:
		if id := m.group; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupMembershipApplicationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupMembershipApplicationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupMembershipApplicationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, groupmembershipapplication.EdgeUser)
	}
	if m.clearedgroup {
		edges = append(edges, groupmembershipapplication.EdgeGroup)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupMembershipApplicationMutation) EdgeCleared(name string) bool {
	switch name {
	case groupmembershipapplication.EdgeUser:
		return m.cleareduser
	case groupmembershipapplication.EdgeGroup:
		return m.clearedgroup
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupMembershipApplicationMutation) ClearEdge(name string) error {
	switch name {
	case groupmembershipapplication.EdgeUser:
		m.ClearUser()
		return nil
	case groupmembershipapplication.EdgeGroup:
		m.ClearGroup()
		return nil
	}
	return fmt.Errorf("unknown GroupMembershipApplication unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupMembershipApplicationMutation) ResetEdge(name string) error {
	switch name {
	case groupmembershipapplication.EdgeUser:
		m.ResetUser()
		return nil
	case groupmembershipapplication.EdgeGroup:
		m.ResetGroup()
		return nil
	}
	return fmt.Errorf("unknown GroupMembershipApplication edge %s", name)
}

// GroupSettingsMutation represents an operation that mutates the GroupSettings nodes in the graph.
type GroupSettingsMutation struct {
	config
	op                     Op
	typ                    string
	id                     *guidgql.GUID
	visibility             *groupsettings.Visibility
	join_policy            *groupsettings.JoinPolicy
	minimum_role_to_invite *enums.Role
	clearedFields          map[string]struct{}
	group                  *guidgql.GUID
	clearedgroup           bool
	done                   bool
	oldValue               func(context.Context) (*GroupSettings, error)
	predicates             []predicate.GroupSettings
}

var _ ent.Mutation = (*GroupSettingsMutation)(nil)

// groupsettingsOption allows management of the mutation configuration using functional options.
type groupsettingsOption func(*GroupSettingsMutation)

// newGroupSettingsMutation creates new mutation for the GroupSettings entity.
func newGroupSettingsMutation(c config, op Op, opts ...groupsettingsOption) *GroupSettingsMutation {
	m := &GroupSettingsMutation{
		config:        c,
		op:            op,
		typ:           TypeGroupSettings,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupSettingsID sets the ID field of the mutation.
func withGroupSettingsID(id guidgql.GUID) groupsettingsOption {
	return func(m *GroupSettingsMutation) {
		var (
			err   error
			once  sync.Once
			value *GroupSettings
		)
		m.oldValue = func(ctx context.Context) (*GroupSettings, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GroupSettings.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroupSettings sets the old GroupSettings of the mutation.
func withGroupSettings(node *GroupSettings) groupsettingsOption {
	return func(m *GroupSettingsMutation) {
		m.oldValue = func(context.Context) (*GroupSettings, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupSettingsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupSettingsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GroupSettings entities.
func (m *GroupSettingsMutation) SetID(id guidgql.GUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupSettingsMutation) ID() (id guidgql.GUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GroupSettingsMutation) IDs(ctx context.Context) ([]guidgql.GUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []guidgql.GUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GroupSettings.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetVisibility sets the "visibility" field.
func (m *GroupSettingsMutation) SetVisibility(gr groupsettings.Visibility) {
	m.visibility = &gr
}

// Visibility returns the value of the "visibility" field in the mutation.
func (m *GroupSettingsMutation) Visibility() (r groupsettings.Visibility, exists bool) {
	v := m.visibility
	if v == nil {
		return
	}
	return *v, true
}

// OldVisibility returns the old "visibility" field's value of the GroupSettings entity.
// If the GroupSettings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupSettingsMutation) OldVisibility(ctx context.Context) (v groupsettings.Visibility, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVisibility is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVisibility requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVisibility: %w", err)
	}
	return oldValue.Visibility, nil
}

// ResetVisibility resets all changes to the "visibility" field.
func (m *GroupSettingsMutation) ResetVisibility() {
	m.visibility = nil
}

// SetJoinPolicy sets the "join_policy" field.
func (m *GroupSettingsMutation) SetJoinPolicy(gp groupsettings.JoinPolicy) {
	m.join_policy = &gp
}

// JoinPolicy returns the value of the "join_policy" field in the mutation.
func (m *GroupSettingsMutation) JoinPolicy() (r groupsettings.JoinPolicy, exists bool) {
	v := m.join_policy
	if v == nil {
		return
	}
	return *v, true
}

// OldJoinPolicy returns the old "join_policy" field's value of the GroupSettings entity.
// If the GroupSettings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupSettingsMutation) OldJoinPolicy(ctx context.Context) (v groupsettings.JoinPolicy, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJoinPolicy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJoinPolicy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJoinPolicy: %w", err)
	}
	return oldValue.JoinPolicy, nil
}

// ResetJoinPolicy resets all changes to the "join_policy" field.
func (m *GroupSettingsMutation) ResetJoinPolicy() {
	m.join_policy = nil
}

// SetMinimumRoleToInvite sets the "minimum_role_to_invite" field.
func (m *GroupSettingsMutation) SetMinimumRoleToInvite(e enums.Role) {
	m.minimum_role_to_invite = &e
}

// MinimumRoleToInvite returns the value of the "minimum_role_to_invite" field in the mutation.
func (m *GroupSettingsMutation) MinimumRoleToInvite() (r enums.Role, exists bool) {
	v := m.minimum_role_to_invite
	if v == nil {
		return
	}
	return *v, true
}

// OldMinimumRoleToInvite returns the old "minimum_role_to_invite" field's value of the GroupSettings entity.
// If the GroupSettings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupSettingsMutation) OldMinimumRoleToInvite(ctx context.Context) (v *enums.Role, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMinimumRoleToInvite is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMinimumRoleToInvite requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMinimumRoleToInvite: %w", err)
	}
	return oldValue.MinimumRoleToInvite, nil
}

// ClearMinimumRoleToInvite clears the value of the "minimum_role_to_invite" field.
func (m *GroupSettingsMutation) ClearMinimumRoleToInvite() {
	m.minimum_role_to_invite = nil
	m.clearedFields[groupsettings.FieldMinimumRoleToInvite] = struct{}{}
}

// MinimumRoleToInviteCleared returns if the "minimum_role_to_invite" field was cleared in this mutation.
func (m *GroupSettingsMutation) MinimumRoleToInviteCleared() bool {
	_, ok := m.clearedFields[groupsettings.FieldMinimumRoleToInvite]
	return ok
}

// ResetMinimumRoleToInvite resets all changes to the "minimum_role_to_invite" field.
func (m *GroupSettingsMutation) ResetMinimumRoleToInvite() {
	m.minimum_role_to_invite = nil
	delete(m.clearedFields, groupsettings.FieldMinimumRoleToInvite)
}

// SetGroupID sets the "group" edge to the Group entity by id.
func (m *GroupSettingsMutation) SetGroupID(id guidgql.GUID) {
	m.group = &id
}

// ClearGroup clears the "group" edge to the Group entity.
func (m *GroupSettingsMutation) ClearGroup() {
	m.clearedgroup = true
}

// GroupCleared reports if the "group" edge to the Group entity was cleared.
func (m *GroupSettingsMutation) GroupCleared() bool {
	return m.clearedgroup
}

// GroupID returns the "group" edge ID in the mutation.
func (m *GroupSettingsMutation) GroupID() (id guidgql.GUID, exists bool) {
	if m.group != nil {
		return *m.group, true
	}
	return
}

// GroupIDs returns the "group" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GroupID instead. It exists only for internal usage by the builders.
func (m *GroupSettingsMutation) GroupIDs() (ids []guidgql.GUID) {
	if id := m.group; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGroup resets all changes to the "group" edge.
func (m *GroupSettingsMutation) ResetGroup() {
	m.group = nil
	m.clearedgroup = false
}

// Where appends a list predicates to the GroupSettingsMutation builder.
func (m *GroupSettingsMutation) Where(ps ...predicate.GroupSettings) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GroupSettingsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GroupSettingsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.GroupSettings, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GroupSettingsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GroupSettingsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (GroupSettings).
func (m *GroupSettingsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupSettingsMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.visibility != nil {
		fields = append(fields, groupsettings.FieldVisibility)
	}
	if m.join_policy != nil {
		fields = append(fields, groupsettings.FieldJoinPolicy)
	}
	if m.minimum_role_to_invite != nil {
		fields = append(fields, groupsettings.FieldMinimumRoleToInvite)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupSettingsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case groupsettings.FieldVisibility:
		return m.Visibility()
	case groupsettings.FieldJoinPolicy:
		return m.JoinPolicy()
	case groupsettings.FieldMinimumRoleToInvite:
		return m.MinimumRoleToInvite()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupSettingsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case groupsettings.FieldVisibility:
		return m.OldVisibility(ctx)
	case groupsettings.FieldJoinPolicy:
		return m.OldJoinPolicy(ctx)
	case groupsettings.FieldMinimumRoleToInvite:
		return m.OldMinimumRoleToInvite(ctx)
	}
	return nil, fmt.Errorf("unknown GroupSettings field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupSettingsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case groupsettings.FieldVisibility:
		v, ok := value.(groupsettings.Visibility)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVisibility(v)
		return nil
	case groupsettings.FieldJoinPolicy:
		v, ok := value.(groupsettings.JoinPolicy)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJoinPolicy(v)
		return nil
	case groupsettings.FieldMinimumRoleToInvite:
		v, ok := value.(enums.Role)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMinimumRoleToInvite(v)
		return nil
	}
	return fmt.Errorf("unknown GroupSettings field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupSettingsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupSettingsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupSettingsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown GroupSettings numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupSettingsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(groupsettings.FieldMinimumRoleToInvite) {
		fields = append(fields, groupsettings.FieldMinimumRoleToInvite)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupSettingsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupSettingsMutation) ClearField(name string) error {
	switch name {
	case groupsettings.FieldMinimumRoleToInvite:
		m.ClearMinimumRoleToInvite()
		return nil
	}
	return fmt.Errorf("unknown GroupSettings nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupSettingsMutation) ResetField(name string) error {
	switch name {
	case groupsettings.FieldVisibility:
		m.ResetVisibility()
		return nil
	case groupsettings.FieldJoinPolicy:
		m.ResetJoinPolicy()
		return nil
	case groupsettings.FieldMinimumRoleToInvite:
		m.ResetMinimumRoleToInvite()
		return nil
	}
	return fmt.Errorf("unknown GroupSettings field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupSettingsMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.group != nil {
		edges = append(edges, groupsettings.EdgeGroup)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupSettingsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case groupsettings.EdgeGroup:
		if id := m.group; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupSettingsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupSettingsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupSettingsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedgroup {
		edges = append(edges, groupsettings.EdgeGroup)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupSettingsMutation) EdgeCleared(name string) bool {
	switch name {
	case groupsettings.EdgeGroup:
		return m.clearedgroup
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupSettingsMutation) ClearEdge(name string) error {
	switch name {
	case groupsettings.EdgeGroup:
		m.ClearGroup()
		return nil
	}
	return fmt.Errorf("unknown GroupSettings unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupSettingsMutation) ResetEdge(name string) error {
	switch name {
	case groupsettings.EdgeGroup:
		m.ResetGroup()
		return nil
	}
	return fmt.Errorf("unknown GroupSettings edge %s", name)
}

// MatchMutation represents an operation that mutates the Match nodes in the graph.
type MatchMutation struct {
	config
	op                  Op
	typ                 string
	id                  *guidgql.GUID
	created_at          *time.Time
	clearedFields       map[string]struct{}
	game_version        *guidgql.GUID
	clearedgame_version bool
	players             map[guidgql.GUID]struct{}
	removedplayers      map[guidgql.GUID]struct{}
	clearedplayers      bool
	stats               map[guidgql.GUID]struct{}
	removedstats        map[guidgql.GUID]struct{}
	clearedstats        bool
	done                bool
	oldValue            func(context.Context) (*Match, error)
	predicates          []predicate.Match
}

var _ ent.Mutation = (*MatchMutation)(nil)

// matchOption allows management of the mutation configuration using functional options.
type matchOption func(*MatchMutation)

// newMatchMutation creates new mutation for the Match entity.
func newMatchMutation(c config, op Op, opts ...matchOption) *MatchMutation {
	m := &MatchMutation{
		config:        c,
		op:            op,
		typ:           TypeMatch,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMatchID sets the ID field of the mutation.
func withMatchID(id guidgql.GUID) matchOption {
	return func(m *MatchMutation) {
		var (
			err   error
			once  sync.Once
			value *Match
		)
		m.oldValue = func(ctx context.Context) (*Match, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Match.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMatch sets the old Match of the mutation.
func withMatch(node *Match) matchOption {
	return func(m *MatchMutation) {
		m.oldValue = func(context.Context) (*Match, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MatchMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MatchMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Match entities.
func (m *MatchMutation) SetID(id guidgql.GUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MatchMutation) ID() (id guidgql.GUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MatchMutation) IDs(ctx context.Context) ([]guidgql.GUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []guidgql.GUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Match.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *MatchMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MatchMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Match entity.
// If the Match object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MatchMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MatchMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetGameVersionID sets the "game_version" edge to the GameVersion entity by id.
func (m *MatchMutation) SetGameVersionID(id guidgql.GUID) {
	m.game_version = &id
}

// ClearGameVersion clears the "game_version" edge to the GameVersion entity.
func (m *MatchMutation) ClearGameVersion() {
	m.clearedgame_version = true
}

// GameVersionCleared reports if the "game_version" edge to the GameVersion entity was cleared.
func (m *MatchMutation) GameVersionCleared() bool {
	return m.clearedgame_version
}

// GameVersionID returns the "game_version" edge ID in the mutation.
func (m *MatchMutation) GameVersionID() (id guidgql.GUID, exists bool) {
	if m.game_version != nil {
		return *m.game_version, true
	}
	return
}

// GameVersionIDs returns the "game_version" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GameVersionID instead. It exists only for internal usage by the builders.
func (m *MatchMutation) GameVersionIDs() (ids []guidgql.GUID) {
	if id := m.game_version; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGameVersion resets all changes to the "game_version" edge.
func (m *MatchMutation) ResetGameVersion() {
	m.game_version = nil
	m.clearedgame_version = false
}

// AddPlayerIDs adds the "players" edge to the Player entity by ids.
func (m *MatchMutation) AddPlayerIDs(ids ...guidgql.GUID) {
	if m.players == nil {
		m.players = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		m.players[ids[i]] = struct{}{}
	}
}

// ClearPlayers clears the "players" edge to the Player entity.
func (m *MatchMutation) ClearPlayers() {
	m.clearedplayers = true
}

// PlayersCleared reports if the "players" edge to the Player entity was cleared.
func (m *MatchMutation) PlayersCleared() bool {
	return m.clearedplayers
}

// RemovePlayerIDs removes the "players" edge to the Player entity by IDs.
func (m *MatchMutation) RemovePlayerIDs(ids ...guidgql.GUID) {
	if m.removedplayers == nil {
		m.removedplayers = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		delete(m.players, ids[i])
		m.removedplayers[ids[i]] = struct{}{}
	}
}

// RemovedPlayers returns the removed IDs of the "players" edge to the Player entity.
func (m *MatchMutation) RemovedPlayersIDs() (ids []guidgql.GUID) {
	for id := range m.removedplayers {
		ids = append(ids, id)
	}
	return
}

// PlayersIDs returns the "players" edge IDs in the mutation.
func (m *MatchMutation) PlayersIDs() (ids []guidgql.GUID) {
	for id := range m.players {
		ids = append(ids, id)
	}
	return
}

// ResetPlayers resets all changes to the "players" edge.
func (m *MatchMutation) ResetPlayers() {
	m.players = nil
	m.clearedplayers = false
	m.removedplayers = nil
}

// AddStatIDs adds the "stats" edge to the Statistic entity by ids.
func (m *MatchMutation) AddStatIDs(ids ...guidgql.GUID) {
	if m.stats == nil {
		m.stats = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		m.stats[ids[i]] = struct{}{}
	}
}

// ClearStats clears the "stats" edge to the Statistic entity.
func (m *MatchMutation) ClearStats() {
	m.clearedstats = true
}

// StatsCleared reports if the "stats" edge to the Statistic entity was cleared.
func (m *MatchMutation) StatsCleared() bool {
	return m.clearedstats
}

// RemoveStatIDs removes the "stats" edge to the Statistic entity by IDs.
func (m *MatchMutation) RemoveStatIDs(ids ...guidgql.GUID) {
	if m.removedstats == nil {
		m.removedstats = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		delete(m.stats, ids[i])
		m.removedstats[ids[i]] = struct{}{}
	}
}

// RemovedStats returns the removed IDs of the "stats" edge to the Statistic entity.
func (m *MatchMutation) RemovedStatsIDs() (ids []guidgql.GUID) {
	for id := range m.removedstats {
		ids = append(ids, id)
	}
	return
}

// StatsIDs returns the "stats" edge IDs in the mutation.
func (m *MatchMutation) StatsIDs() (ids []guidgql.GUID) {
	for id := range m.stats {
		ids = append(ids, id)
	}
	return
}

// ResetStats resets all changes to the "stats" edge.
func (m *MatchMutation) ResetStats() {
	m.stats = nil
	m.clearedstats = false
	m.removedstats = nil
}

// Where appends a list predicates to the MatchMutation builder.
func (m *MatchMutation) Where(ps ...predicate.Match) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MatchMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MatchMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Match, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MatchMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MatchMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Match).
func (m *MatchMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MatchMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.created_at != nil {
		fields = append(fields, match.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MatchMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case match.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MatchMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case match.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Match field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MatchMutation) SetField(name string, value ent.Value) error {
	switch name {
	case match.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Match field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MatchMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MatchMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MatchMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Match numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MatchMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MatchMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MatchMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Match nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MatchMutation) ResetField(name string) error {
	switch name {
	case match.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Match field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MatchMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.game_version != nil {
		edges = append(edges, match.EdgeGameVersion)
	}
	if m.players != nil {
		edges = append(edges, match.EdgePlayers)
	}
	if m.stats != nil {
		edges = append(edges, match.EdgeStats)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MatchMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case match.EdgeGameVersion:
		if id := m.game_version; id != nil {
			return []ent.Value{*id}
		}
	case match.EdgePlayers:
		ids := make([]ent.Value, 0, len(m.players))
		for id := range m.players {
			ids = append(ids, id)
		}
		return ids
	case match.EdgeStats:
		ids := make([]ent.Value, 0, len(m.stats))
		for id := range m.stats {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MatchMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedplayers != nil {
		edges = append(edges, match.EdgePlayers)
	}
	if m.removedstats != nil {
		edges = append(edges, match.EdgeStats)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MatchMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case match.EdgePlayers:
		ids := make([]ent.Value, 0, len(m.removedplayers))
		for id := range m.removedplayers {
			ids = append(ids, id)
		}
		return ids
	case match.EdgeStats:
		ids := make([]ent.Value, 0, len(m.removedstats))
		for id := range m.removedstats {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MatchMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedgame_version {
		edges = append(edges, match.EdgeGameVersion)
	}
	if m.clearedplayers {
		edges = append(edges, match.EdgePlayers)
	}
	if m.clearedstats {
		edges = append(edges, match.EdgeStats)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MatchMutation) EdgeCleared(name string) bool {
	switch name {
	case match.EdgeGameVersion:
		return m.clearedgame_version
	case match.EdgePlayers:
		return m.clearedplayers
	case match.EdgeStats:
		return m.clearedstats
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MatchMutation) ClearEdge(name string) error {
	switch name {
	case match.EdgeGameVersion:
		m.ClearGameVersion()
		return nil
	}
	return fmt.Errorf("unknown Match unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MatchMutation) ResetEdge(name string) error {
	switch name {
	case match.EdgeGameVersion:
		m.ResetGameVersion()
		return nil
	case match.EdgePlayers:
		m.ResetPlayers()
		return nil
	case match.EdgeStats:
		m.ResetStats()
		return nil
	}
	return fmt.Errorf("unknown Match edge %s", name)
}

// PlayerMutation represents an operation that mutates the Player nodes in the graph.
type PlayerMutation struct {
	config
	op                          Op
	typ                         string
	id                          *guidgql.GUID
	name                        *string
	clearedFields               map[string]struct{}
	owner                       *guidgql.GUID
	clearedowner                bool
	supervisors                 map[guidgql.GUID]struct{}
	removedsupervisors          map[guidgql.GUID]struct{}
	clearedsupervisors          bool
	supervision_requests        map[guidgql.GUID]struct{}
	removedsupervision_requests map[guidgql.GUID]struct{}
	clearedsupervision_requests bool
	matches                     map[guidgql.GUID]struct{}
	removedmatches              map[guidgql.GUID]struct{}
	clearedmatches              bool
	stats                       map[guidgql.GUID]struct{}
	removedstats                map[guidgql.GUID]struct{}
	clearedstats                bool
	done                        bool
	oldValue                    func(context.Context) (*Player, error)
	predicates                  []predicate.Player
}

var _ ent.Mutation = (*PlayerMutation)(nil)

// playerOption allows management of the mutation configuration using functional options.
type playerOption func(*PlayerMutation)

// newPlayerMutation creates new mutation for the Player entity.
func newPlayerMutation(c config, op Op, opts ...playerOption) *PlayerMutation {
	m := &PlayerMutation{
		config:        c,
		op:            op,
		typ:           TypePlayer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPlayerID sets the ID field of the mutation.
func withPlayerID(id guidgql.GUID) playerOption {
	return func(m *PlayerMutation) {
		var (
			err   error
			once  sync.Once
			value *Player
		)
		m.oldValue = func(ctx context.Context) (*Player, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Player.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPlayer sets the old Player of the mutation.
func withPlayer(node *Player) playerOption {
	return func(m *PlayerMutation) {
		m.oldValue = func(context.Context) (*Player, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PlayerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PlayerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Player entities.
func (m *PlayerMutation) SetID(id guidgql.GUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PlayerMutation) ID() (id guidgql.GUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PlayerMutation) IDs(ctx context.Context) ([]guidgql.GUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []guidgql.GUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Player.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *PlayerMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PlayerMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Player entity.
// If the Player object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlayerMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PlayerMutation) ResetName() {
	m.name = nil
}

// SetOwnerID sets the "owner" edge to the User entity by id.
func (m *PlayerMutation) SetOwnerID(id guidgql.GUID) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *PlayerMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *PlayerMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *PlayerMutation) OwnerID() (id guidgql.GUID, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *PlayerMutation) OwnerIDs() (ids []guidgql.GUID) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *PlayerMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// AddSupervisorIDs adds the "supervisors" edge to the User entity by ids.
func (m *PlayerMutation) AddSupervisorIDs(ids ...guidgql.GUID) {
	if m.supervisors == nil {
		m.supervisors = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		m.supervisors[ids[i]] = struct{}{}
	}
}

// ClearSupervisors clears the "supervisors" edge to the User entity.
func (m *PlayerMutation) ClearSupervisors() {
	m.clearedsupervisors = true
}

// SupervisorsCleared reports if the "supervisors" edge to the User entity was cleared.
func (m *PlayerMutation) SupervisorsCleared() bool {
	return m.clearedsupervisors
}

// RemoveSupervisorIDs removes the "supervisors" edge to the User entity by IDs.
func (m *PlayerMutation) RemoveSupervisorIDs(ids ...guidgql.GUID) {
	if m.removedsupervisors == nil {
		m.removedsupervisors = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		delete(m.supervisors, ids[i])
		m.removedsupervisors[ids[i]] = struct{}{}
	}
}

// RemovedSupervisors returns the removed IDs of the "supervisors" edge to the User entity.
func (m *PlayerMutation) RemovedSupervisorsIDs() (ids []guidgql.GUID) {
	for id := range m.removedsupervisors {
		ids = append(ids, id)
	}
	return
}

// SupervisorsIDs returns the "supervisors" edge IDs in the mutation.
func (m *PlayerMutation) SupervisorsIDs() (ids []guidgql.GUID) {
	for id := range m.supervisors {
		ids = append(ids, id)
	}
	return
}

// ResetSupervisors resets all changes to the "supervisors" edge.
func (m *PlayerMutation) ResetSupervisors() {
	m.supervisors = nil
	m.clearedsupervisors = false
	m.removedsupervisors = nil
}

// AddSupervisionRequestIDs adds the "supervision_requests" edge to the PlayerSupervisionRequest entity by ids.
func (m *PlayerMutation) AddSupervisionRequestIDs(ids ...guidgql.GUID) {
	if m.supervision_requests == nil {
		m.supervision_requests = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		m.supervision_requests[ids[i]] = struct{}{}
	}
}

// ClearSupervisionRequests clears the "supervision_requests" edge to the PlayerSupervisionRequest entity.
func (m *PlayerMutation) ClearSupervisionRequests() {
	m.clearedsupervision_requests = true
}

// SupervisionRequestsCleared reports if the "supervision_requests" edge to the PlayerSupervisionRequest entity was cleared.
func (m *PlayerMutation) SupervisionRequestsCleared() bool {
	return m.clearedsupervision_requests
}

// RemoveSupervisionRequestIDs removes the "supervision_requests" edge to the PlayerSupervisionRequest entity by IDs.
func (m *PlayerMutation) RemoveSupervisionRequestIDs(ids ...guidgql.GUID) {
	if m.removedsupervision_requests == nil {
		m.removedsupervision_requests = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		delete(m.supervision_requests, ids[i])
		m.removedsupervision_requests[ids[i]] = struct{}{}
	}
}

// RemovedSupervisionRequests returns the removed IDs of the "supervision_requests" edge to the PlayerSupervisionRequest entity.
func (m *PlayerMutation) RemovedSupervisionRequestsIDs() (ids []guidgql.GUID) {
	for id := range m.removedsupervision_requests {
		ids = append(ids, id)
	}
	return
}

// SupervisionRequestsIDs returns the "supervision_requests" edge IDs in the mutation.
func (m *PlayerMutation) SupervisionRequestsIDs() (ids []guidgql.GUID) {
	for id := range m.supervision_requests {
		ids = append(ids, id)
	}
	return
}

// ResetSupervisionRequests resets all changes to the "supervision_requests" edge.
func (m *PlayerMutation) ResetSupervisionRequests() {
	m.supervision_requests = nil
	m.clearedsupervision_requests = false
	m.removedsupervision_requests = nil
}

// AddMatchIDs adds the "matches" edge to the Match entity by ids.
func (m *PlayerMutation) AddMatchIDs(ids ...guidgql.GUID) {
	if m.matches == nil {
		m.matches = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		m.matches[ids[i]] = struct{}{}
	}
}

// ClearMatches clears the "matches" edge to the Match entity.
func (m *PlayerMutation) ClearMatches() {
	m.clearedmatches = true
}

// MatchesCleared reports if the "matches" edge to the Match entity was cleared.
func (m *PlayerMutation) MatchesCleared() bool {
	return m.clearedmatches
}

// RemoveMatchIDs removes the "matches" edge to the Match entity by IDs.
func (m *PlayerMutation) RemoveMatchIDs(ids ...guidgql.GUID) {
	if m.removedmatches == nil {
		m.removedmatches = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		delete(m.matches, ids[i])
		m.removedmatches[ids[i]] = struct{}{}
	}
}

// RemovedMatches returns the removed IDs of the "matches" edge to the Match entity.
func (m *PlayerMutation) RemovedMatchesIDs() (ids []guidgql.GUID) {
	for id := range m.removedmatches {
		ids = append(ids, id)
	}
	return
}

// MatchesIDs returns the "matches" edge IDs in the mutation.
func (m *PlayerMutation) MatchesIDs() (ids []guidgql.GUID) {
	for id := range m.matches {
		ids = append(ids, id)
	}
	return
}

// ResetMatches resets all changes to the "matches" edge.
func (m *PlayerMutation) ResetMatches() {
	m.matches = nil
	m.clearedmatches = false
	m.removedmatches = nil
}

// AddStatIDs adds the "stats" edge to the Statistic entity by ids.
func (m *PlayerMutation) AddStatIDs(ids ...guidgql.GUID) {
	if m.stats == nil {
		m.stats = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		m.stats[ids[i]] = struct{}{}
	}
}

// ClearStats clears the "stats" edge to the Statistic entity.
func (m *PlayerMutation) ClearStats() {
	m.clearedstats = true
}

// StatsCleared reports if the "stats" edge to the Statistic entity was cleared.
func (m *PlayerMutation) StatsCleared() bool {
	return m.clearedstats
}

// RemoveStatIDs removes the "stats" edge to the Statistic entity by IDs.
func (m *PlayerMutation) RemoveStatIDs(ids ...guidgql.GUID) {
	if m.removedstats == nil {
		m.removedstats = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		delete(m.stats, ids[i])
		m.removedstats[ids[i]] = struct{}{}
	}
}

// RemovedStats returns the removed IDs of the "stats" edge to the Statistic entity.
func (m *PlayerMutation) RemovedStatsIDs() (ids []guidgql.GUID) {
	for id := range m.removedstats {
		ids = append(ids, id)
	}
	return
}

// StatsIDs returns the "stats" edge IDs in the mutation.
func (m *PlayerMutation) StatsIDs() (ids []guidgql.GUID) {
	for id := range m.stats {
		ids = append(ids, id)
	}
	return
}

// ResetStats resets all changes to the "stats" edge.
func (m *PlayerMutation) ResetStats() {
	m.stats = nil
	m.clearedstats = false
	m.removedstats = nil
}

// Where appends a list predicates to the PlayerMutation builder.
func (m *PlayerMutation) Where(ps ...predicate.Player) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PlayerMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PlayerMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Player, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PlayerMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PlayerMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Player).
func (m *PlayerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PlayerMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, player.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PlayerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case player.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PlayerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case player.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Player field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlayerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case player.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Player field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PlayerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PlayerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlayerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Player numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PlayerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PlayerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PlayerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Player nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PlayerMutation) ResetField(name string) error {
	switch name {
	case player.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Player field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PlayerMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.owner != nil {
		edges = append(edges, player.EdgeOwner)
	}
	if m.supervisors != nil {
		edges = append(edges, player.EdgeSupervisors)
	}
	if m.supervision_requests != nil {
		edges = append(edges, player.EdgeSupervisionRequests)
	}
	if m.matches != nil {
		edges = append(edges, player.EdgeMatches)
	}
	if m.stats != nil {
		edges = append(edges, player.EdgeStats)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PlayerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case player.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	case player.EdgeSupervisors:
		ids := make([]ent.Value, 0, len(m.supervisors))
		for id := range m.supervisors {
			ids = append(ids, id)
		}
		return ids
	case player.EdgeSupervisionRequests:
		ids := make([]ent.Value, 0, len(m.supervision_requests))
		for id := range m.supervision_requests {
			ids = append(ids, id)
		}
		return ids
	case player.EdgeMatches:
		ids := make([]ent.Value, 0, len(m.matches))
		for id := range m.matches {
			ids = append(ids, id)
		}
		return ids
	case player.EdgeStats:
		ids := make([]ent.Value, 0, len(m.stats))
		for id := range m.stats {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PlayerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removedsupervisors != nil {
		edges = append(edges, player.EdgeSupervisors)
	}
	if m.removedsupervision_requests != nil {
		edges = append(edges, player.EdgeSupervisionRequests)
	}
	if m.removedmatches != nil {
		edges = append(edges, player.EdgeMatches)
	}
	if m.removedstats != nil {
		edges = append(edges, player.EdgeStats)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PlayerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case player.EdgeSupervisors:
		ids := make([]ent.Value, 0, len(m.removedsupervisors))
		for id := range m.removedsupervisors {
			ids = append(ids, id)
		}
		return ids
	case player.EdgeSupervisionRequests:
		ids := make([]ent.Value, 0, len(m.removedsupervision_requests))
		for id := range m.removedsupervision_requests {
			ids = append(ids, id)
		}
		return ids
	case player.EdgeMatches:
		ids := make([]ent.Value, 0, len(m.removedmatches))
		for id := range m.removedmatches {
			ids = append(ids, id)
		}
		return ids
	case player.EdgeStats:
		ids := make([]ent.Value, 0, len(m.removedstats))
		for id := range m.removedstats {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PlayerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearedowner {
		edges = append(edges, player.EdgeOwner)
	}
	if m.clearedsupervisors {
		edges = append(edges, player.EdgeSupervisors)
	}
	if m.clearedsupervision_requests {
		edges = append(edges, player.EdgeSupervisionRequests)
	}
	if m.clearedmatches {
		edges = append(edges, player.EdgeMatches)
	}
	if m.clearedstats {
		edges = append(edges, player.EdgeStats)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PlayerMutation) EdgeCleared(name string) bool {
	switch name {
	case player.EdgeOwner:
		return m.clearedowner
	case player.EdgeSupervisors:
		return m.clearedsupervisors
	case player.EdgeSupervisionRequests:
		return m.clearedsupervision_requests
	case player.EdgeMatches:
		return m.clearedmatches
	case player.EdgeStats:
		return m.clearedstats
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PlayerMutation) ClearEdge(name string) error {
	switch name {
	case player.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown Player unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PlayerMutation) ResetEdge(name string) error {
	switch name {
	case player.EdgeOwner:
		m.ResetOwner()
		return nil
	case player.EdgeSupervisors:
		m.ResetSupervisors()
		return nil
	case player.EdgeSupervisionRequests:
		m.ResetSupervisionRequests()
		return nil
	case player.EdgeMatches:
		m.ResetMatches()
		return nil
	case player.EdgeStats:
		m.ResetStats()
		return nil
	}
	return fmt.Errorf("unknown Player edge %s", name)
}

// PlayerSupervisionRequestMutation represents an operation that mutates the PlayerSupervisionRequest nodes in the graph.
type PlayerSupervisionRequestMutation struct {
	config
	op               Op
	typ              string
	id               *guidgql.GUID
	message          *string
	clearedFields    map[string]struct{}
	sender           *guidgql.GUID
	clearedsender    bool
	player           *guidgql.GUID
	clearedplayer    bool
	approvals        map[guidgql.GUID]struct{}
	removedapprovals map[guidgql.GUID]struct{}
	clearedapprovals bool
	done             bool
	oldValue         func(context.Context) (*PlayerSupervisionRequest, error)
	predicates       []predicate.PlayerSupervisionRequest
}

var _ ent.Mutation = (*PlayerSupervisionRequestMutation)(nil)

// playersupervisionrequestOption allows management of the mutation configuration using functional options.
type playersupervisionrequestOption func(*PlayerSupervisionRequestMutation)

// newPlayerSupervisionRequestMutation creates new mutation for the PlayerSupervisionRequest entity.
func newPlayerSupervisionRequestMutation(c config, op Op, opts ...playersupervisionrequestOption) *PlayerSupervisionRequestMutation {
	m := &PlayerSupervisionRequestMutation{
		config:        c,
		op:            op,
		typ:           TypePlayerSupervisionRequest,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPlayerSupervisionRequestID sets the ID field of the mutation.
func withPlayerSupervisionRequestID(id guidgql.GUID) playersupervisionrequestOption {
	return func(m *PlayerSupervisionRequestMutation) {
		var (
			err   error
			once  sync.Once
			value *PlayerSupervisionRequest
		)
		m.oldValue = func(ctx context.Context) (*PlayerSupervisionRequest, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PlayerSupervisionRequest.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPlayerSupervisionRequest sets the old PlayerSupervisionRequest of the mutation.
func withPlayerSupervisionRequest(node *PlayerSupervisionRequest) playersupervisionrequestOption {
	return func(m *PlayerSupervisionRequestMutation) {
		m.oldValue = func(context.Context) (*PlayerSupervisionRequest, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PlayerSupervisionRequestMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PlayerSupervisionRequestMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PlayerSupervisionRequest entities.
func (m *PlayerSupervisionRequestMutation) SetID(id guidgql.GUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PlayerSupervisionRequestMutation) ID() (id guidgql.GUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PlayerSupervisionRequestMutation) IDs(ctx context.Context) ([]guidgql.GUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []guidgql.GUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PlayerSupervisionRequest.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMessage sets the "message" field.
func (m *PlayerSupervisionRequestMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *PlayerSupervisionRequestMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the PlayerSupervisionRequest entity.
// If the PlayerSupervisionRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlayerSupervisionRequestMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ClearMessage clears the value of the "message" field.
func (m *PlayerSupervisionRequestMutation) ClearMessage() {
	m.message = nil
	m.clearedFields[playersupervisionrequest.FieldMessage] = struct{}{}
}

// MessageCleared returns if the "message" field was cleared in this mutation.
func (m *PlayerSupervisionRequestMutation) MessageCleared() bool {
	_, ok := m.clearedFields[playersupervisionrequest.FieldMessage]
	return ok
}

// ResetMessage resets all changes to the "message" field.
func (m *PlayerSupervisionRequestMutation) ResetMessage() {
	m.message = nil
	delete(m.clearedFields, playersupervisionrequest.FieldMessage)
}

// SetSenderID sets the "sender" edge to the User entity by id.
func (m *PlayerSupervisionRequestMutation) SetSenderID(id guidgql.GUID) {
	m.sender = &id
}

// ClearSender clears the "sender" edge to the User entity.
func (m *PlayerSupervisionRequestMutation) ClearSender() {
	m.clearedsender = true
}

// SenderCleared reports if the "sender" edge to the User entity was cleared.
func (m *PlayerSupervisionRequestMutation) SenderCleared() bool {
	return m.clearedsender
}

// SenderID returns the "sender" edge ID in the mutation.
func (m *PlayerSupervisionRequestMutation) SenderID() (id guidgql.GUID, exists bool) {
	if m.sender != nil {
		return *m.sender, true
	}
	return
}

// SenderIDs returns the "sender" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SenderID instead. It exists only for internal usage by the builders.
func (m *PlayerSupervisionRequestMutation) SenderIDs() (ids []guidgql.GUID) {
	if id := m.sender; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSender resets all changes to the "sender" edge.
func (m *PlayerSupervisionRequestMutation) ResetSender() {
	m.sender = nil
	m.clearedsender = false
}

// SetPlayerID sets the "player" edge to the Player entity by id.
func (m *PlayerSupervisionRequestMutation) SetPlayerID(id guidgql.GUID) {
	m.player = &id
}

// ClearPlayer clears the "player" edge to the Player entity.
func (m *PlayerSupervisionRequestMutation) ClearPlayer() {
	m.clearedplayer = true
}

// PlayerCleared reports if the "player" edge to the Player entity was cleared.
func (m *PlayerSupervisionRequestMutation) PlayerCleared() bool {
	return m.clearedplayer
}

// PlayerID returns the "player" edge ID in the mutation.
func (m *PlayerSupervisionRequestMutation) PlayerID() (id guidgql.GUID, exists bool) {
	if m.player != nil {
		return *m.player, true
	}
	return
}

// PlayerIDs returns the "player" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PlayerID instead. It exists only for internal usage by the builders.
func (m *PlayerSupervisionRequestMutation) PlayerIDs() (ids []guidgql.GUID) {
	if id := m.player; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPlayer resets all changes to the "player" edge.
func (m *PlayerSupervisionRequestMutation) ResetPlayer() {
	m.player = nil
	m.clearedplayer = false
}

// AddApprovalIDs adds the "approvals" edge to the PlayerSupervisionRequestApproval entity by ids.
func (m *PlayerSupervisionRequestMutation) AddApprovalIDs(ids ...guidgql.GUID) {
	if m.approvals == nil {
		m.approvals = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		m.approvals[ids[i]] = struct{}{}
	}
}

// ClearApprovals clears the "approvals" edge to the PlayerSupervisionRequestApproval entity.
func (m *PlayerSupervisionRequestMutation) ClearApprovals() {
	m.clearedapprovals = true
}

// ApprovalsCleared reports if the "approvals" edge to the PlayerSupervisionRequestApproval entity was cleared.
func (m *PlayerSupervisionRequestMutation) ApprovalsCleared() bool {
	return m.clearedapprovals
}

// RemoveApprovalIDs removes the "approvals" edge to the PlayerSupervisionRequestApproval entity by IDs.
func (m *PlayerSupervisionRequestMutation) RemoveApprovalIDs(ids ...guidgql.GUID) {
	if m.removedapprovals == nil {
		m.removedapprovals = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		delete(m.approvals, ids[i])
		m.removedapprovals[ids[i]] = struct{}{}
	}
}

// RemovedApprovals returns the removed IDs of the "approvals" edge to the PlayerSupervisionRequestApproval entity.
func (m *PlayerSupervisionRequestMutation) RemovedApprovalsIDs() (ids []guidgql.GUID) {
	for id := range m.removedapprovals {
		ids = append(ids, id)
	}
	return
}

// ApprovalsIDs returns the "approvals" edge IDs in the mutation.
func (m *PlayerSupervisionRequestMutation) ApprovalsIDs() (ids []guidgql.GUID) {
	for id := range m.approvals {
		ids = append(ids, id)
	}
	return
}

// ResetApprovals resets all changes to the "approvals" edge.
func (m *PlayerSupervisionRequestMutation) ResetApprovals() {
	m.approvals = nil
	m.clearedapprovals = false
	m.removedapprovals = nil
}

// Where appends a list predicates to the PlayerSupervisionRequestMutation builder.
func (m *PlayerSupervisionRequestMutation) Where(ps ...predicate.PlayerSupervisionRequest) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PlayerSupervisionRequestMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PlayerSupervisionRequestMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PlayerSupervisionRequest, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PlayerSupervisionRequestMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PlayerSupervisionRequestMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PlayerSupervisionRequest).
func (m *PlayerSupervisionRequestMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PlayerSupervisionRequestMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.message != nil {
		fields = append(fields, playersupervisionrequest.FieldMessage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PlayerSupervisionRequestMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case playersupervisionrequest.FieldMessage:
		return m.Message()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PlayerSupervisionRequestMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case playersupervisionrequest.FieldMessage:
		return m.OldMessage(ctx)
	}
	return nil, fmt.Errorf("unknown PlayerSupervisionRequest field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlayerSupervisionRequestMutation) SetField(name string, value ent.Value) error {
	switch name {
	case playersupervisionrequest.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	}
	return fmt.Errorf("unknown PlayerSupervisionRequest field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PlayerSupervisionRequestMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PlayerSupervisionRequestMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlayerSupervisionRequestMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PlayerSupervisionRequest numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PlayerSupervisionRequestMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(playersupervisionrequest.FieldMessage) {
		fields = append(fields, playersupervisionrequest.FieldMessage)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PlayerSupervisionRequestMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PlayerSupervisionRequestMutation) ClearField(name string) error {
	switch name {
	case playersupervisionrequest.FieldMessage:
		m.ClearMessage()
		return nil
	}
	return fmt.Errorf("unknown PlayerSupervisionRequest nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PlayerSupervisionRequestMutation) ResetField(name string) error {
	switch name {
	case playersupervisionrequest.FieldMessage:
		m.ResetMessage()
		return nil
	}
	return fmt.Errorf("unknown PlayerSupervisionRequest field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PlayerSupervisionRequestMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.sender != nil {
		edges = append(edges, playersupervisionrequest.EdgeSender)
	}
	if m.player != nil {
		edges = append(edges, playersupervisionrequest.EdgePlayer)
	}
	if m.approvals != nil {
		edges = append(edges, playersupervisionrequest.EdgeApprovals)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PlayerSupervisionRequestMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case playersupervisionrequest.EdgeSender:
		if id := m.sender; id != nil {
			return []ent.Value{*id}
		}
	case playersupervisionrequest.EdgePlayer:
		if id := m.player; id != nil {
			return []ent.Value{*id}
		}
	case playersupervisionrequest.EdgeApprovals:
		ids := make([]ent.Value, 0, len(m.approvals))
		for id := range m.approvals {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PlayerSupervisionRequestMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedapprovals != nil {
		edges = append(edges, playersupervisionrequest.EdgeApprovals)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PlayerSupervisionRequestMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case playersupervisionrequest.EdgeApprovals:
		ids := make([]ent.Value, 0, len(m.removedapprovals))
		for id := range m.removedapprovals {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PlayerSupervisionRequestMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedsender {
		edges = append(edges, playersupervisionrequest.EdgeSender)
	}
	if m.clearedplayer {
		edges = append(edges, playersupervisionrequest.EdgePlayer)
	}
	if m.clearedapprovals {
		edges = append(edges, playersupervisionrequest.EdgeApprovals)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PlayerSupervisionRequestMutation) EdgeCleared(name string) bool {
	switch name {
	case playersupervisionrequest.EdgeSender:
		return m.clearedsender
	case playersupervisionrequest.EdgePlayer:
		return m.clearedplayer
	case playersupervisionrequest.EdgeApprovals:
		return m.clearedapprovals
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PlayerSupervisionRequestMutation) ClearEdge(name string) error {
	switch name {
	case playersupervisionrequest.EdgeSender:
		m.ClearSender()
		return nil
	case playersupervisionrequest.EdgePlayer:
		m.ClearPlayer()
		return nil
	}
	return fmt.Errorf("unknown PlayerSupervisionRequest unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PlayerSupervisionRequestMutation) ResetEdge(name string) error {
	switch name {
	case playersupervisionrequest.EdgeSender:
		m.ResetSender()
		return nil
	case playersupervisionrequest.EdgePlayer:
		m.ResetPlayer()
		return nil
	case playersupervisionrequest.EdgeApprovals:
		m.ResetApprovals()
		return nil
	}
	return fmt.Errorf("unknown PlayerSupervisionRequest edge %s", name)
}

// PlayerSupervisionRequestApprovalMutation represents an operation that mutates the PlayerSupervisionRequestApproval nodes in the graph.
type PlayerSupervisionRequestApprovalMutation struct {
	config
	op                         Op
	typ                        string
	id                         *guidgql.GUID
	approved                   *bool
	clearedFields              map[string]struct{}
	approver                   *guidgql.GUID
	clearedapprover            bool
	supervision_request        *guidgql.GUID
	clearedsupervision_request bool
	done                       bool
	oldValue                   func(context.Context) (*PlayerSupervisionRequestApproval, error)
	predicates                 []predicate.PlayerSupervisionRequestApproval
}

var _ ent.Mutation = (*PlayerSupervisionRequestApprovalMutation)(nil)

// playersupervisionrequestapprovalOption allows management of the mutation configuration using functional options.
type playersupervisionrequestapprovalOption func(*PlayerSupervisionRequestApprovalMutation)

// newPlayerSupervisionRequestApprovalMutation creates new mutation for the PlayerSupervisionRequestApproval entity.
func newPlayerSupervisionRequestApprovalMutation(c config, op Op, opts ...playersupervisionrequestapprovalOption) *PlayerSupervisionRequestApprovalMutation {
	m := &PlayerSupervisionRequestApprovalMutation{
		config:        c,
		op:            op,
		typ:           TypePlayerSupervisionRequestApproval,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPlayerSupervisionRequestApprovalID sets the ID field of the mutation.
func withPlayerSupervisionRequestApprovalID(id guidgql.GUID) playersupervisionrequestapprovalOption {
	return func(m *PlayerSupervisionRequestApprovalMutation) {
		var (
			err   error
			once  sync.Once
			value *PlayerSupervisionRequestApproval
		)
		m.oldValue = func(ctx context.Context) (*PlayerSupervisionRequestApproval, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PlayerSupervisionRequestApproval.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPlayerSupervisionRequestApproval sets the old PlayerSupervisionRequestApproval of the mutation.
func withPlayerSupervisionRequestApproval(node *PlayerSupervisionRequestApproval) playersupervisionrequestapprovalOption {
	return func(m *PlayerSupervisionRequestApprovalMutation) {
		m.oldValue = func(context.Context) (*PlayerSupervisionRequestApproval, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PlayerSupervisionRequestApprovalMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PlayerSupervisionRequestApprovalMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PlayerSupervisionRequestApproval entities.
func (m *PlayerSupervisionRequestApprovalMutation) SetID(id guidgql.GUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PlayerSupervisionRequestApprovalMutation) ID() (id guidgql.GUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PlayerSupervisionRequestApprovalMutation) IDs(ctx context.Context) ([]guidgql.GUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []guidgql.GUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PlayerSupervisionRequestApproval.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetApproved sets the "approved" field.
func (m *PlayerSupervisionRequestApprovalMutation) SetApproved(b bool) {
	m.approved = &b
}

// Approved returns the value of the "approved" field in the mutation.
func (m *PlayerSupervisionRequestApprovalMutation) Approved() (r bool, exists bool) {
	v := m.approved
	if v == nil {
		return
	}
	return *v, true
}

// OldApproved returns the old "approved" field's value of the PlayerSupervisionRequestApproval entity.
// If the PlayerSupervisionRequestApproval object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlayerSupervisionRequestApprovalMutation) OldApproved(ctx context.Context) (v *bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldApproved is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldApproved requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldApproved: %w", err)
	}
	return oldValue.Approved, nil
}

// ClearApproved clears the value of the "approved" field.
func (m *PlayerSupervisionRequestApprovalMutation) ClearApproved() {
	m.approved = nil
	m.clearedFields[playersupervisionrequestapproval.FieldApproved] = struct{}{}
}

// ApprovedCleared returns if the "approved" field was cleared in this mutation.
func (m *PlayerSupervisionRequestApprovalMutation) ApprovedCleared() bool {
	_, ok := m.clearedFields[playersupervisionrequestapproval.FieldApproved]
	return ok
}

// ResetApproved resets all changes to the "approved" field.
func (m *PlayerSupervisionRequestApprovalMutation) ResetApproved() {
	m.approved = nil
	delete(m.clearedFields, playersupervisionrequestapproval.FieldApproved)
}

// SetApproverID sets the "approver" edge to the User entity by id.
func (m *PlayerSupervisionRequestApprovalMutation) SetApproverID(id guidgql.GUID) {
	m.approver = &id
}

// ClearApprover clears the "approver" edge to the User entity.
func (m *PlayerSupervisionRequestApprovalMutation) ClearApprover() {
	m.clearedapprover = true
}

// ApproverCleared reports if the "approver" edge to the User entity was cleared.
func (m *PlayerSupervisionRequestApprovalMutation) ApproverCleared() bool {
	return m.clearedapprover
}

// ApproverID returns the "approver" edge ID in the mutation.
func (m *PlayerSupervisionRequestApprovalMutation) ApproverID() (id guidgql.GUID, exists bool) {
	if m.approver != nil {
		return *m.approver, true
	}
	return
}

// ApproverIDs returns the "approver" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ApproverID instead. It exists only for internal usage by the builders.
func (m *PlayerSupervisionRequestApprovalMutation) ApproverIDs() (ids []guidgql.GUID) {
	if id := m.approver; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetApprover resets all changes to the "approver" edge.
func (m *PlayerSupervisionRequestApprovalMutation) ResetApprover() {
	m.approver = nil
	m.clearedapprover = false
}

// SetSupervisionRequestID sets the "supervision_request" edge to the PlayerSupervisionRequest entity by id.
func (m *PlayerSupervisionRequestApprovalMutation) SetSupervisionRequestID(id guidgql.GUID) {
	m.supervision_request = &id
}

// ClearSupervisionRequest clears the "supervision_request" edge to the PlayerSupervisionRequest entity.
func (m *PlayerSupervisionRequestApprovalMutation) ClearSupervisionRequest() {
	m.clearedsupervision_request = true
}

// SupervisionRequestCleared reports if the "supervision_request" edge to the PlayerSupervisionRequest entity was cleared.
func (m *PlayerSupervisionRequestApprovalMutation) SupervisionRequestCleared() bool {
	return m.clearedsupervision_request
}

// SupervisionRequestID returns the "supervision_request" edge ID in the mutation.
func (m *PlayerSupervisionRequestApprovalMutation) SupervisionRequestID() (id guidgql.GUID, exists bool) {
	if m.supervision_request != nil {
		return *m.supervision_request, true
	}
	return
}

// SupervisionRequestIDs returns the "supervision_request" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SupervisionRequestID instead. It exists only for internal usage by the builders.
func (m *PlayerSupervisionRequestApprovalMutation) SupervisionRequestIDs() (ids []guidgql.GUID) {
	if id := m.supervision_request; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSupervisionRequest resets all changes to the "supervision_request" edge.
func (m *PlayerSupervisionRequestApprovalMutation) ResetSupervisionRequest() {
	m.supervision_request = nil
	m.clearedsupervision_request = false
}

// Where appends a list predicates to the PlayerSupervisionRequestApprovalMutation builder.
func (m *PlayerSupervisionRequestApprovalMutation) Where(ps ...predicate.PlayerSupervisionRequestApproval) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PlayerSupervisionRequestApprovalMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PlayerSupervisionRequestApprovalMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PlayerSupervisionRequestApproval, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PlayerSupervisionRequestApprovalMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PlayerSupervisionRequestApprovalMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PlayerSupervisionRequestApproval).
func (m *PlayerSupervisionRequestApprovalMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PlayerSupervisionRequestApprovalMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.approved != nil {
		fields = append(fields, playersupervisionrequestapproval.FieldApproved)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PlayerSupervisionRequestApprovalMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case playersupervisionrequestapproval.FieldApproved:
		return m.Approved()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PlayerSupervisionRequestApprovalMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case playersupervisionrequestapproval.FieldApproved:
		return m.OldApproved(ctx)
	}
	return nil, fmt.Errorf("unknown PlayerSupervisionRequestApproval field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlayerSupervisionRequestApprovalMutation) SetField(name string, value ent.Value) error {
	switch name {
	case playersupervisionrequestapproval.FieldApproved:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetApproved(v)
		return nil
	}
	return fmt.Errorf("unknown PlayerSupervisionRequestApproval field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PlayerSupervisionRequestApprovalMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PlayerSupervisionRequestApprovalMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlayerSupervisionRequestApprovalMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PlayerSupervisionRequestApproval numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PlayerSupervisionRequestApprovalMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(playersupervisionrequestapproval.FieldApproved) {
		fields = append(fields, playersupervisionrequestapproval.FieldApproved)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PlayerSupervisionRequestApprovalMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PlayerSupervisionRequestApprovalMutation) ClearField(name string) error {
	switch name {
	case playersupervisionrequestapproval.FieldApproved:
		m.ClearApproved()
		return nil
	}
	return fmt.Errorf("unknown PlayerSupervisionRequestApproval nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PlayerSupervisionRequestApprovalMutation) ResetField(name string) error {
	switch name {
	case playersupervisionrequestapproval.FieldApproved:
		m.ResetApproved()
		return nil
	}
	return fmt.Errorf("unknown PlayerSupervisionRequestApproval field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PlayerSupervisionRequestApprovalMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.approver != nil {
		edges = append(edges, playersupervisionrequestapproval.EdgeApprover)
	}
	if m.supervision_request != nil {
		edges = append(edges, playersupervisionrequestapproval.EdgeSupervisionRequest)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PlayerSupervisionRequestApprovalMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case playersupervisionrequestapproval.EdgeApprover:
		if id := m.approver; id != nil {
			return []ent.Value{*id}
		}
	case playersupervisionrequestapproval.EdgeSupervisionRequest:
		if id := m.supervision_request; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PlayerSupervisionRequestApprovalMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PlayerSupervisionRequestApprovalMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PlayerSupervisionRequestApprovalMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedapprover {
		edges = append(edges, playersupervisionrequestapproval.EdgeApprover)
	}
	if m.clearedsupervision_request {
		edges = append(edges, playersupervisionrequestapproval.EdgeSupervisionRequest)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PlayerSupervisionRequestApprovalMutation) EdgeCleared(name string) bool {
	switch name {
	case playersupervisionrequestapproval.EdgeApprover:
		return m.clearedapprover
	case playersupervisionrequestapproval.EdgeSupervisionRequest:
		return m.clearedsupervision_request
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PlayerSupervisionRequestApprovalMutation) ClearEdge(name string) error {
	switch name {
	case playersupervisionrequestapproval.EdgeApprover:
		m.ClearApprover()
		return nil
	case playersupervisionrequestapproval.EdgeSupervisionRequest:
		m.ClearSupervisionRequest()
		return nil
	}
	return fmt.Errorf("unknown PlayerSupervisionRequestApproval unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PlayerSupervisionRequestApprovalMutation) ResetEdge(name string) error {
	switch name {
	case playersupervisionrequestapproval.EdgeApprover:
		m.ResetApprover()
		return nil
	case playersupervisionrequestapproval.EdgeSupervisionRequest:
		m.ResetSupervisionRequest()
		return nil
	}
	return fmt.Errorf("unknown PlayerSupervisionRequestApproval edge %s", name)
}

// StatDescriptionMutation represents an operation that mutates the StatDescription nodes in the graph.
type StatDescriptionMutation struct {
	config
	op                  Op
	typ                 string
	id                  *guidgql.GUID
	_type               *stat.StatType
	name                *string
	description         *string
	metadata            *string
	order_number        *int
	addorder_number     *int
	clearedFields       map[string]struct{}
	game_version        map[guidgql.GUID]struct{}
	removedgame_version map[guidgql.GUID]struct{}
	clearedgame_version bool
	stats               map[guidgql.GUID]struct{}
	removedstats        map[guidgql.GUID]struct{}
	clearedstats        bool
	done                bool
	oldValue            func(context.Context) (*StatDescription, error)
	predicates          []predicate.StatDescription
}

var _ ent.Mutation = (*StatDescriptionMutation)(nil)

// statdescriptionOption allows management of the mutation configuration using functional options.
type statdescriptionOption func(*StatDescriptionMutation)

// newStatDescriptionMutation creates new mutation for the StatDescription entity.
func newStatDescriptionMutation(c config, op Op, opts ...statdescriptionOption) *StatDescriptionMutation {
	m := &StatDescriptionMutation{
		config:        c,
		op:            op,
		typ:           TypeStatDescription,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStatDescriptionID sets the ID field of the mutation.
func withStatDescriptionID(id guidgql.GUID) statdescriptionOption {
	return func(m *StatDescriptionMutation) {
		var (
			err   error
			once  sync.Once
			value *StatDescription
		)
		m.oldValue = func(ctx context.Context) (*StatDescription, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().StatDescription.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStatDescription sets the old StatDescription of the mutation.
func withStatDescription(node *StatDescription) statdescriptionOption {
	return func(m *StatDescriptionMutation) {
		m.oldValue = func(context.Context) (*StatDescription, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StatDescriptionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StatDescriptionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of StatDescription entities.
func (m *StatDescriptionMutation) SetID(id guidgql.GUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StatDescriptionMutation) ID() (id guidgql.GUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StatDescriptionMutation) IDs(ctx context.Context) ([]guidgql.GUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []guidgql.GUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().StatDescription.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetType sets the "type" field.
func (m *StatDescriptionMutation) SetType(st stat.StatType) {
	m._type = &st
}

// GetType returns the value of the "type" field in the mutation.
func (m *StatDescriptionMutation) GetType() (r stat.StatType, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the StatDescription entity.
// If the StatDescription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatDescriptionMutation) OldType(ctx context.Context) (v stat.StatType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *StatDescriptionMutation) ResetType() {
	m._type = nil
}

// SetName sets the "name" field.
func (m *StatDescriptionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *StatDescriptionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the StatDescription entity.
// If the StatDescription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatDescriptionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *StatDescriptionMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *StatDescriptionMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *StatDescriptionMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the StatDescription entity.
// If the StatDescription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatDescriptionMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *StatDescriptionMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[statdescription.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *StatDescriptionMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[statdescription.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *StatDescriptionMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, statdescription.FieldDescription)
}

// SetMetadata sets the "metadata" field.
func (m *StatDescriptionMutation) SetMetadata(s string) {
	m.metadata = &s
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *StatDescriptionMutation) Metadata() (r string, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the StatDescription entity.
// If the StatDescription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatDescriptionMutation) OldMetadata(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ClearMetadata clears the value of the "metadata" field.
func (m *StatDescriptionMutation) ClearMetadata() {
	m.metadata = nil
	m.clearedFields[statdescription.FieldMetadata] = struct{}{}
}

// MetadataCleared returns if the "metadata" field was cleared in this mutation.
func (m *StatDescriptionMutation) MetadataCleared() bool {
	_, ok := m.clearedFields[statdescription.FieldMetadata]
	return ok
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *StatDescriptionMutation) ResetMetadata() {
	m.metadata = nil
	delete(m.clearedFields, statdescription.FieldMetadata)
}

// SetOrderNumber sets the "order_number" field.
func (m *StatDescriptionMutation) SetOrderNumber(i int) {
	m.order_number = &i
	m.addorder_number = nil
}

// OrderNumber returns the value of the "order_number" field in the mutation.
func (m *StatDescriptionMutation) OrderNumber() (r int, exists bool) {
	v := m.order_number
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderNumber returns the old "order_number" field's value of the StatDescription entity.
// If the StatDescription object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatDescriptionMutation) OldOrderNumber(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderNumber: %w", err)
	}
	return oldValue.OrderNumber, nil
}

// AddOrderNumber adds i to the "order_number" field.
func (m *StatDescriptionMutation) AddOrderNumber(i int) {
	if m.addorder_number != nil {
		*m.addorder_number += i
	} else {
		m.addorder_number = &i
	}
}

// AddedOrderNumber returns the value that was added to the "order_number" field in this mutation.
func (m *StatDescriptionMutation) AddedOrderNumber() (r int, exists bool) {
	v := m.addorder_number
	if v == nil {
		return
	}
	return *v, true
}

// ResetOrderNumber resets all changes to the "order_number" field.
func (m *StatDescriptionMutation) ResetOrderNumber() {
	m.order_number = nil
	m.addorder_number = nil
}

// AddGameVersionIDs adds the "game_version" edge to the GameVersion entity by ids.
func (m *StatDescriptionMutation) AddGameVersionIDs(ids ...guidgql.GUID) {
	if m.game_version == nil {
		m.game_version = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		m.game_version[ids[i]] = struct{}{}
	}
}

// ClearGameVersion clears the "game_version" edge to the GameVersion entity.
func (m *StatDescriptionMutation) ClearGameVersion() {
	m.clearedgame_version = true
}

// GameVersionCleared reports if the "game_version" edge to the GameVersion entity was cleared.
func (m *StatDescriptionMutation) GameVersionCleared() bool {
	return m.clearedgame_version
}

// RemoveGameVersionIDs removes the "game_version" edge to the GameVersion entity by IDs.
func (m *StatDescriptionMutation) RemoveGameVersionIDs(ids ...guidgql.GUID) {
	if m.removedgame_version == nil {
		m.removedgame_version = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		delete(m.game_version, ids[i])
		m.removedgame_version[ids[i]] = struct{}{}
	}
}

// RemovedGameVersion returns the removed IDs of the "game_version" edge to the GameVersion entity.
func (m *StatDescriptionMutation) RemovedGameVersionIDs() (ids []guidgql.GUID) {
	for id := range m.removedgame_version {
		ids = append(ids, id)
	}
	return
}

// GameVersionIDs returns the "game_version" edge IDs in the mutation.
func (m *StatDescriptionMutation) GameVersionIDs() (ids []guidgql.GUID) {
	for id := range m.game_version {
		ids = append(ids, id)
	}
	return
}

// ResetGameVersion resets all changes to the "game_version" edge.
func (m *StatDescriptionMutation) ResetGameVersion() {
	m.game_version = nil
	m.clearedgame_version = false
	m.removedgame_version = nil
}

// AddStatIDs adds the "stats" edge to the Statistic entity by ids.
func (m *StatDescriptionMutation) AddStatIDs(ids ...guidgql.GUID) {
	if m.stats == nil {
		m.stats = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		m.stats[ids[i]] = struct{}{}
	}
}

// ClearStats clears the "stats" edge to the Statistic entity.
func (m *StatDescriptionMutation) ClearStats() {
	m.clearedstats = true
}

// StatsCleared reports if the "stats" edge to the Statistic entity was cleared.
func (m *StatDescriptionMutation) StatsCleared() bool {
	return m.clearedstats
}

// RemoveStatIDs removes the "stats" edge to the Statistic entity by IDs.
func (m *StatDescriptionMutation) RemoveStatIDs(ids ...guidgql.GUID) {
	if m.removedstats == nil {
		m.removedstats = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		delete(m.stats, ids[i])
		m.removedstats[ids[i]] = struct{}{}
	}
}

// RemovedStats returns the removed IDs of the "stats" edge to the Statistic entity.
func (m *StatDescriptionMutation) RemovedStatsIDs() (ids []guidgql.GUID) {
	for id := range m.removedstats {
		ids = append(ids, id)
	}
	return
}

// StatsIDs returns the "stats" edge IDs in the mutation.
func (m *StatDescriptionMutation) StatsIDs() (ids []guidgql.GUID) {
	for id := range m.stats {
		ids = append(ids, id)
	}
	return
}

// ResetStats resets all changes to the "stats" edge.
func (m *StatDescriptionMutation) ResetStats() {
	m.stats = nil
	m.clearedstats = false
	m.removedstats = nil
}

// Where appends a list predicates to the StatDescriptionMutation builder.
func (m *StatDescriptionMutation) Where(ps ...predicate.StatDescription) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the StatDescriptionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *StatDescriptionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.StatDescription, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *StatDescriptionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *StatDescriptionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (StatDescription).
func (m *StatDescriptionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StatDescriptionMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m._type != nil {
		fields = append(fields, statdescription.FieldType)
	}
	if m.name != nil {
		fields = append(fields, statdescription.FieldName)
	}
	if m.description != nil {
		fields = append(fields, statdescription.FieldDescription)
	}
	if m.metadata != nil {
		fields = append(fields, statdescription.FieldMetadata)
	}
	if m.order_number != nil {
		fields = append(fields, statdescription.FieldOrderNumber)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StatDescriptionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case statdescription.FieldType:
		return m.GetType()
	case statdescription.FieldName:
		return m.Name()
	case statdescription.FieldDescription:
		return m.Description()
	case statdescription.FieldMetadata:
		return m.Metadata()
	case statdescription.FieldOrderNumber:
		return m.OrderNumber()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StatDescriptionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case statdescription.FieldType:
		return m.OldType(ctx)
	case statdescription.FieldName:
		return m.OldName(ctx)
	case statdescription.FieldDescription:
		return m.OldDescription(ctx)
	case statdescription.FieldMetadata:
		return m.OldMetadata(ctx)
	case statdescription.FieldOrderNumber:
		return m.OldOrderNumber(ctx)
	}
	return nil, fmt.Errorf("unknown StatDescription field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StatDescriptionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case statdescription.FieldType:
		v, ok := value.(stat.StatType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case statdescription.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case statdescription.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case statdescription.FieldMetadata:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	case statdescription.FieldOrderNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderNumber(v)
		return nil
	}
	return fmt.Errorf("unknown StatDescription field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StatDescriptionMutation) AddedFields() []string {
	var fields []string
	if m.addorder_number != nil {
		fields = append(fields, statdescription.FieldOrderNumber)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StatDescriptionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case statdescription.FieldOrderNumber:
		return m.AddedOrderNumber()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StatDescriptionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case statdescription.FieldOrderNumber:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOrderNumber(v)
		return nil
	}
	return fmt.Errorf("unknown StatDescription numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StatDescriptionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(statdescription.FieldDescription) {
		fields = append(fields, statdescription.FieldDescription)
	}
	if m.FieldCleared(statdescription.FieldMetadata) {
		fields = append(fields, statdescription.FieldMetadata)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StatDescriptionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StatDescriptionMutation) ClearField(name string) error {
	switch name {
	case statdescription.FieldDescription:
		m.ClearDescription()
		return nil
	case statdescription.FieldMetadata:
		m.ClearMetadata()
		return nil
	}
	return fmt.Errorf("unknown StatDescription nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StatDescriptionMutation) ResetField(name string) error {
	switch name {
	case statdescription.FieldType:
		m.ResetType()
		return nil
	case statdescription.FieldName:
		m.ResetName()
		return nil
	case statdescription.FieldDescription:
		m.ResetDescription()
		return nil
	case statdescription.FieldMetadata:
		m.ResetMetadata()
		return nil
	case statdescription.FieldOrderNumber:
		m.ResetOrderNumber()
		return nil
	}
	return fmt.Errorf("unknown StatDescription field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StatDescriptionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.game_version != nil {
		edges = append(edges, statdescription.EdgeGameVersion)
	}
	if m.stats != nil {
		edges = append(edges, statdescription.EdgeStats)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StatDescriptionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case statdescription.EdgeGameVersion:
		ids := make([]ent.Value, 0, len(m.game_version))
		for id := range m.game_version {
			ids = append(ids, id)
		}
		return ids
	case statdescription.EdgeStats:
		ids := make([]ent.Value, 0, len(m.stats))
		for id := range m.stats {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StatDescriptionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedgame_version != nil {
		edges = append(edges, statdescription.EdgeGameVersion)
	}
	if m.removedstats != nil {
		edges = append(edges, statdescription.EdgeStats)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StatDescriptionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case statdescription.EdgeGameVersion:
		ids := make([]ent.Value, 0, len(m.removedgame_version))
		for id := range m.removedgame_version {
			ids = append(ids, id)
		}
		return ids
	case statdescription.EdgeStats:
		ids := make([]ent.Value, 0, len(m.removedstats))
		for id := range m.removedstats {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StatDescriptionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedgame_version {
		edges = append(edges, statdescription.EdgeGameVersion)
	}
	if m.clearedstats {
		edges = append(edges, statdescription.EdgeStats)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StatDescriptionMutation) EdgeCleared(name string) bool {
	switch name {
	case statdescription.EdgeGameVersion:
		return m.clearedgame_version
	case statdescription.EdgeStats:
		return m.clearedstats
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StatDescriptionMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown StatDescription unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StatDescriptionMutation) ResetEdge(name string) error {
	switch name {
	case statdescription.EdgeGameVersion:
		m.ResetGameVersion()
		return nil
	case statdescription.EdgeStats:
		m.ResetStats()
		return nil
	}
	return fmt.Errorf("unknown StatDescription edge %s", name)
}

// StatisticMutation represents an operation that mutates the Statistic nodes in the graph.
type StatisticMutation struct {
	config
	op                      Op
	typ                     string
	id                      *guidgql.GUID
	value                   *string
	clearedFields           map[string]struct{}
	match                   *guidgql.GUID
	clearedmatch            bool
	stat_description        *guidgql.GUID
	clearedstat_description bool
	player                  *guidgql.GUID
	clearedplayer           bool
	done                    bool
	oldValue                func(context.Context) (*Statistic, error)
	predicates              []predicate.Statistic
}

var _ ent.Mutation = (*StatisticMutation)(nil)

// statisticOption allows management of the mutation configuration using functional options.
type statisticOption func(*StatisticMutation)

// newStatisticMutation creates new mutation for the Statistic entity.
func newStatisticMutation(c config, op Op, opts ...statisticOption) *StatisticMutation {
	m := &StatisticMutation{
		config:        c,
		op:            op,
		typ:           TypeStatistic,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStatisticID sets the ID field of the mutation.
func withStatisticID(id guidgql.GUID) statisticOption {
	return func(m *StatisticMutation) {
		var (
			err   error
			once  sync.Once
			value *Statistic
		)
		m.oldValue = func(ctx context.Context) (*Statistic, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Statistic.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStatistic sets the old Statistic of the mutation.
func withStatistic(node *Statistic) statisticOption {
	return func(m *StatisticMutation) {
		m.oldValue = func(context.Context) (*Statistic, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StatisticMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StatisticMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Statistic entities.
func (m *StatisticMutation) SetID(id guidgql.GUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StatisticMutation) ID() (id guidgql.GUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StatisticMutation) IDs(ctx context.Context) ([]guidgql.GUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []guidgql.GUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Statistic.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetValue sets the "value" field.
func (m *StatisticMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *StatisticMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the Statistic entity.
// If the Statistic object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StatisticMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ResetValue resets all changes to the "value" field.
func (m *StatisticMutation) ResetValue() {
	m.value = nil
}

// SetMatchID sets the "match" edge to the Match entity by id.
func (m *StatisticMutation) SetMatchID(id guidgql.GUID) {
	m.match = &id
}

// ClearMatch clears the "match" edge to the Match entity.
func (m *StatisticMutation) ClearMatch() {
	m.clearedmatch = true
}

// MatchCleared reports if the "match" edge to the Match entity was cleared.
func (m *StatisticMutation) MatchCleared() bool {
	return m.clearedmatch
}

// MatchID returns the "match" edge ID in the mutation.
func (m *StatisticMutation) MatchID() (id guidgql.GUID, exists bool) {
	if m.match != nil {
		return *m.match, true
	}
	return
}

// MatchIDs returns the "match" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MatchID instead. It exists only for internal usage by the builders.
func (m *StatisticMutation) MatchIDs() (ids []guidgql.GUID) {
	if id := m.match; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMatch resets all changes to the "match" edge.
func (m *StatisticMutation) ResetMatch() {
	m.match = nil
	m.clearedmatch = false
}

// SetStatDescriptionID sets the "stat_description" edge to the StatDescription entity by id.
func (m *StatisticMutation) SetStatDescriptionID(id guidgql.GUID) {
	m.stat_description = &id
}

// ClearStatDescription clears the "stat_description" edge to the StatDescription entity.
func (m *StatisticMutation) ClearStatDescription() {
	m.clearedstat_description = true
}

// StatDescriptionCleared reports if the "stat_description" edge to the StatDescription entity was cleared.
func (m *StatisticMutation) StatDescriptionCleared() bool {
	return m.clearedstat_description
}

// StatDescriptionID returns the "stat_description" edge ID in the mutation.
func (m *StatisticMutation) StatDescriptionID() (id guidgql.GUID, exists bool) {
	if m.stat_description != nil {
		return *m.stat_description, true
	}
	return
}

// StatDescriptionIDs returns the "stat_description" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// StatDescriptionID instead. It exists only for internal usage by the builders.
func (m *StatisticMutation) StatDescriptionIDs() (ids []guidgql.GUID) {
	if id := m.stat_description; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetStatDescription resets all changes to the "stat_description" edge.
func (m *StatisticMutation) ResetStatDescription() {
	m.stat_description = nil
	m.clearedstat_description = false
}

// SetPlayerID sets the "player" edge to the Player entity by id.
func (m *StatisticMutation) SetPlayerID(id guidgql.GUID) {
	m.player = &id
}

// ClearPlayer clears the "player" edge to the Player entity.
func (m *StatisticMutation) ClearPlayer() {
	m.clearedplayer = true
}

// PlayerCleared reports if the "player" edge to the Player entity was cleared.
func (m *StatisticMutation) PlayerCleared() bool {
	return m.clearedplayer
}

// PlayerID returns the "player" edge ID in the mutation.
func (m *StatisticMutation) PlayerID() (id guidgql.GUID, exists bool) {
	if m.player != nil {
		return *m.player, true
	}
	return
}

// PlayerIDs returns the "player" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PlayerID instead. It exists only for internal usage by the builders.
func (m *StatisticMutation) PlayerIDs() (ids []guidgql.GUID) {
	if id := m.player; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPlayer resets all changes to the "player" edge.
func (m *StatisticMutation) ResetPlayer() {
	m.player = nil
	m.clearedplayer = false
}

// Where appends a list predicates to the StatisticMutation builder.
func (m *StatisticMutation) Where(ps ...predicate.Statistic) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the StatisticMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *StatisticMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Statistic, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *StatisticMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *StatisticMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Statistic).
func (m *StatisticMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StatisticMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.value != nil {
		fields = append(fields, statistic.FieldValue)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StatisticMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case statistic.FieldValue:
		return m.Value()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StatisticMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case statistic.FieldValue:
		return m.OldValue(ctx)
	}
	return nil, fmt.Errorf("unknown Statistic field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StatisticMutation) SetField(name string, value ent.Value) error {
	switch name {
	case statistic.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	}
	return fmt.Errorf("unknown Statistic field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StatisticMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StatisticMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StatisticMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Statistic numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StatisticMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StatisticMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StatisticMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Statistic nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StatisticMutation) ResetField(name string) error {
	switch name {
	case statistic.FieldValue:
		m.ResetValue()
		return nil
	}
	return fmt.Errorf("unknown Statistic field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StatisticMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.match != nil {
		edges = append(edges, statistic.EdgeMatch)
	}
	if m.stat_description != nil {
		edges = append(edges, statistic.EdgeStatDescription)
	}
	if m.player != nil {
		edges = append(edges, statistic.EdgePlayer)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StatisticMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case statistic.EdgeMatch:
		if id := m.match; id != nil {
			return []ent.Value{*id}
		}
	case statistic.EdgeStatDescription:
		if id := m.stat_description; id != nil {
			return []ent.Value{*id}
		}
	case statistic.EdgePlayer:
		if id := m.player; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StatisticMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StatisticMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StatisticMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedmatch {
		edges = append(edges, statistic.EdgeMatch)
	}
	if m.clearedstat_description {
		edges = append(edges, statistic.EdgeStatDescription)
	}
	if m.clearedplayer {
		edges = append(edges, statistic.EdgePlayer)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StatisticMutation) EdgeCleared(name string) bool {
	switch name {
	case statistic.EdgeMatch:
		return m.clearedmatch
	case statistic.EdgeStatDescription:
		return m.clearedstat_description
	case statistic.EdgePlayer:
		return m.clearedplayer
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StatisticMutation) ClearEdge(name string) error {
	switch name {
	case statistic.EdgeMatch:
		m.ClearMatch()
		return nil
	case statistic.EdgeStatDescription:
		m.ClearStatDescription()
		return nil
	case statistic.EdgePlayer:
		m.ClearPlayer()
		return nil
	}
	return fmt.Errorf("unknown Statistic unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StatisticMutation) ResetEdge(name string) error {
	switch name {
	case statistic.EdgeMatch:
		m.ResetMatch()
		return nil
	case statistic.EdgeStatDescription:
		m.ResetStatDescription()
		return nil
	case statistic.EdgePlayer:
		m.ResetPlayer()
		return nil
	}
	return fmt.Errorf("unknown Statistic edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                                   Op
	typ                                  string
	id                                   *guidgql.GUID
	name                                 *string
	email                                *string
	password                             *string
	avatar_url                           *string
	clearedFields                        map[string]struct{}
	players                              map[guidgql.GUID]struct{}
	removedplayers                       map[guidgql.GUID]struct{}
	clearedplayers                       bool
	main_player                          *guidgql.GUID
	clearedmain_player                   bool
	sent_supervision_requests            map[guidgql.GUID]struct{}
	removedsent_supervision_requests     map[guidgql.GUID]struct{}
	clearedsent_supervision_requests     bool
	supervision_request_approvals        map[guidgql.GUID]struct{}
	removedsupervision_request_approvals map[guidgql.GUID]struct{}
	clearedsupervision_request_approvals bool
	group_memberships                    map[guidgql.GUID]struct{}
	removedgroup_memberships             map[guidgql.GUID]struct{}
	clearedgroup_memberships             bool
	group_membership_applications        map[guidgql.GUID]struct{}
	removedgroup_membership_applications map[guidgql.GUID]struct{}
	clearedgroup_membership_applications bool
	games                                map[guidgql.GUID]struct{}
	removedgames                         map[guidgql.GUID]struct{}
	clearedgames                         bool
	favorite_games                       map[guidgql.GUID]struct{}
	removedfavorite_games                map[guidgql.GUID]struct{}
	clearedfavorite_games                bool
	done                                 bool
	oldValue                             func(context.Context) (*User, error)
	predicates                           []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id guidgql.GUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id guidgql.GUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id guidgql.GUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]guidgql.GUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []guidgql.GUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetAvatarURL sets the "avatar_url" field.
func (m *UserMutation) SetAvatarURL(s string) {
	m.avatar_url = &s
}

// AvatarURL returns the value of the "avatar_url" field in the mutation.
func (m *UserMutation) AvatarURL() (r string, exists bool) {
	v := m.avatar_url
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatarURL returns the old "avatar_url" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAvatarURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatarURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatarURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatarURL: %w", err)
	}
	return oldValue.AvatarURL, nil
}

// ResetAvatarURL resets all changes to the "avatar_url" field.
func (m *UserMutation) ResetAvatarURL() {
	m.avatar_url = nil
}

// AddPlayerIDs adds the "players" edge to the Player entity by ids.
func (m *UserMutation) AddPlayerIDs(ids ...guidgql.GUID) {
	if m.players == nil {
		m.players = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		m.players[ids[i]] = struct{}{}
	}
}

// ClearPlayers clears the "players" edge to the Player entity.
func (m *UserMutation) ClearPlayers() {
	m.clearedplayers = true
}

// PlayersCleared reports if the "players" edge to the Player entity was cleared.
func (m *UserMutation) PlayersCleared() bool {
	return m.clearedplayers
}

// RemovePlayerIDs removes the "players" edge to the Player entity by IDs.
func (m *UserMutation) RemovePlayerIDs(ids ...guidgql.GUID) {
	if m.removedplayers == nil {
		m.removedplayers = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		delete(m.players, ids[i])
		m.removedplayers[ids[i]] = struct{}{}
	}
}

// RemovedPlayers returns the removed IDs of the "players" edge to the Player entity.
func (m *UserMutation) RemovedPlayersIDs() (ids []guidgql.GUID) {
	for id := range m.removedplayers {
		ids = append(ids, id)
	}
	return
}

// PlayersIDs returns the "players" edge IDs in the mutation.
func (m *UserMutation) PlayersIDs() (ids []guidgql.GUID) {
	for id := range m.players {
		ids = append(ids, id)
	}
	return
}

// ResetPlayers resets all changes to the "players" edge.
func (m *UserMutation) ResetPlayers() {
	m.players = nil
	m.clearedplayers = false
	m.removedplayers = nil
}

// SetMainPlayerID sets the "main_player" edge to the Player entity by id.
func (m *UserMutation) SetMainPlayerID(id guidgql.GUID) {
	m.main_player = &id
}

// ClearMainPlayer clears the "main_player" edge to the Player entity.
func (m *UserMutation) ClearMainPlayer() {
	m.clearedmain_player = true
}

// MainPlayerCleared reports if the "main_player" edge to the Player entity was cleared.
func (m *UserMutation) MainPlayerCleared() bool {
	return m.clearedmain_player
}

// MainPlayerID returns the "main_player" edge ID in the mutation.
func (m *UserMutation) MainPlayerID() (id guidgql.GUID, exists bool) {
	if m.main_player != nil {
		return *m.main_player, true
	}
	return
}

// MainPlayerIDs returns the "main_player" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MainPlayerID instead. It exists only for internal usage by the builders.
func (m *UserMutation) MainPlayerIDs() (ids []guidgql.GUID) {
	if id := m.main_player; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMainPlayer resets all changes to the "main_player" edge.
func (m *UserMutation) ResetMainPlayer() {
	m.main_player = nil
	m.clearedmain_player = false
}

// AddSentSupervisionRequestIDs adds the "sent_supervision_requests" edge to the PlayerSupervisionRequest entity by ids.
func (m *UserMutation) AddSentSupervisionRequestIDs(ids ...guidgql.GUID) {
	if m.sent_supervision_requests == nil {
		m.sent_supervision_requests = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		m.sent_supervision_requests[ids[i]] = struct{}{}
	}
}

// ClearSentSupervisionRequests clears the "sent_supervision_requests" edge to the PlayerSupervisionRequest entity.
func (m *UserMutation) ClearSentSupervisionRequests() {
	m.clearedsent_supervision_requests = true
}

// SentSupervisionRequestsCleared reports if the "sent_supervision_requests" edge to the PlayerSupervisionRequest entity was cleared.
func (m *UserMutation) SentSupervisionRequestsCleared() bool {
	return m.clearedsent_supervision_requests
}

// RemoveSentSupervisionRequestIDs removes the "sent_supervision_requests" edge to the PlayerSupervisionRequest entity by IDs.
func (m *UserMutation) RemoveSentSupervisionRequestIDs(ids ...guidgql.GUID) {
	if m.removedsent_supervision_requests == nil {
		m.removedsent_supervision_requests = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		delete(m.sent_supervision_requests, ids[i])
		m.removedsent_supervision_requests[ids[i]] = struct{}{}
	}
}

// RemovedSentSupervisionRequests returns the removed IDs of the "sent_supervision_requests" edge to the PlayerSupervisionRequest entity.
func (m *UserMutation) RemovedSentSupervisionRequestsIDs() (ids []guidgql.GUID) {
	for id := range m.removedsent_supervision_requests {
		ids = append(ids, id)
	}
	return
}

// SentSupervisionRequestsIDs returns the "sent_supervision_requests" edge IDs in the mutation.
func (m *UserMutation) SentSupervisionRequestsIDs() (ids []guidgql.GUID) {
	for id := range m.sent_supervision_requests {
		ids = append(ids, id)
	}
	return
}

// ResetSentSupervisionRequests resets all changes to the "sent_supervision_requests" edge.
func (m *UserMutation) ResetSentSupervisionRequests() {
	m.sent_supervision_requests = nil
	m.clearedsent_supervision_requests = false
	m.removedsent_supervision_requests = nil
}

// AddSupervisionRequestApprovalIDs adds the "supervision_request_approvals" edge to the PlayerSupervisionRequestApproval entity by ids.
func (m *UserMutation) AddSupervisionRequestApprovalIDs(ids ...guidgql.GUID) {
	if m.supervision_request_approvals == nil {
		m.supervision_request_approvals = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		m.supervision_request_approvals[ids[i]] = struct{}{}
	}
}

// ClearSupervisionRequestApprovals clears the "supervision_request_approvals" edge to the PlayerSupervisionRequestApproval entity.
func (m *UserMutation) ClearSupervisionRequestApprovals() {
	m.clearedsupervision_request_approvals = true
}

// SupervisionRequestApprovalsCleared reports if the "supervision_request_approvals" edge to the PlayerSupervisionRequestApproval entity was cleared.
func (m *UserMutation) SupervisionRequestApprovalsCleared() bool {
	return m.clearedsupervision_request_approvals
}

// RemoveSupervisionRequestApprovalIDs removes the "supervision_request_approvals" edge to the PlayerSupervisionRequestApproval entity by IDs.
func (m *UserMutation) RemoveSupervisionRequestApprovalIDs(ids ...guidgql.GUID) {
	if m.removedsupervision_request_approvals == nil {
		m.removedsupervision_request_approvals = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		delete(m.supervision_request_approvals, ids[i])
		m.removedsupervision_request_approvals[ids[i]] = struct{}{}
	}
}

// RemovedSupervisionRequestApprovals returns the removed IDs of the "supervision_request_approvals" edge to the PlayerSupervisionRequestApproval entity.
func (m *UserMutation) RemovedSupervisionRequestApprovalsIDs() (ids []guidgql.GUID) {
	for id := range m.removedsupervision_request_approvals {
		ids = append(ids, id)
	}
	return
}

// SupervisionRequestApprovalsIDs returns the "supervision_request_approvals" edge IDs in the mutation.
func (m *UserMutation) SupervisionRequestApprovalsIDs() (ids []guidgql.GUID) {
	for id := range m.supervision_request_approvals {
		ids = append(ids, id)
	}
	return
}

// ResetSupervisionRequestApprovals resets all changes to the "supervision_request_approvals" edge.
func (m *UserMutation) ResetSupervisionRequestApprovals() {
	m.supervision_request_approvals = nil
	m.clearedsupervision_request_approvals = false
	m.removedsupervision_request_approvals = nil
}

// AddGroupMembershipIDs adds the "group_memberships" edge to the GroupMembership entity by ids.
func (m *UserMutation) AddGroupMembershipIDs(ids ...guidgql.GUID) {
	if m.group_memberships == nil {
		m.group_memberships = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		m.group_memberships[ids[i]] = struct{}{}
	}
}

// ClearGroupMemberships clears the "group_memberships" edge to the GroupMembership entity.
func (m *UserMutation) ClearGroupMemberships() {
	m.clearedgroup_memberships = true
}

// GroupMembershipsCleared reports if the "group_memberships" edge to the GroupMembership entity was cleared.
func (m *UserMutation) GroupMembershipsCleared() bool {
	return m.clearedgroup_memberships
}

// RemoveGroupMembershipIDs removes the "group_memberships" edge to the GroupMembership entity by IDs.
func (m *UserMutation) RemoveGroupMembershipIDs(ids ...guidgql.GUID) {
	if m.removedgroup_memberships == nil {
		m.removedgroup_memberships = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		delete(m.group_memberships, ids[i])
		m.removedgroup_memberships[ids[i]] = struct{}{}
	}
}

// RemovedGroupMemberships returns the removed IDs of the "group_memberships" edge to the GroupMembership entity.
func (m *UserMutation) RemovedGroupMembershipsIDs() (ids []guidgql.GUID) {
	for id := range m.removedgroup_memberships {
		ids = append(ids, id)
	}
	return
}

// GroupMembershipsIDs returns the "group_memberships" edge IDs in the mutation.
func (m *UserMutation) GroupMembershipsIDs() (ids []guidgql.GUID) {
	for id := range m.group_memberships {
		ids = append(ids, id)
	}
	return
}

// ResetGroupMemberships resets all changes to the "group_memberships" edge.
func (m *UserMutation) ResetGroupMemberships() {
	m.group_memberships = nil
	m.clearedgroup_memberships = false
	m.removedgroup_memberships = nil
}

// AddGroupMembershipApplicationIDs adds the "group_membership_applications" edge to the GroupMembershipApplication entity by ids.
func (m *UserMutation) AddGroupMembershipApplicationIDs(ids ...guidgql.GUID) {
	if m.group_membership_applications == nil {
		m.group_membership_applications = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		m.group_membership_applications[ids[i]] = struct{}{}
	}
}

// ClearGroupMembershipApplications clears the "group_membership_applications" edge to the GroupMembershipApplication entity.
func (m *UserMutation) ClearGroupMembershipApplications() {
	m.clearedgroup_membership_applications = true
}

// GroupMembershipApplicationsCleared reports if the "group_membership_applications" edge to the GroupMembershipApplication entity was cleared.
func (m *UserMutation) GroupMembershipApplicationsCleared() bool {
	return m.clearedgroup_membership_applications
}

// RemoveGroupMembershipApplicationIDs removes the "group_membership_applications" edge to the GroupMembershipApplication entity by IDs.
func (m *UserMutation) RemoveGroupMembershipApplicationIDs(ids ...guidgql.GUID) {
	if m.removedgroup_membership_applications == nil {
		m.removedgroup_membership_applications = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		delete(m.group_membership_applications, ids[i])
		m.removedgroup_membership_applications[ids[i]] = struct{}{}
	}
}

// RemovedGroupMembershipApplications returns the removed IDs of the "group_membership_applications" edge to the GroupMembershipApplication entity.
func (m *UserMutation) RemovedGroupMembershipApplicationsIDs() (ids []guidgql.GUID) {
	for id := range m.removedgroup_membership_applications {
		ids = append(ids, id)
	}
	return
}

// GroupMembershipApplicationsIDs returns the "group_membership_applications" edge IDs in the mutation.
func (m *UserMutation) GroupMembershipApplicationsIDs() (ids []guidgql.GUID) {
	for id := range m.group_membership_applications {
		ids = append(ids, id)
	}
	return
}

// ResetGroupMembershipApplications resets all changes to the "group_membership_applications" edge.
func (m *UserMutation) ResetGroupMembershipApplications() {
	m.group_membership_applications = nil
	m.clearedgroup_membership_applications = false
	m.removedgroup_membership_applications = nil
}

// AddGameIDs adds the "games" edge to the Game entity by ids.
func (m *UserMutation) AddGameIDs(ids ...guidgql.GUID) {
	if m.games == nil {
		m.games = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		m.games[ids[i]] = struct{}{}
	}
}

// ClearGames clears the "games" edge to the Game entity.
func (m *UserMutation) ClearGames() {
	m.clearedgames = true
}

// GamesCleared reports if the "games" edge to the Game entity was cleared.
func (m *UserMutation) GamesCleared() bool {
	return m.clearedgames
}

// RemoveGameIDs removes the "games" edge to the Game entity by IDs.
func (m *UserMutation) RemoveGameIDs(ids ...guidgql.GUID) {
	if m.removedgames == nil {
		m.removedgames = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		delete(m.games, ids[i])
		m.removedgames[ids[i]] = struct{}{}
	}
}

// RemovedGames returns the removed IDs of the "games" edge to the Game entity.
func (m *UserMutation) RemovedGamesIDs() (ids []guidgql.GUID) {
	for id := range m.removedgames {
		ids = append(ids, id)
	}
	return
}

// GamesIDs returns the "games" edge IDs in the mutation.
func (m *UserMutation) GamesIDs() (ids []guidgql.GUID) {
	for id := range m.games {
		ids = append(ids, id)
	}
	return
}

// ResetGames resets all changes to the "games" edge.
func (m *UserMutation) ResetGames() {
	m.games = nil
	m.clearedgames = false
	m.removedgames = nil
}

// AddFavoriteGameIDs adds the "favorite_games" edge to the GameFavorite entity by ids.
func (m *UserMutation) AddFavoriteGameIDs(ids ...guidgql.GUID) {
	if m.favorite_games == nil {
		m.favorite_games = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		m.favorite_games[ids[i]] = struct{}{}
	}
}

// ClearFavoriteGames clears the "favorite_games" edge to the GameFavorite entity.
func (m *UserMutation) ClearFavoriteGames() {
	m.clearedfavorite_games = true
}

// FavoriteGamesCleared reports if the "favorite_games" edge to the GameFavorite entity was cleared.
func (m *UserMutation) FavoriteGamesCleared() bool {
	return m.clearedfavorite_games
}

// RemoveFavoriteGameIDs removes the "favorite_games" edge to the GameFavorite entity by IDs.
func (m *UserMutation) RemoveFavoriteGameIDs(ids ...guidgql.GUID) {
	if m.removedfavorite_games == nil {
		m.removedfavorite_games = make(map[guidgql.GUID]struct{})
	}
	for i := range ids {
		delete(m.favorite_games, ids[i])
		m.removedfavorite_games[ids[i]] = struct{}{}
	}
}

// RemovedFavoriteGames returns the removed IDs of the "favorite_games" edge to the GameFavorite entity.
func (m *UserMutation) RemovedFavoriteGamesIDs() (ids []guidgql.GUID) {
	for id := range m.removedfavorite_games {
		ids = append(ids, id)
	}
	return
}

// FavoriteGamesIDs returns the "favorite_games" edge IDs in the mutation.
func (m *UserMutation) FavoriteGamesIDs() (ids []guidgql.GUID) {
	for id := range m.favorite_games {
		ids = append(ids, id)
	}
	return
}

// ResetFavoriteGames resets all changes to the "favorite_games" edge.
func (m *UserMutation) ResetFavoriteGames() {
	m.favorite_games = nil
	m.clearedfavorite_games = false
	m.removedfavorite_games = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.avatar_url != nil {
		fields = append(fields, user.FieldAvatarURL)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	case user.FieldAvatarURL:
		return m.AvatarURL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldAvatarURL:
		return m.OldAvatarURL(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldAvatarURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatarURL(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldAvatarURL:
		m.ResetAvatarURL()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 8)
	if m.players != nil {
		edges = append(edges, user.EdgePlayers)
	}
	if m.main_player != nil {
		edges = append(edges, user.EdgeMainPlayer)
	}
	if m.sent_supervision_requests != nil {
		edges = append(edges, user.EdgeSentSupervisionRequests)
	}
	if m.supervision_request_approvals != nil {
		edges = append(edges, user.EdgeSupervisionRequestApprovals)
	}
	if m.group_memberships != nil {
		edges = append(edges, user.EdgeGroupMemberships)
	}
	if m.group_membership_applications != nil {
		edges = append(edges, user.EdgeGroupMembershipApplications)
	}
	if m.games != nil {
		edges = append(edges, user.EdgeGames)
	}
	if m.favorite_games != nil {
		edges = append(edges, user.EdgeFavoriteGames)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgePlayers:
		ids := make([]ent.Value, 0, len(m.players))
		for id := range m.players {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeMainPlayer:
		if id := m.main_player; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeSentSupervisionRequests:
		ids := make([]ent.Value, 0, len(m.sent_supervision_requests))
		for id := range m.sent_supervision_requests {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSupervisionRequestApprovals:
		ids := make([]ent.Value, 0, len(m.supervision_request_approvals))
		for id := range m.supervision_request_approvals {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGroupMemberships:
		ids := make([]ent.Value, 0, len(m.group_memberships))
		for id := range m.group_memberships {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGroupMembershipApplications:
		ids := make([]ent.Value, 0, len(m.group_membership_applications))
		for id := range m.group_membership_applications {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGames:
		ids := make([]ent.Value, 0, len(m.games))
		for id := range m.games {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeFavoriteGames:
		ids := make([]ent.Value, 0, len(m.favorite_games))
		for id := range m.favorite_games {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 8)
	if m.removedplayers != nil {
		edges = append(edges, user.EdgePlayers)
	}
	if m.removedsent_supervision_requests != nil {
		edges = append(edges, user.EdgeSentSupervisionRequests)
	}
	if m.removedsupervision_request_approvals != nil {
		edges = append(edges, user.EdgeSupervisionRequestApprovals)
	}
	if m.removedgroup_memberships != nil {
		edges = append(edges, user.EdgeGroupMemberships)
	}
	if m.removedgroup_membership_applications != nil {
		edges = append(edges, user.EdgeGroupMembershipApplications)
	}
	if m.removedgames != nil {
		edges = append(edges, user.EdgeGames)
	}
	if m.removedfavorite_games != nil {
		edges = append(edges, user.EdgeFavoriteGames)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgePlayers:
		ids := make([]ent.Value, 0, len(m.removedplayers))
		for id := range m.removedplayers {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSentSupervisionRequests:
		ids := make([]ent.Value, 0, len(m.removedsent_supervision_requests))
		for id := range m.removedsent_supervision_requests {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSupervisionRequestApprovals:
		ids := make([]ent.Value, 0, len(m.removedsupervision_request_approvals))
		for id := range m.removedsupervision_request_approvals {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGroupMemberships:
		ids := make([]ent.Value, 0, len(m.removedgroup_memberships))
		for id := range m.removedgroup_memberships {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGroupMembershipApplications:
		ids := make([]ent.Value, 0, len(m.removedgroup_membership_applications))
		for id := range m.removedgroup_membership_applications {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGames:
		ids := make([]ent.Value, 0, len(m.removedgames))
		for id := range m.removedgames {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeFavoriteGames:
		ids := make([]ent.Value, 0, len(m.removedfavorite_games))
		for id := range m.removedfavorite_games {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 8)
	if m.clearedplayers {
		edges = append(edges, user.EdgePlayers)
	}
	if m.clearedmain_player {
		edges = append(edges, user.EdgeMainPlayer)
	}
	if m.clearedsent_supervision_requests {
		edges = append(edges, user.EdgeSentSupervisionRequests)
	}
	if m.clearedsupervision_request_approvals {
		edges = append(edges, user.EdgeSupervisionRequestApprovals)
	}
	if m.clearedgroup_memberships {
		edges = append(edges, user.EdgeGroupMemberships)
	}
	if m.clearedgroup_membership_applications {
		edges = append(edges, user.EdgeGroupMembershipApplications)
	}
	if m.clearedgames {
		edges = append(edges, user.EdgeGames)
	}
	if m.clearedfavorite_games {
		edges = append(edges, user.EdgeFavoriteGames)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgePlayers:
		return m.clearedplayers
	case user.EdgeMainPlayer:
		return m.clearedmain_player
	case user.EdgeSentSupervisionRequests:
		return m.clearedsent_supervision_requests
	case user.EdgeSupervisionRequestApprovals:
		return m.clearedsupervision_request_approvals
	case user.EdgeGroupMemberships:
		return m.clearedgroup_memberships
	case user.EdgeGroupMembershipApplications:
		return m.clearedgroup_membership_applications
	case user.EdgeGames:
		return m.clearedgames
	case user.EdgeFavoriteGames:
		return m.clearedfavorite_games
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeMainPlayer:
		m.ClearMainPlayer()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgePlayers:
		m.ResetPlayers()
		return nil
	case user.EdgeMainPlayer:
		m.ResetMainPlayer()
		return nil
	case user.EdgeSentSupervisionRequests:
		m.ResetSentSupervisionRequests()
		return nil
	case user.EdgeSupervisionRequestApprovals:
		m.ResetSupervisionRequestApprovals()
		return nil
	case user.EdgeGroupMemberships:
		m.ResetGroupMemberships()
		return nil
	case user.EdgeGroupMembershipApplications:
		m.ResetGroupMembershipApplications()
		return nil
	case user.EdgeGames:
		m.ResetGames()
		return nil
	case user.EdgeFavoriteGames:
		m.ResetFavoriteGames()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
