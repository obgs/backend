// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/google/uuid"
	"github.com/open-boardgame-stats/backend/internal/ent/enums"
	"github.com/open-boardgame-stats/backend/internal/ent/group"
	"github.com/open-boardgame-stats/backend/internal/ent/groupmembership"
	"github.com/open-boardgame-stats/backend/internal/ent/groupmembershipapplication"
	"github.com/open-boardgame-stats/backend/internal/ent/groupsettings"
	"github.com/open-boardgame-stats/backend/internal/ent/player"
	"github.com/open-boardgame-stats/backend/internal/ent/playersupervisionrequest"
	"github.com/open-boardgame-stats/backend/internal/ent/playersupervisionrequestapproval"
	"github.com/open-boardgame-stats/backend/internal/ent/predicate"
	"github.com/open-boardgame-stats/backend/internal/ent/user"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeGroup                            = "Group"
	TypeGroupMembership                  = "GroupMembership"
	TypeGroupMembershipApplication       = "GroupMembershipApplication"
	TypeGroupSettings                    = "GroupSettings"
	TypePlayer                           = "Player"
	TypePlayerSupervisionRequest         = "PlayerSupervisionRequest"
	TypePlayerSupervisionRequestApproval = "PlayerSupervisionRequestApproval"
	TypeUser                             = "User"
)

// GroupMutation represents an operation that mutates the Group nodes in the graph.
type GroupMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	name                *string
	description         *string
	logo_url            *string
	clearedFields       map[string]struct{}
	settings            *uuid.UUID
	clearedsettings     bool
	members             map[uuid.UUID]struct{}
	removedmembers      map[uuid.UUID]struct{}
	clearedmembers      bool
	applications        map[uuid.UUID]struct{}
	removedapplications map[uuid.UUID]struct{}
	clearedapplications bool
	done                bool
	oldValue            func(context.Context) (*Group, error)
	predicates          []predicate.Group
}

var _ ent.Mutation = (*GroupMutation)(nil)

// groupOption allows management of the mutation configuration using functional options.
type groupOption func(*GroupMutation)

// newGroupMutation creates new mutation for the Group entity.
func newGroupMutation(c config, op Op, opts ...groupOption) *GroupMutation {
	m := &GroupMutation{
		config:        c,
		op:            op,
		typ:           TypeGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupID sets the ID field of the mutation.
func withGroupID(id uuid.UUID) groupOption {
	return func(m *GroupMutation) {
		var (
			err   error
			once  sync.Once
			value *Group
		)
		m.oldValue = func(ctx context.Context) (*Group, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Group.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroup sets the old Group of the mutation.
func withGroup(node *Group) groupOption {
	return func(m *GroupMutation) {
		m.oldValue = func(context.Context) (*Group, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Group entities.
func (m *GroupMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GroupMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Group.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *GroupMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *GroupMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *GroupMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *GroupMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *GroupMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *GroupMutation) ResetDescription() {
	m.description = nil
}

// SetLogoURL sets the "logo_url" field.
func (m *GroupMutation) SetLogoURL(s string) {
	m.logo_url = &s
}

// LogoURL returns the value of the "logo_url" field in the mutation.
func (m *GroupMutation) LogoURL() (r string, exists bool) {
	v := m.logo_url
	if v == nil {
		return
	}
	return *v, true
}

// OldLogoURL returns the old "logo_url" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldLogoURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogoURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogoURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogoURL: %w", err)
	}
	return oldValue.LogoURL, nil
}

// ResetLogoURL resets all changes to the "logo_url" field.
func (m *GroupMutation) ResetLogoURL() {
	m.logo_url = nil
}

// SetSettingsID sets the "settings" edge to the GroupSettings entity by id.
func (m *GroupMutation) SetSettingsID(id uuid.UUID) {
	m.settings = &id
}

// ClearSettings clears the "settings" edge to the GroupSettings entity.
func (m *GroupMutation) ClearSettings() {
	m.clearedsettings = true
}

// SettingsCleared reports if the "settings" edge to the GroupSettings entity was cleared.
func (m *GroupMutation) SettingsCleared() bool {
	return m.clearedsettings
}

// SettingsID returns the "settings" edge ID in the mutation.
func (m *GroupMutation) SettingsID() (id uuid.UUID, exists bool) {
	if m.settings != nil {
		return *m.settings, true
	}
	return
}

// SettingsIDs returns the "settings" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SettingsID instead. It exists only for internal usage by the builders.
func (m *GroupMutation) SettingsIDs() (ids []uuid.UUID) {
	if id := m.settings; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSettings resets all changes to the "settings" edge.
func (m *GroupMutation) ResetSettings() {
	m.settings = nil
	m.clearedsettings = false
}

// AddMemberIDs adds the "members" edge to the GroupMembership entity by ids.
func (m *GroupMutation) AddMemberIDs(ids ...uuid.UUID) {
	if m.members == nil {
		m.members = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.members[ids[i]] = struct{}{}
	}
}

// ClearMembers clears the "members" edge to the GroupMembership entity.
func (m *GroupMutation) ClearMembers() {
	m.clearedmembers = true
}

// MembersCleared reports if the "members" edge to the GroupMembership entity was cleared.
func (m *GroupMutation) MembersCleared() bool {
	return m.clearedmembers
}

// RemoveMemberIDs removes the "members" edge to the GroupMembership entity by IDs.
func (m *GroupMutation) RemoveMemberIDs(ids ...uuid.UUID) {
	if m.removedmembers == nil {
		m.removedmembers = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.members, ids[i])
		m.removedmembers[ids[i]] = struct{}{}
	}
}

// RemovedMembers returns the removed IDs of the "members" edge to the GroupMembership entity.
func (m *GroupMutation) RemovedMembersIDs() (ids []uuid.UUID) {
	for id := range m.removedmembers {
		ids = append(ids, id)
	}
	return
}

// MembersIDs returns the "members" edge IDs in the mutation.
func (m *GroupMutation) MembersIDs() (ids []uuid.UUID) {
	for id := range m.members {
		ids = append(ids, id)
	}
	return
}

// ResetMembers resets all changes to the "members" edge.
func (m *GroupMutation) ResetMembers() {
	m.members = nil
	m.clearedmembers = false
	m.removedmembers = nil
}

// AddApplicationIDs adds the "applications" edge to the GroupMembershipApplication entity by ids.
func (m *GroupMutation) AddApplicationIDs(ids ...uuid.UUID) {
	if m.applications == nil {
		m.applications = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.applications[ids[i]] = struct{}{}
	}
}

// ClearApplications clears the "applications" edge to the GroupMembershipApplication entity.
func (m *GroupMutation) ClearApplications() {
	m.clearedapplications = true
}

// ApplicationsCleared reports if the "applications" edge to the GroupMembershipApplication entity was cleared.
func (m *GroupMutation) ApplicationsCleared() bool {
	return m.clearedapplications
}

// RemoveApplicationIDs removes the "applications" edge to the GroupMembershipApplication entity by IDs.
func (m *GroupMutation) RemoveApplicationIDs(ids ...uuid.UUID) {
	if m.removedapplications == nil {
		m.removedapplications = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.applications, ids[i])
		m.removedapplications[ids[i]] = struct{}{}
	}
}

// RemovedApplications returns the removed IDs of the "applications" edge to the GroupMembershipApplication entity.
func (m *GroupMutation) RemovedApplicationsIDs() (ids []uuid.UUID) {
	for id := range m.removedapplications {
		ids = append(ids, id)
	}
	return
}

// ApplicationsIDs returns the "applications" edge IDs in the mutation.
func (m *GroupMutation) ApplicationsIDs() (ids []uuid.UUID) {
	for id := range m.applications {
		ids = append(ids, id)
	}
	return
}

// ResetApplications resets all changes to the "applications" edge.
func (m *GroupMutation) ResetApplications() {
	m.applications = nil
	m.clearedapplications = false
	m.removedapplications = nil
}

// Where appends a list predicates to the GroupMutation builder.
func (m *GroupMutation) Where(ps ...predicate.Group) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GroupMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Group).
func (m *GroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, group.FieldName)
	}
	if m.description != nil {
		fields = append(fields, group.FieldDescription)
	}
	if m.logo_url != nil {
		fields = append(fields, group.FieldLogoURL)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case group.FieldName:
		return m.Name()
	case group.FieldDescription:
		return m.Description()
	case group.FieldLogoURL:
		return m.LogoURL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case group.FieldName:
		return m.OldName(ctx)
	case group.FieldDescription:
		return m.OldDescription(ctx)
	case group.FieldLogoURL:
		return m.OldLogoURL(ctx)
	}
	return nil, fmt.Errorf("unknown Group field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case group.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case group.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case group.FieldLogoURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogoURL(v)
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Group numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Group nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupMutation) ResetField(name string) error {
	switch name {
	case group.FieldName:
		m.ResetName()
		return nil
	case group.FieldDescription:
		m.ResetDescription()
		return nil
	case group.FieldLogoURL:
		m.ResetLogoURL()
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.settings != nil {
		edges = append(edges, group.EdgeSettings)
	}
	if m.members != nil {
		edges = append(edges, group.EdgeMembers)
	}
	if m.applications != nil {
		edges = append(edges, group.EdgeApplications)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeSettings:
		if id := m.settings; id != nil {
			return []ent.Value{*id}
		}
	case group.EdgeMembers:
		ids := make([]ent.Value, 0, len(m.members))
		for id := range m.members {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeApplications:
		ids := make([]ent.Value, 0, len(m.applications))
		for id := range m.applications {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedmembers != nil {
		edges = append(edges, group.EdgeMembers)
	}
	if m.removedapplications != nil {
		edges = append(edges, group.EdgeApplications)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeMembers:
		ids := make([]ent.Value, 0, len(m.removedmembers))
		for id := range m.removedmembers {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeApplications:
		ids := make([]ent.Value, 0, len(m.removedapplications))
		for id := range m.removedapplications {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedsettings {
		edges = append(edges, group.EdgeSettings)
	}
	if m.clearedmembers {
		edges = append(edges, group.EdgeMembers)
	}
	if m.clearedapplications {
		edges = append(edges, group.EdgeApplications)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupMutation) EdgeCleared(name string) bool {
	switch name {
	case group.EdgeSettings:
		return m.clearedsettings
	case group.EdgeMembers:
		return m.clearedmembers
	case group.EdgeApplications:
		return m.clearedapplications
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupMutation) ClearEdge(name string) error {
	switch name {
	case group.EdgeSettings:
		m.ClearSettings()
		return nil
	}
	return fmt.Errorf("unknown Group unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupMutation) ResetEdge(name string) error {
	switch name {
	case group.EdgeSettings:
		m.ResetSettings()
		return nil
	case group.EdgeMembers:
		m.ResetMembers()
		return nil
	case group.EdgeApplications:
		m.ResetApplications()
		return nil
	}
	return fmt.Errorf("unknown Group edge %s", name)
}

// GroupMembershipMutation represents an operation that mutates the GroupMembership nodes in the graph.
type GroupMembershipMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	role          *enums.Role
	clearedFields map[string]struct{}
	group         *uuid.UUID
	clearedgroup  bool
	user          *uuid.UUID
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*GroupMembership, error)
	predicates    []predicate.GroupMembership
}

var _ ent.Mutation = (*GroupMembershipMutation)(nil)

// groupmembershipOption allows management of the mutation configuration using functional options.
type groupmembershipOption func(*GroupMembershipMutation)

// newGroupMembershipMutation creates new mutation for the GroupMembership entity.
func newGroupMembershipMutation(c config, op Op, opts ...groupmembershipOption) *GroupMembershipMutation {
	m := &GroupMembershipMutation{
		config:        c,
		op:            op,
		typ:           TypeGroupMembership,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupMembershipID sets the ID field of the mutation.
func withGroupMembershipID(id uuid.UUID) groupmembershipOption {
	return func(m *GroupMembershipMutation) {
		var (
			err   error
			once  sync.Once
			value *GroupMembership
		)
		m.oldValue = func(ctx context.Context) (*GroupMembership, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GroupMembership.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroupMembership sets the old GroupMembership of the mutation.
func withGroupMembership(node *GroupMembership) groupmembershipOption {
	return func(m *GroupMembershipMutation) {
		m.oldValue = func(context.Context) (*GroupMembership, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupMembershipMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupMembershipMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GroupMembership entities.
func (m *GroupMembershipMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupMembershipMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GroupMembershipMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GroupMembership.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetRole sets the "role" field.
func (m *GroupMembershipMutation) SetRole(e enums.Role) {
	m.role = &e
}

// Role returns the value of the "role" field in the mutation.
func (m *GroupMembershipMutation) Role() (r enums.Role, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the GroupMembership entity.
// If the GroupMembership object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMembershipMutation) OldRole(ctx context.Context) (v enums.Role, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *GroupMembershipMutation) ResetRole() {
	m.role = nil
}

// SetGroupID sets the "group" edge to the Group entity by id.
func (m *GroupMembershipMutation) SetGroupID(id uuid.UUID) {
	m.group = &id
}

// ClearGroup clears the "group" edge to the Group entity.
func (m *GroupMembershipMutation) ClearGroup() {
	m.clearedgroup = true
}

// GroupCleared reports if the "group" edge to the Group entity was cleared.
func (m *GroupMembershipMutation) GroupCleared() bool {
	return m.clearedgroup
}

// GroupID returns the "group" edge ID in the mutation.
func (m *GroupMembershipMutation) GroupID() (id uuid.UUID, exists bool) {
	if m.group != nil {
		return *m.group, true
	}
	return
}

// GroupIDs returns the "group" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GroupID instead. It exists only for internal usage by the builders.
func (m *GroupMembershipMutation) GroupIDs() (ids []uuid.UUID) {
	if id := m.group; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGroup resets all changes to the "group" edge.
func (m *GroupMembershipMutation) ResetGroup() {
	m.group = nil
	m.clearedgroup = false
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *GroupMembershipMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *GroupMembershipMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *GroupMembershipMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *GroupMembershipMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *GroupMembershipMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *GroupMembershipMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the GroupMembershipMutation builder.
func (m *GroupMembershipMutation) Where(ps ...predicate.GroupMembership) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GroupMembershipMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (GroupMembership).
func (m *GroupMembershipMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupMembershipMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.role != nil {
		fields = append(fields, groupmembership.FieldRole)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupMembershipMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case groupmembership.FieldRole:
		return m.Role()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupMembershipMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case groupmembership.FieldRole:
		return m.OldRole(ctx)
	}
	return nil, fmt.Errorf("unknown GroupMembership field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMembershipMutation) SetField(name string, value ent.Value) error {
	switch name {
	case groupmembership.FieldRole:
		v, ok := value.(enums.Role)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	}
	return fmt.Errorf("unknown GroupMembership field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupMembershipMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupMembershipMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMembershipMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown GroupMembership numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupMembershipMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupMembershipMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupMembershipMutation) ClearField(name string) error {
	return fmt.Errorf("unknown GroupMembership nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupMembershipMutation) ResetField(name string) error {
	switch name {
	case groupmembership.FieldRole:
		m.ResetRole()
		return nil
	}
	return fmt.Errorf("unknown GroupMembership field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupMembershipMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.group != nil {
		edges = append(edges, groupmembership.EdgeGroup)
	}
	if m.user != nil {
		edges = append(edges, groupmembership.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupMembershipMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case groupmembership.EdgeGroup:
		if id := m.group; id != nil {
			return []ent.Value{*id}
		}
	case groupmembership.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupMembershipMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupMembershipMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupMembershipMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedgroup {
		edges = append(edges, groupmembership.EdgeGroup)
	}
	if m.cleareduser {
		edges = append(edges, groupmembership.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupMembershipMutation) EdgeCleared(name string) bool {
	switch name {
	case groupmembership.EdgeGroup:
		return m.clearedgroup
	case groupmembership.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupMembershipMutation) ClearEdge(name string) error {
	switch name {
	case groupmembership.EdgeGroup:
		m.ClearGroup()
		return nil
	case groupmembership.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown GroupMembership unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupMembershipMutation) ResetEdge(name string) error {
	switch name {
	case groupmembership.EdgeGroup:
		m.ResetGroup()
		return nil
	case groupmembership.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown GroupMembership edge %s", name)
}

// GroupMembershipApplicationMutation represents an operation that mutates the GroupMembershipApplication nodes in the graph.
type GroupMembershipApplicationMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	message       *string
	clearedFields map[string]struct{}
	user          map[uuid.UUID]struct{}
	removeduser   map[uuid.UUID]struct{}
	cleareduser   bool
	group         map[uuid.UUID]struct{}
	removedgroup  map[uuid.UUID]struct{}
	clearedgroup  bool
	done          bool
	oldValue      func(context.Context) (*GroupMembershipApplication, error)
	predicates    []predicate.GroupMembershipApplication
}

var _ ent.Mutation = (*GroupMembershipApplicationMutation)(nil)

// groupmembershipapplicationOption allows management of the mutation configuration using functional options.
type groupmembershipapplicationOption func(*GroupMembershipApplicationMutation)

// newGroupMembershipApplicationMutation creates new mutation for the GroupMembershipApplication entity.
func newGroupMembershipApplicationMutation(c config, op Op, opts ...groupmembershipapplicationOption) *GroupMembershipApplicationMutation {
	m := &GroupMembershipApplicationMutation{
		config:        c,
		op:            op,
		typ:           TypeGroupMembershipApplication,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupMembershipApplicationID sets the ID field of the mutation.
func withGroupMembershipApplicationID(id uuid.UUID) groupmembershipapplicationOption {
	return func(m *GroupMembershipApplicationMutation) {
		var (
			err   error
			once  sync.Once
			value *GroupMembershipApplication
		)
		m.oldValue = func(ctx context.Context) (*GroupMembershipApplication, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GroupMembershipApplication.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroupMembershipApplication sets the old GroupMembershipApplication of the mutation.
func withGroupMembershipApplication(node *GroupMembershipApplication) groupmembershipapplicationOption {
	return func(m *GroupMembershipApplicationMutation) {
		m.oldValue = func(context.Context) (*GroupMembershipApplication, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupMembershipApplicationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupMembershipApplicationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GroupMembershipApplication entities.
func (m *GroupMembershipApplicationMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupMembershipApplicationMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GroupMembershipApplicationMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GroupMembershipApplication.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMessage sets the "message" field.
func (m *GroupMembershipApplicationMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *GroupMembershipApplicationMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the GroupMembershipApplication entity.
// If the GroupMembershipApplication object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMembershipApplicationMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ResetMessage resets all changes to the "message" field.
func (m *GroupMembershipApplicationMutation) ResetMessage() {
	m.message = nil
}

// AddUserIDs adds the "user" edge to the User entity by ids.
func (m *GroupMembershipApplicationMutation) AddUserIDs(ids ...uuid.UUID) {
	if m.user == nil {
		m.user = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.user[ids[i]] = struct{}{}
	}
}

// ClearUser clears the "user" edge to the User entity.
func (m *GroupMembershipApplicationMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *GroupMembershipApplicationMutation) UserCleared() bool {
	return m.cleareduser
}

// RemoveUserIDs removes the "user" edge to the User entity by IDs.
func (m *GroupMembershipApplicationMutation) RemoveUserIDs(ids ...uuid.UUID) {
	if m.removeduser == nil {
		m.removeduser = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.user, ids[i])
		m.removeduser[ids[i]] = struct{}{}
	}
}

// RemovedUser returns the removed IDs of the "user" edge to the User entity.
func (m *GroupMembershipApplicationMutation) RemovedUserIDs() (ids []uuid.UUID) {
	for id := range m.removeduser {
		ids = append(ids, id)
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
func (m *GroupMembershipApplicationMutation) UserIDs() (ids []uuid.UUID) {
	for id := range m.user {
		ids = append(ids, id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *GroupMembershipApplicationMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
	m.removeduser = nil
}

// AddGroupIDs adds the "group" edge to the Group entity by ids.
func (m *GroupMembershipApplicationMutation) AddGroupIDs(ids ...uuid.UUID) {
	if m.group == nil {
		m.group = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.group[ids[i]] = struct{}{}
	}
}

// ClearGroup clears the "group" edge to the Group entity.
func (m *GroupMembershipApplicationMutation) ClearGroup() {
	m.clearedgroup = true
}

// GroupCleared reports if the "group" edge to the Group entity was cleared.
func (m *GroupMembershipApplicationMutation) GroupCleared() bool {
	return m.clearedgroup
}

// RemoveGroupIDs removes the "group" edge to the Group entity by IDs.
func (m *GroupMembershipApplicationMutation) RemoveGroupIDs(ids ...uuid.UUID) {
	if m.removedgroup == nil {
		m.removedgroup = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.group, ids[i])
		m.removedgroup[ids[i]] = struct{}{}
	}
}

// RemovedGroup returns the removed IDs of the "group" edge to the Group entity.
func (m *GroupMembershipApplicationMutation) RemovedGroupIDs() (ids []uuid.UUID) {
	for id := range m.removedgroup {
		ids = append(ids, id)
	}
	return
}

// GroupIDs returns the "group" edge IDs in the mutation.
func (m *GroupMembershipApplicationMutation) GroupIDs() (ids []uuid.UUID) {
	for id := range m.group {
		ids = append(ids, id)
	}
	return
}

// ResetGroup resets all changes to the "group" edge.
func (m *GroupMembershipApplicationMutation) ResetGroup() {
	m.group = nil
	m.clearedgroup = false
	m.removedgroup = nil
}

// Where appends a list predicates to the GroupMembershipApplicationMutation builder.
func (m *GroupMembershipApplicationMutation) Where(ps ...predicate.GroupMembershipApplication) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GroupMembershipApplicationMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (GroupMembershipApplication).
func (m *GroupMembershipApplicationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupMembershipApplicationMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.message != nil {
		fields = append(fields, groupmembershipapplication.FieldMessage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupMembershipApplicationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case groupmembershipapplication.FieldMessage:
		return m.Message()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupMembershipApplicationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case groupmembershipapplication.FieldMessage:
		return m.OldMessage(ctx)
	}
	return nil, fmt.Errorf("unknown GroupMembershipApplication field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMembershipApplicationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case groupmembershipapplication.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	}
	return fmt.Errorf("unknown GroupMembershipApplication field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupMembershipApplicationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupMembershipApplicationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMembershipApplicationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown GroupMembershipApplication numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupMembershipApplicationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupMembershipApplicationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupMembershipApplicationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown GroupMembershipApplication nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupMembershipApplicationMutation) ResetField(name string) error {
	switch name {
	case groupmembershipapplication.FieldMessage:
		m.ResetMessage()
		return nil
	}
	return fmt.Errorf("unknown GroupMembershipApplication field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupMembershipApplicationMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, groupmembershipapplication.EdgeUser)
	}
	if m.group != nil {
		edges = append(edges, groupmembershipapplication.EdgeGroup)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupMembershipApplicationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case groupmembershipapplication.EdgeUser:
		ids := make([]ent.Value, 0, len(m.user))
		for id := range m.user {
			ids = append(ids, id)
		}
		return ids
	case groupmembershipapplication.EdgeGroup:
		ids := make([]ent.Value, 0, len(m.group))
		for id := range m.group {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupMembershipApplicationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removeduser != nil {
		edges = append(edges, groupmembershipapplication.EdgeUser)
	}
	if m.removedgroup != nil {
		edges = append(edges, groupmembershipapplication.EdgeGroup)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupMembershipApplicationMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case groupmembershipapplication.EdgeUser:
		ids := make([]ent.Value, 0, len(m.removeduser))
		for id := range m.removeduser {
			ids = append(ids, id)
		}
		return ids
	case groupmembershipapplication.EdgeGroup:
		ids := make([]ent.Value, 0, len(m.removedgroup))
		for id := range m.removedgroup {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupMembershipApplicationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, groupmembershipapplication.EdgeUser)
	}
	if m.clearedgroup {
		edges = append(edges, groupmembershipapplication.EdgeGroup)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupMembershipApplicationMutation) EdgeCleared(name string) bool {
	switch name {
	case groupmembershipapplication.EdgeUser:
		return m.cleareduser
	case groupmembershipapplication.EdgeGroup:
		return m.clearedgroup
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupMembershipApplicationMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown GroupMembershipApplication unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupMembershipApplicationMutation) ResetEdge(name string) error {
	switch name {
	case groupmembershipapplication.EdgeUser:
		m.ResetUser()
		return nil
	case groupmembershipapplication.EdgeGroup:
		m.ResetGroup()
		return nil
	}
	return fmt.Errorf("unknown GroupMembershipApplication edge %s", name)
}

// GroupSettingsMutation represents an operation that mutates the GroupSettings nodes in the graph.
type GroupSettingsMutation struct {
	config
	op                     Op
	typ                    string
	id                     *uuid.UUID
	visibility             *groupsettings.Visibility
	join_policy            *groupsettings.JoinPolicy
	minimum_role_to_invite *enums.Role
	clearedFields          map[string]struct{}
	group                  *uuid.UUID
	clearedgroup           bool
	done                   bool
	oldValue               func(context.Context) (*GroupSettings, error)
	predicates             []predicate.GroupSettings
}

var _ ent.Mutation = (*GroupSettingsMutation)(nil)

// groupsettingsOption allows management of the mutation configuration using functional options.
type groupsettingsOption func(*GroupSettingsMutation)

// newGroupSettingsMutation creates new mutation for the GroupSettings entity.
func newGroupSettingsMutation(c config, op Op, opts ...groupsettingsOption) *GroupSettingsMutation {
	m := &GroupSettingsMutation{
		config:        c,
		op:            op,
		typ:           TypeGroupSettings,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupSettingsID sets the ID field of the mutation.
func withGroupSettingsID(id uuid.UUID) groupsettingsOption {
	return func(m *GroupSettingsMutation) {
		var (
			err   error
			once  sync.Once
			value *GroupSettings
		)
		m.oldValue = func(ctx context.Context) (*GroupSettings, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GroupSettings.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroupSettings sets the old GroupSettings of the mutation.
func withGroupSettings(node *GroupSettings) groupsettingsOption {
	return func(m *GroupSettingsMutation) {
		m.oldValue = func(context.Context) (*GroupSettings, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupSettingsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupSettingsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GroupSettings entities.
func (m *GroupSettingsMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupSettingsMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GroupSettingsMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GroupSettings.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetVisibility sets the "visibility" field.
func (m *GroupSettingsMutation) SetVisibility(gr groupsettings.Visibility) {
	m.visibility = &gr
}

// Visibility returns the value of the "visibility" field in the mutation.
func (m *GroupSettingsMutation) Visibility() (r groupsettings.Visibility, exists bool) {
	v := m.visibility
	if v == nil {
		return
	}
	return *v, true
}

// OldVisibility returns the old "visibility" field's value of the GroupSettings entity.
// If the GroupSettings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupSettingsMutation) OldVisibility(ctx context.Context) (v groupsettings.Visibility, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVisibility is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVisibility requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVisibility: %w", err)
	}
	return oldValue.Visibility, nil
}

// ResetVisibility resets all changes to the "visibility" field.
func (m *GroupSettingsMutation) ResetVisibility() {
	m.visibility = nil
}

// SetJoinPolicy sets the "join_policy" field.
func (m *GroupSettingsMutation) SetJoinPolicy(gp groupsettings.JoinPolicy) {
	m.join_policy = &gp
}

// JoinPolicy returns the value of the "join_policy" field in the mutation.
func (m *GroupSettingsMutation) JoinPolicy() (r groupsettings.JoinPolicy, exists bool) {
	v := m.join_policy
	if v == nil {
		return
	}
	return *v, true
}

// OldJoinPolicy returns the old "join_policy" field's value of the GroupSettings entity.
// If the GroupSettings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupSettingsMutation) OldJoinPolicy(ctx context.Context) (v groupsettings.JoinPolicy, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJoinPolicy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJoinPolicy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJoinPolicy: %w", err)
	}
	return oldValue.JoinPolicy, nil
}

// ResetJoinPolicy resets all changes to the "join_policy" field.
func (m *GroupSettingsMutation) ResetJoinPolicy() {
	m.join_policy = nil
}

// SetMinimumRoleToInvite sets the "minimum_role_to_invite" field.
func (m *GroupSettingsMutation) SetMinimumRoleToInvite(e enums.Role) {
	m.minimum_role_to_invite = &e
}

// MinimumRoleToInvite returns the value of the "minimum_role_to_invite" field in the mutation.
func (m *GroupSettingsMutation) MinimumRoleToInvite() (r enums.Role, exists bool) {
	v := m.minimum_role_to_invite
	if v == nil {
		return
	}
	return *v, true
}

// OldMinimumRoleToInvite returns the old "minimum_role_to_invite" field's value of the GroupSettings entity.
// If the GroupSettings object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupSettingsMutation) OldMinimumRoleToInvite(ctx context.Context) (v *enums.Role, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMinimumRoleToInvite is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMinimumRoleToInvite requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMinimumRoleToInvite: %w", err)
	}
	return oldValue.MinimumRoleToInvite, nil
}

// ClearMinimumRoleToInvite clears the value of the "minimum_role_to_invite" field.
func (m *GroupSettingsMutation) ClearMinimumRoleToInvite() {
	m.minimum_role_to_invite = nil
	m.clearedFields[groupsettings.FieldMinimumRoleToInvite] = struct{}{}
}

// MinimumRoleToInviteCleared returns if the "minimum_role_to_invite" field was cleared in this mutation.
func (m *GroupSettingsMutation) MinimumRoleToInviteCleared() bool {
	_, ok := m.clearedFields[groupsettings.FieldMinimumRoleToInvite]
	return ok
}

// ResetMinimumRoleToInvite resets all changes to the "minimum_role_to_invite" field.
func (m *GroupSettingsMutation) ResetMinimumRoleToInvite() {
	m.minimum_role_to_invite = nil
	delete(m.clearedFields, groupsettings.FieldMinimumRoleToInvite)
}

// SetGroupID sets the "group" edge to the Group entity by id.
func (m *GroupSettingsMutation) SetGroupID(id uuid.UUID) {
	m.group = &id
}

// ClearGroup clears the "group" edge to the Group entity.
func (m *GroupSettingsMutation) ClearGroup() {
	m.clearedgroup = true
}

// GroupCleared reports if the "group" edge to the Group entity was cleared.
func (m *GroupSettingsMutation) GroupCleared() bool {
	return m.clearedgroup
}

// GroupID returns the "group" edge ID in the mutation.
func (m *GroupSettingsMutation) GroupID() (id uuid.UUID, exists bool) {
	if m.group != nil {
		return *m.group, true
	}
	return
}

// GroupIDs returns the "group" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GroupID instead. It exists only for internal usage by the builders.
func (m *GroupSettingsMutation) GroupIDs() (ids []uuid.UUID) {
	if id := m.group; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGroup resets all changes to the "group" edge.
func (m *GroupSettingsMutation) ResetGroup() {
	m.group = nil
	m.clearedgroup = false
}

// Where appends a list predicates to the GroupSettingsMutation builder.
func (m *GroupSettingsMutation) Where(ps ...predicate.GroupSettings) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GroupSettingsMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (GroupSettings).
func (m *GroupSettingsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupSettingsMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.visibility != nil {
		fields = append(fields, groupsettings.FieldVisibility)
	}
	if m.join_policy != nil {
		fields = append(fields, groupsettings.FieldJoinPolicy)
	}
	if m.minimum_role_to_invite != nil {
		fields = append(fields, groupsettings.FieldMinimumRoleToInvite)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupSettingsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case groupsettings.FieldVisibility:
		return m.Visibility()
	case groupsettings.FieldJoinPolicy:
		return m.JoinPolicy()
	case groupsettings.FieldMinimumRoleToInvite:
		return m.MinimumRoleToInvite()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupSettingsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case groupsettings.FieldVisibility:
		return m.OldVisibility(ctx)
	case groupsettings.FieldJoinPolicy:
		return m.OldJoinPolicy(ctx)
	case groupsettings.FieldMinimumRoleToInvite:
		return m.OldMinimumRoleToInvite(ctx)
	}
	return nil, fmt.Errorf("unknown GroupSettings field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupSettingsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case groupsettings.FieldVisibility:
		v, ok := value.(groupsettings.Visibility)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVisibility(v)
		return nil
	case groupsettings.FieldJoinPolicy:
		v, ok := value.(groupsettings.JoinPolicy)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJoinPolicy(v)
		return nil
	case groupsettings.FieldMinimumRoleToInvite:
		v, ok := value.(enums.Role)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMinimumRoleToInvite(v)
		return nil
	}
	return fmt.Errorf("unknown GroupSettings field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupSettingsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupSettingsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupSettingsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown GroupSettings numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupSettingsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(groupsettings.FieldMinimumRoleToInvite) {
		fields = append(fields, groupsettings.FieldMinimumRoleToInvite)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupSettingsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupSettingsMutation) ClearField(name string) error {
	switch name {
	case groupsettings.FieldMinimumRoleToInvite:
		m.ClearMinimumRoleToInvite()
		return nil
	}
	return fmt.Errorf("unknown GroupSettings nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupSettingsMutation) ResetField(name string) error {
	switch name {
	case groupsettings.FieldVisibility:
		m.ResetVisibility()
		return nil
	case groupsettings.FieldJoinPolicy:
		m.ResetJoinPolicy()
		return nil
	case groupsettings.FieldMinimumRoleToInvite:
		m.ResetMinimumRoleToInvite()
		return nil
	}
	return fmt.Errorf("unknown GroupSettings field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupSettingsMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.group != nil {
		edges = append(edges, groupsettings.EdgeGroup)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupSettingsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case groupsettings.EdgeGroup:
		if id := m.group; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupSettingsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupSettingsMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupSettingsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedgroup {
		edges = append(edges, groupsettings.EdgeGroup)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupSettingsMutation) EdgeCleared(name string) bool {
	switch name {
	case groupsettings.EdgeGroup:
		return m.clearedgroup
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupSettingsMutation) ClearEdge(name string) error {
	switch name {
	case groupsettings.EdgeGroup:
		m.ClearGroup()
		return nil
	}
	return fmt.Errorf("unknown GroupSettings unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupSettingsMutation) ResetEdge(name string) error {
	switch name {
	case groupsettings.EdgeGroup:
		m.ResetGroup()
		return nil
	}
	return fmt.Errorf("unknown GroupSettings edge %s", name)
}

// PlayerMutation represents an operation that mutates the Player nodes in the graph.
type PlayerMutation struct {
	config
	op                          Op
	typ                         string
	id                          *uuid.UUID
	name                        *string
	clearedFields               map[string]struct{}
	owner                       *uuid.UUID
	clearedowner                bool
	supervisors                 map[uuid.UUID]struct{}
	removedsupervisors          map[uuid.UUID]struct{}
	clearedsupervisors          bool
	supervision_requests        map[uuid.UUID]struct{}
	removedsupervision_requests map[uuid.UUID]struct{}
	clearedsupervision_requests bool
	done                        bool
	oldValue                    func(context.Context) (*Player, error)
	predicates                  []predicate.Player
}

var _ ent.Mutation = (*PlayerMutation)(nil)

// playerOption allows management of the mutation configuration using functional options.
type playerOption func(*PlayerMutation)

// newPlayerMutation creates new mutation for the Player entity.
func newPlayerMutation(c config, op Op, opts ...playerOption) *PlayerMutation {
	m := &PlayerMutation{
		config:        c,
		op:            op,
		typ:           TypePlayer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPlayerID sets the ID field of the mutation.
func withPlayerID(id uuid.UUID) playerOption {
	return func(m *PlayerMutation) {
		var (
			err   error
			once  sync.Once
			value *Player
		)
		m.oldValue = func(ctx context.Context) (*Player, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Player.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPlayer sets the old Player of the mutation.
func withPlayer(node *Player) playerOption {
	return func(m *PlayerMutation) {
		m.oldValue = func(context.Context) (*Player, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PlayerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PlayerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Player entities.
func (m *PlayerMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PlayerMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PlayerMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Player.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *PlayerMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PlayerMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Player entity.
// If the Player object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlayerMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PlayerMutation) ResetName() {
	m.name = nil
}

// SetOwnerID sets the "owner" edge to the User entity by id.
func (m *PlayerMutation) SetOwnerID(id uuid.UUID) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *PlayerMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *PlayerMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *PlayerMutation) OwnerID() (id uuid.UUID, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *PlayerMutation) OwnerIDs() (ids []uuid.UUID) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *PlayerMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// AddSupervisorIDs adds the "supervisors" edge to the User entity by ids.
func (m *PlayerMutation) AddSupervisorIDs(ids ...uuid.UUID) {
	if m.supervisors == nil {
		m.supervisors = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.supervisors[ids[i]] = struct{}{}
	}
}

// ClearSupervisors clears the "supervisors" edge to the User entity.
func (m *PlayerMutation) ClearSupervisors() {
	m.clearedsupervisors = true
}

// SupervisorsCleared reports if the "supervisors" edge to the User entity was cleared.
func (m *PlayerMutation) SupervisorsCleared() bool {
	return m.clearedsupervisors
}

// RemoveSupervisorIDs removes the "supervisors" edge to the User entity by IDs.
func (m *PlayerMutation) RemoveSupervisorIDs(ids ...uuid.UUID) {
	if m.removedsupervisors == nil {
		m.removedsupervisors = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.supervisors, ids[i])
		m.removedsupervisors[ids[i]] = struct{}{}
	}
}

// RemovedSupervisors returns the removed IDs of the "supervisors" edge to the User entity.
func (m *PlayerMutation) RemovedSupervisorsIDs() (ids []uuid.UUID) {
	for id := range m.removedsupervisors {
		ids = append(ids, id)
	}
	return
}

// SupervisorsIDs returns the "supervisors" edge IDs in the mutation.
func (m *PlayerMutation) SupervisorsIDs() (ids []uuid.UUID) {
	for id := range m.supervisors {
		ids = append(ids, id)
	}
	return
}

// ResetSupervisors resets all changes to the "supervisors" edge.
func (m *PlayerMutation) ResetSupervisors() {
	m.supervisors = nil
	m.clearedsupervisors = false
	m.removedsupervisors = nil
}

// AddSupervisionRequestIDs adds the "supervision_requests" edge to the PlayerSupervisionRequest entity by ids.
func (m *PlayerMutation) AddSupervisionRequestIDs(ids ...uuid.UUID) {
	if m.supervision_requests == nil {
		m.supervision_requests = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.supervision_requests[ids[i]] = struct{}{}
	}
}

// ClearSupervisionRequests clears the "supervision_requests" edge to the PlayerSupervisionRequest entity.
func (m *PlayerMutation) ClearSupervisionRequests() {
	m.clearedsupervision_requests = true
}

// SupervisionRequestsCleared reports if the "supervision_requests" edge to the PlayerSupervisionRequest entity was cleared.
func (m *PlayerMutation) SupervisionRequestsCleared() bool {
	return m.clearedsupervision_requests
}

// RemoveSupervisionRequestIDs removes the "supervision_requests" edge to the PlayerSupervisionRequest entity by IDs.
func (m *PlayerMutation) RemoveSupervisionRequestIDs(ids ...uuid.UUID) {
	if m.removedsupervision_requests == nil {
		m.removedsupervision_requests = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.supervision_requests, ids[i])
		m.removedsupervision_requests[ids[i]] = struct{}{}
	}
}

// RemovedSupervisionRequests returns the removed IDs of the "supervision_requests" edge to the PlayerSupervisionRequest entity.
func (m *PlayerMutation) RemovedSupervisionRequestsIDs() (ids []uuid.UUID) {
	for id := range m.removedsupervision_requests {
		ids = append(ids, id)
	}
	return
}

// SupervisionRequestsIDs returns the "supervision_requests" edge IDs in the mutation.
func (m *PlayerMutation) SupervisionRequestsIDs() (ids []uuid.UUID) {
	for id := range m.supervision_requests {
		ids = append(ids, id)
	}
	return
}

// ResetSupervisionRequests resets all changes to the "supervision_requests" edge.
func (m *PlayerMutation) ResetSupervisionRequests() {
	m.supervision_requests = nil
	m.clearedsupervision_requests = false
	m.removedsupervision_requests = nil
}

// Where appends a list predicates to the PlayerMutation builder.
func (m *PlayerMutation) Where(ps ...predicate.Player) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PlayerMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Player).
func (m *PlayerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PlayerMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, player.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PlayerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case player.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PlayerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case player.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Player field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlayerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case player.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Player field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PlayerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PlayerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlayerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Player numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PlayerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PlayerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PlayerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Player nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PlayerMutation) ResetField(name string) error {
	switch name {
	case player.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Player field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PlayerMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.owner != nil {
		edges = append(edges, player.EdgeOwner)
	}
	if m.supervisors != nil {
		edges = append(edges, player.EdgeSupervisors)
	}
	if m.supervision_requests != nil {
		edges = append(edges, player.EdgeSupervisionRequests)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PlayerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case player.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	case player.EdgeSupervisors:
		ids := make([]ent.Value, 0, len(m.supervisors))
		for id := range m.supervisors {
			ids = append(ids, id)
		}
		return ids
	case player.EdgeSupervisionRequests:
		ids := make([]ent.Value, 0, len(m.supervision_requests))
		for id := range m.supervision_requests {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PlayerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedsupervisors != nil {
		edges = append(edges, player.EdgeSupervisors)
	}
	if m.removedsupervision_requests != nil {
		edges = append(edges, player.EdgeSupervisionRequests)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PlayerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case player.EdgeSupervisors:
		ids := make([]ent.Value, 0, len(m.removedsupervisors))
		for id := range m.removedsupervisors {
			ids = append(ids, id)
		}
		return ids
	case player.EdgeSupervisionRequests:
		ids := make([]ent.Value, 0, len(m.removedsupervision_requests))
		for id := range m.removedsupervision_requests {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PlayerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedowner {
		edges = append(edges, player.EdgeOwner)
	}
	if m.clearedsupervisors {
		edges = append(edges, player.EdgeSupervisors)
	}
	if m.clearedsupervision_requests {
		edges = append(edges, player.EdgeSupervisionRequests)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PlayerMutation) EdgeCleared(name string) bool {
	switch name {
	case player.EdgeOwner:
		return m.clearedowner
	case player.EdgeSupervisors:
		return m.clearedsupervisors
	case player.EdgeSupervisionRequests:
		return m.clearedsupervision_requests
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PlayerMutation) ClearEdge(name string) error {
	switch name {
	case player.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown Player unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PlayerMutation) ResetEdge(name string) error {
	switch name {
	case player.EdgeOwner:
		m.ResetOwner()
		return nil
	case player.EdgeSupervisors:
		m.ResetSupervisors()
		return nil
	case player.EdgeSupervisionRequests:
		m.ResetSupervisionRequests()
		return nil
	}
	return fmt.Errorf("unknown Player edge %s", name)
}

// PlayerSupervisionRequestMutation represents an operation that mutates the PlayerSupervisionRequest nodes in the graph.
type PlayerSupervisionRequestMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	message          *string
	clearedFields    map[string]struct{}
	sender           *uuid.UUID
	clearedsender    bool
	player           *uuid.UUID
	clearedplayer    bool
	approvals        map[uuid.UUID]struct{}
	removedapprovals map[uuid.UUID]struct{}
	clearedapprovals bool
	done             bool
	oldValue         func(context.Context) (*PlayerSupervisionRequest, error)
	predicates       []predicate.PlayerSupervisionRequest
}

var _ ent.Mutation = (*PlayerSupervisionRequestMutation)(nil)

// playersupervisionrequestOption allows management of the mutation configuration using functional options.
type playersupervisionrequestOption func(*PlayerSupervisionRequestMutation)

// newPlayerSupervisionRequestMutation creates new mutation for the PlayerSupervisionRequest entity.
func newPlayerSupervisionRequestMutation(c config, op Op, opts ...playersupervisionrequestOption) *PlayerSupervisionRequestMutation {
	m := &PlayerSupervisionRequestMutation{
		config:        c,
		op:            op,
		typ:           TypePlayerSupervisionRequest,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPlayerSupervisionRequestID sets the ID field of the mutation.
func withPlayerSupervisionRequestID(id uuid.UUID) playersupervisionrequestOption {
	return func(m *PlayerSupervisionRequestMutation) {
		var (
			err   error
			once  sync.Once
			value *PlayerSupervisionRequest
		)
		m.oldValue = func(ctx context.Context) (*PlayerSupervisionRequest, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PlayerSupervisionRequest.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPlayerSupervisionRequest sets the old PlayerSupervisionRequest of the mutation.
func withPlayerSupervisionRequest(node *PlayerSupervisionRequest) playersupervisionrequestOption {
	return func(m *PlayerSupervisionRequestMutation) {
		m.oldValue = func(context.Context) (*PlayerSupervisionRequest, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PlayerSupervisionRequestMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PlayerSupervisionRequestMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PlayerSupervisionRequest entities.
func (m *PlayerSupervisionRequestMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PlayerSupervisionRequestMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PlayerSupervisionRequestMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PlayerSupervisionRequest.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMessage sets the "message" field.
func (m *PlayerSupervisionRequestMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *PlayerSupervisionRequestMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the PlayerSupervisionRequest entity.
// If the PlayerSupervisionRequest object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlayerSupervisionRequestMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ClearMessage clears the value of the "message" field.
func (m *PlayerSupervisionRequestMutation) ClearMessage() {
	m.message = nil
	m.clearedFields[playersupervisionrequest.FieldMessage] = struct{}{}
}

// MessageCleared returns if the "message" field was cleared in this mutation.
func (m *PlayerSupervisionRequestMutation) MessageCleared() bool {
	_, ok := m.clearedFields[playersupervisionrequest.FieldMessage]
	return ok
}

// ResetMessage resets all changes to the "message" field.
func (m *PlayerSupervisionRequestMutation) ResetMessage() {
	m.message = nil
	delete(m.clearedFields, playersupervisionrequest.FieldMessage)
}

// SetSenderID sets the "sender" edge to the User entity by id.
func (m *PlayerSupervisionRequestMutation) SetSenderID(id uuid.UUID) {
	m.sender = &id
}

// ClearSender clears the "sender" edge to the User entity.
func (m *PlayerSupervisionRequestMutation) ClearSender() {
	m.clearedsender = true
}

// SenderCleared reports if the "sender" edge to the User entity was cleared.
func (m *PlayerSupervisionRequestMutation) SenderCleared() bool {
	return m.clearedsender
}

// SenderID returns the "sender" edge ID in the mutation.
func (m *PlayerSupervisionRequestMutation) SenderID() (id uuid.UUID, exists bool) {
	if m.sender != nil {
		return *m.sender, true
	}
	return
}

// SenderIDs returns the "sender" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SenderID instead. It exists only for internal usage by the builders.
func (m *PlayerSupervisionRequestMutation) SenderIDs() (ids []uuid.UUID) {
	if id := m.sender; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSender resets all changes to the "sender" edge.
func (m *PlayerSupervisionRequestMutation) ResetSender() {
	m.sender = nil
	m.clearedsender = false
}

// SetPlayerID sets the "player" edge to the Player entity by id.
func (m *PlayerSupervisionRequestMutation) SetPlayerID(id uuid.UUID) {
	m.player = &id
}

// ClearPlayer clears the "player" edge to the Player entity.
func (m *PlayerSupervisionRequestMutation) ClearPlayer() {
	m.clearedplayer = true
}

// PlayerCleared reports if the "player" edge to the Player entity was cleared.
func (m *PlayerSupervisionRequestMutation) PlayerCleared() bool {
	return m.clearedplayer
}

// PlayerID returns the "player" edge ID in the mutation.
func (m *PlayerSupervisionRequestMutation) PlayerID() (id uuid.UUID, exists bool) {
	if m.player != nil {
		return *m.player, true
	}
	return
}

// PlayerIDs returns the "player" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PlayerID instead. It exists only for internal usage by the builders.
func (m *PlayerSupervisionRequestMutation) PlayerIDs() (ids []uuid.UUID) {
	if id := m.player; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPlayer resets all changes to the "player" edge.
func (m *PlayerSupervisionRequestMutation) ResetPlayer() {
	m.player = nil
	m.clearedplayer = false
}

// AddApprovalIDs adds the "approvals" edge to the PlayerSupervisionRequestApproval entity by ids.
func (m *PlayerSupervisionRequestMutation) AddApprovalIDs(ids ...uuid.UUID) {
	if m.approvals == nil {
		m.approvals = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.approvals[ids[i]] = struct{}{}
	}
}

// ClearApprovals clears the "approvals" edge to the PlayerSupervisionRequestApproval entity.
func (m *PlayerSupervisionRequestMutation) ClearApprovals() {
	m.clearedapprovals = true
}

// ApprovalsCleared reports if the "approvals" edge to the PlayerSupervisionRequestApproval entity was cleared.
func (m *PlayerSupervisionRequestMutation) ApprovalsCleared() bool {
	return m.clearedapprovals
}

// RemoveApprovalIDs removes the "approvals" edge to the PlayerSupervisionRequestApproval entity by IDs.
func (m *PlayerSupervisionRequestMutation) RemoveApprovalIDs(ids ...uuid.UUID) {
	if m.removedapprovals == nil {
		m.removedapprovals = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.approvals, ids[i])
		m.removedapprovals[ids[i]] = struct{}{}
	}
}

// RemovedApprovals returns the removed IDs of the "approvals" edge to the PlayerSupervisionRequestApproval entity.
func (m *PlayerSupervisionRequestMutation) RemovedApprovalsIDs() (ids []uuid.UUID) {
	for id := range m.removedapprovals {
		ids = append(ids, id)
	}
	return
}

// ApprovalsIDs returns the "approvals" edge IDs in the mutation.
func (m *PlayerSupervisionRequestMutation) ApprovalsIDs() (ids []uuid.UUID) {
	for id := range m.approvals {
		ids = append(ids, id)
	}
	return
}

// ResetApprovals resets all changes to the "approvals" edge.
func (m *PlayerSupervisionRequestMutation) ResetApprovals() {
	m.approvals = nil
	m.clearedapprovals = false
	m.removedapprovals = nil
}

// Where appends a list predicates to the PlayerSupervisionRequestMutation builder.
func (m *PlayerSupervisionRequestMutation) Where(ps ...predicate.PlayerSupervisionRequest) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PlayerSupervisionRequestMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (PlayerSupervisionRequest).
func (m *PlayerSupervisionRequestMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PlayerSupervisionRequestMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.message != nil {
		fields = append(fields, playersupervisionrequest.FieldMessage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PlayerSupervisionRequestMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case playersupervisionrequest.FieldMessage:
		return m.Message()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PlayerSupervisionRequestMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case playersupervisionrequest.FieldMessage:
		return m.OldMessage(ctx)
	}
	return nil, fmt.Errorf("unknown PlayerSupervisionRequest field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlayerSupervisionRequestMutation) SetField(name string, value ent.Value) error {
	switch name {
	case playersupervisionrequest.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	}
	return fmt.Errorf("unknown PlayerSupervisionRequest field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PlayerSupervisionRequestMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PlayerSupervisionRequestMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlayerSupervisionRequestMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PlayerSupervisionRequest numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PlayerSupervisionRequestMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(playersupervisionrequest.FieldMessage) {
		fields = append(fields, playersupervisionrequest.FieldMessage)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PlayerSupervisionRequestMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PlayerSupervisionRequestMutation) ClearField(name string) error {
	switch name {
	case playersupervisionrequest.FieldMessage:
		m.ClearMessage()
		return nil
	}
	return fmt.Errorf("unknown PlayerSupervisionRequest nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PlayerSupervisionRequestMutation) ResetField(name string) error {
	switch name {
	case playersupervisionrequest.FieldMessage:
		m.ResetMessage()
		return nil
	}
	return fmt.Errorf("unknown PlayerSupervisionRequest field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PlayerSupervisionRequestMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.sender != nil {
		edges = append(edges, playersupervisionrequest.EdgeSender)
	}
	if m.player != nil {
		edges = append(edges, playersupervisionrequest.EdgePlayer)
	}
	if m.approvals != nil {
		edges = append(edges, playersupervisionrequest.EdgeApprovals)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PlayerSupervisionRequestMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case playersupervisionrequest.EdgeSender:
		if id := m.sender; id != nil {
			return []ent.Value{*id}
		}
	case playersupervisionrequest.EdgePlayer:
		if id := m.player; id != nil {
			return []ent.Value{*id}
		}
	case playersupervisionrequest.EdgeApprovals:
		ids := make([]ent.Value, 0, len(m.approvals))
		for id := range m.approvals {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PlayerSupervisionRequestMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedapprovals != nil {
		edges = append(edges, playersupervisionrequest.EdgeApprovals)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PlayerSupervisionRequestMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case playersupervisionrequest.EdgeApprovals:
		ids := make([]ent.Value, 0, len(m.removedapprovals))
		for id := range m.removedapprovals {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PlayerSupervisionRequestMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedsender {
		edges = append(edges, playersupervisionrequest.EdgeSender)
	}
	if m.clearedplayer {
		edges = append(edges, playersupervisionrequest.EdgePlayer)
	}
	if m.clearedapprovals {
		edges = append(edges, playersupervisionrequest.EdgeApprovals)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PlayerSupervisionRequestMutation) EdgeCleared(name string) bool {
	switch name {
	case playersupervisionrequest.EdgeSender:
		return m.clearedsender
	case playersupervisionrequest.EdgePlayer:
		return m.clearedplayer
	case playersupervisionrequest.EdgeApprovals:
		return m.clearedapprovals
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PlayerSupervisionRequestMutation) ClearEdge(name string) error {
	switch name {
	case playersupervisionrequest.EdgeSender:
		m.ClearSender()
		return nil
	case playersupervisionrequest.EdgePlayer:
		m.ClearPlayer()
		return nil
	}
	return fmt.Errorf("unknown PlayerSupervisionRequest unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PlayerSupervisionRequestMutation) ResetEdge(name string) error {
	switch name {
	case playersupervisionrequest.EdgeSender:
		m.ResetSender()
		return nil
	case playersupervisionrequest.EdgePlayer:
		m.ResetPlayer()
		return nil
	case playersupervisionrequest.EdgeApprovals:
		m.ResetApprovals()
		return nil
	}
	return fmt.Errorf("unknown PlayerSupervisionRequest edge %s", name)
}

// PlayerSupervisionRequestApprovalMutation represents an operation that mutates the PlayerSupervisionRequestApproval nodes in the graph.
type PlayerSupervisionRequestApprovalMutation struct {
	config
	op                         Op
	typ                        string
	id                         *uuid.UUID
	approved                   *bool
	clearedFields              map[string]struct{}
	approver                   *uuid.UUID
	clearedapprover            bool
	supervision_request        *uuid.UUID
	clearedsupervision_request bool
	done                       bool
	oldValue                   func(context.Context) (*PlayerSupervisionRequestApproval, error)
	predicates                 []predicate.PlayerSupervisionRequestApproval
}

var _ ent.Mutation = (*PlayerSupervisionRequestApprovalMutation)(nil)

// playersupervisionrequestapprovalOption allows management of the mutation configuration using functional options.
type playersupervisionrequestapprovalOption func(*PlayerSupervisionRequestApprovalMutation)

// newPlayerSupervisionRequestApprovalMutation creates new mutation for the PlayerSupervisionRequestApproval entity.
func newPlayerSupervisionRequestApprovalMutation(c config, op Op, opts ...playersupervisionrequestapprovalOption) *PlayerSupervisionRequestApprovalMutation {
	m := &PlayerSupervisionRequestApprovalMutation{
		config:        c,
		op:            op,
		typ:           TypePlayerSupervisionRequestApproval,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPlayerSupervisionRequestApprovalID sets the ID field of the mutation.
func withPlayerSupervisionRequestApprovalID(id uuid.UUID) playersupervisionrequestapprovalOption {
	return func(m *PlayerSupervisionRequestApprovalMutation) {
		var (
			err   error
			once  sync.Once
			value *PlayerSupervisionRequestApproval
		)
		m.oldValue = func(ctx context.Context) (*PlayerSupervisionRequestApproval, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PlayerSupervisionRequestApproval.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPlayerSupervisionRequestApproval sets the old PlayerSupervisionRequestApproval of the mutation.
func withPlayerSupervisionRequestApproval(node *PlayerSupervisionRequestApproval) playersupervisionrequestapprovalOption {
	return func(m *PlayerSupervisionRequestApprovalMutation) {
		m.oldValue = func(context.Context) (*PlayerSupervisionRequestApproval, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PlayerSupervisionRequestApprovalMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PlayerSupervisionRequestApprovalMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PlayerSupervisionRequestApproval entities.
func (m *PlayerSupervisionRequestApprovalMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PlayerSupervisionRequestApprovalMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PlayerSupervisionRequestApprovalMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PlayerSupervisionRequestApproval.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetApproved sets the "approved" field.
func (m *PlayerSupervisionRequestApprovalMutation) SetApproved(b bool) {
	m.approved = &b
}

// Approved returns the value of the "approved" field in the mutation.
func (m *PlayerSupervisionRequestApprovalMutation) Approved() (r bool, exists bool) {
	v := m.approved
	if v == nil {
		return
	}
	return *v, true
}

// OldApproved returns the old "approved" field's value of the PlayerSupervisionRequestApproval entity.
// If the PlayerSupervisionRequestApproval object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlayerSupervisionRequestApprovalMutation) OldApproved(ctx context.Context) (v *bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldApproved is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldApproved requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldApproved: %w", err)
	}
	return oldValue.Approved, nil
}

// ClearApproved clears the value of the "approved" field.
func (m *PlayerSupervisionRequestApprovalMutation) ClearApproved() {
	m.approved = nil
	m.clearedFields[playersupervisionrequestapproval.FieldApproved] = struct{}{}
}

// ApprovedCleared returns if the "approved" field was cleared in this mutation.
func (m *PlayerSupervisionRequestApprovalMutation) ApprovedCleared() bool {
	_, ok := m.clearedFields[playersupervisionrequestapproval.FieldApproved]
	return ok
}

// ResetApproved resets all changes to the "approved" field.
func (m *PlayerSupervisionRequestApprovalMutation) ResetApproved() {
	m.approved = nil
	delete(m.clearedFields, playersupervisionrequestapproval.FieldApproved)
}

// SetApproverID sets the "approver" edge to the User entity by id.
func (m *PlayerSupervisionRequestApprovalMutation) SetApproverID(id uuid.UUID) {
	m.approver = &id
}

// ClearApprover clears the "approver" edge to the User entity.
func (m *PlayerSupervisionRequestApprovalMutation) ClearApprover() {
	m.clearedapprover = true
}

// ApproverCleared reports if the "approver" edge to the User entity was cleared.
func (m *PlayerSupervisionRequestApprovalMutation) ApproverCleared() bool {
	return m.clearedapprover
}

// ApproverID returns the "approver" edge ID in the mutation.
func (m *PlayerSupervisionRequestApprovalMutation) ApproverID() (id uuid.UUID, exists bool) {
	if m.approver != nil {
		return *m.approver, true
	}
	return
}

// ApproverIDs returns the "approver" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ApproverID instead. It exists only for internal usage by the builders.
func (m *PlayerSupervisionRequestApprovalMutation) ApproverIDs() (ids []uuid.UUID) {
	if id := m.approver; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetApprover resets all changes to the "approver" edge.
func (m *PlayerSupervisionRequestApprovalMutation) ResetApprover() {
	m.approver = nil
	m.clearedapprover = false
}

// SetSupervisionRequestID sets the "supervision_request" edge to the PlayerSupervisionRequest entity by id.
func (m *PlayerSupervisionRequestApprovalMutation) SetSupervisionRequestID(id uuid.UUID) {
	m.supervision_request = &id
}

// ClearSupervisionRequest clears the "supervision_request" edge to the PlayerSupervisionRequest entity.
func (m *PlayerSupervisionRequestApprovalMutation) ClearSupervisionRequest() {
	m.clearedsupervision_request = true
}

// SupervisionRequestCleared reports if the "supervision_request" edge to the PlayerSupervisionRequest entity was cleared.
func (m *PlayerSupervisionRequestApprovalMutation) SupervisionRequestCleared() bool {
	return m.clearedsupervision_request
}

// SupervisionRequestID returns the "supervision_request" edge ID in the mutation.
func (m *PlayerSupervisionRequestApprovalMutation) SupervisionRequestID() (id uuid.UUID, exists bool) {
	if m.supervision_request != nil {
		return *m.supervision_request, true
	}
	return
}

// SupervisionRequestIDs returns the "supervision_request" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SupervisionRequestID instead. It exists only for internal usage by the builders.
func (m *PlayerSupervisionRequestApprovalMutation) SupervisionRequestIDs() (ids []uuid.UUID) {
	if id := m.supervision_request; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSupervisionRequest resets all changes to the "supervision_request" edge.
func (m *PlayerSupervisionRequestApprovalMutation) ResetSupervisionRequest() {
	m.supervision_request = nil
	m.clearedsupervision_request = false
}

// Where appends a list predicates to the PlayerSupervisionRequestApprovalMutation builder.
func (m *PlayerSupervisionRequestApprovalMutation) Where(ps ...predicate.PlayerSupervisionRequestApproval) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PlayerSupervisionRequestApprovalMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (PlayerSupervisionRequestApproval).
func (m *PlayerSupervisionRequestApprovalMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PlayerSupervisionRequestApprovalMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.approved != nil {
		fields = append(fields, playersupervisionrequestapproval.FieldApproved)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PlayerSupervisionRequestApprovalMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case playersupervisionrequestapproval.FieldApproved:
		return m.Approved()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PlayerSupervisionRequestApprovalMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case playersupervisionrequestapproval.FieldApproved:
		return m.OldApproved(ctx)
	}
	return nil, fmt.Errorf("unknown PlayerSupervisionRequestApproval field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlayerSupervisionRequestApprovalMutation) SetField(name string, value ent.Value) error {
	switch name {
	case playersupervisionrequestapproval.FieldApproved:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetApproved(v)
		return nil
	}
	return fmt.Errorf("unknown PlayerSupervisionRequestApproval field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PlayerSupervisionRequestApprovalMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PlayerSupervisionRequestApprovalMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlayerSupervisionRequestApprovalMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PlayerSupervisionRequestApproval numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PlayerSupervisionRequestApprovalMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(playersupervisionrequestapproval.FieldApproved) {
		fields = append(fields, playersupervisionrequestapproval.FieldApproved)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PlayerSupervisionRequestApprovalMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PlayerSupervisionRequestApprovalMutation) ClearField(name string) error {
	switch name {
	case playersupervisionrequestapproval.FieldApproved:
		m.ClearApproved()
		return nil
	}
	return fmt.Errorf("unknown PlayerSupervisionRequestApproval nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PlayerSupervisionRequestApprovalMutation) ResetField(name string) error {
	switch name {
	case playersupervisionrequestapproval.FieldApproved:
		m.ResetApproved()
		return nil
	}
	return fmt.Errorf("unknown PlayerSupervisionRequestApproval field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PlayerSupervisionRequestApprovalMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.approver != nil {
		edges = append(edges, playersupervisionrequestapproval.EdgeApprover)
	}
	if m.supervision_request != nil {
		edges = append(edges, playersupervisionrequestapproval.EdgeSupervisionRequest)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PlayerSupervisionRequestApprovalMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case playersupervisionrequestapproval.EdgeApprover:
		if id := m.approver; id != nil {
			return []ent.Value{*id}
		}
	case playersupervisionrequestapproval.EdgeSupervisionRequest:
		if id := m.supervision_request; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PlayerSupervisionRequestApprovalMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PlayerSupervisionRequestApprovalMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PlayerSupervisionRequestApprovalMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedapprover {
		edges = append(edges, playersupervisionrequestapproval.EdgeApprover)
	}
	if m.clearedsupervision_request {
		edges = append(edges, playersupervisionrequestapproval.EdgeSupervisionRequest)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PlayerSupervisionRequestApprovalMutation) EdgeCleared(name string) bool {
	switch name {
	case playersupervisionrequestapproval.EdgeApprover:
		return m.clearedapprover
	case playersupervisionrequestapproval.EdgeSupervisionRequest:
		return m.clearedsupervision_request
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PlayerSupervisionRequestApprovalMutation) ClearEdge(name string) error {
	switch name {
	case playersupervisionrequestapproval.EdgeApprover:
		m.ClearApprover()
		return nil
	case playersupervisionrequestapproval.EdgeSupervisionRequest:
		m.ClearSupervisionRequest()
		return nil
	}
	return fmt.Errorf("unknown PlayerSupervisionRequestApproval unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PlayerSupervisionRequestApprovalMutation) ResetEdge(name string) error {
	switch name {
	case playersupervisionrequestapproval.EdgeApprover:
		m.ResetApprover()
		return nil
	case playersupervisionrequestapproval.EdgeSupervisionRequest:
		m.ResetSupervisionRequest()
		return nil
	}
	return fmt.Errorf("unknown PlayerSupervisionRequestApproval edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                                   Op
	typ                                  string
	id                                   *uuid.UUID
	name                                 *string
	email                                *string
	password                             *string
	avatar_url                           *string
	clearedFields                        map[string]struct{}
	players                              map[uuid.UUID]struct{}
	removedplayers                       map[uuid.UUID]struct{}
	clearedplayers                       bool
	main_player                          *uuid.UUID
	clearedmain_player                   bool
	sent_supervision_requests            map[uuid.UUID]struct{}
	removedsent_supervision_requests     map[uuid.UUID]struct{}
	clearedsent_supervision_requests     bool
	supervision_request_approvals        map[uuid.UUID]struct{}
	removedsupervision_request_approvals map[uuid.UUID]struct{}
	clearedsupervision_request_approvals bool
	group_memberships                    map[uuid.UUID]struct{}
	removedgroup_memberships             map[uuid.UUID]struct{}
	clearedgroup_memberships             bool
	group_membership_applications        map[uuid.UUID]struct{}
	removedgroup_membership_applications map[uuid.UUID]struct{}
	clearedgroup_membership_applications bool
	done                                 bool
	oldValue                             func(context.Context) (*User, error)
	predicates                           []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetAvatarURL sets the "avatar_url" field.
func (m *UserMutation) SetAvatarURL(s string) {
	m.avatar_url = &s
}

// AvatarURL returns the value of the "avatar_url" field in the mutation.
func (m *UserMutation) AvatarURL() (r string, exists bool) {
	v := m.avatar_url
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatarURL returns the old "avatar_url" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAvatarURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatarURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatarURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatarURL: %w", err)
	}
	return oldValue.AvatarURL, nil
}

// ResetAvatarURL resets all changes to the "avatar_url" field.
func (m *UserMutation) ResetAvatarURL() {
	m.avatar_url = nil
}

// AddPlayerIDs adds the "players" edge to the Player entity by ids.
func (m *UserMutation) AddPlayerIDs(ids ...uuid.UUID) {
	if m.players == nil {
		m.players = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.players[ids[i]] = struct{}{}
	}
}

// ClearPlayers clears the "players" edge to the Player entity.
func (m *UserMutation) ClearPlayers() {
	m.clearedplayers = true
}

// PlayersCleared reports if the "players" edge to the Player entity was cleared.
func (m *UserMutation) PlayersCleared() bool {
	return m.clearedplayers
}

// RemovePlayerIDs removes the "players" edge to the Player entity by IDs.
func (m *UserMutation) RemovePlayerIDs(ids ...uuid.UUID) {
	if m.removedplayers == nil {
		m.removedplayers = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.players, ids[i])
		m.removedplayers[ids[i]] = struct{}{}
	}
}

// RemovedPlayers returns the removed IDs of the "players" edge to the Player entity.
func (m *UserMutation) RemovedPlayersIDs() (ids []uuid.UUID) {
	for id := range m.removedplayers {
		ids = append(ids, id)
	}
	return
}

// PlayersIDs returns the "players" edge IDs in the mutation.
func (m *UserMutation) PlayersIDs() (ids []uuid.UUID) {
	for id := range m.players {
		ids = append(ids, id)
	}
	return
}

// ResetPlayers resets all changes to the "players" edge.
func (m *UserMutation) ResetPlayers() {
	m.players = nil
	m.clearedplayers = false
	m.removedplayers = nil
}

// SetMainPlayerID sets the "main_player" edge to the Player entity by id.
func (m *UserMutation) SetMainPlayerID(id uuid.UUID) {
	m.main_player = &id
}

// ClearMainPlayer clears the "main_player" edge to the Player entity.
func (m *UserMutation) ClearMainPlayer() {
	m.clearedmain_player = true
}

// MainPlayerCleared reports if the "main_player" edge to the Player entity was cleared.
func (m *UserMutation) MainPlayerCleared() bool {
	return m.clearedmain_player
}

// MainPlayerID returns the "main_player" edge ID in the mutation.
func (m *UserMutation) MainPlayerID() (id uuid.UUID, exists bool) {
	if m.main_player != nil {
		return *m.main_player, true
	}
	return
}

// MainPlayerIDs returns the "main_player" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MainPlayerID instead. It exists only for internal usage by the builders.
func (m *UserMutation) MainPlayerIDs() (ids []uuid.UUID) {
	if id := m.main_player; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMainPlayer resets all changes to the "main_player" edge.
func (m *UserMutation) ResetMainPlayer() {
	m.main_player = nil
	m.clearedmain_player = false
}

// AddSentSupervisionRequestIDs adds the "sent_supervision_requests" edge to the PlayerSupervisionRequest entity by ids.
func (m *UserMutation) AddSentSupervisionRequestIDs(ids ...uuid.UUID) {
	if m.sent_supervision_requests == nil {
		m.sent_supervision_requests = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.sent_supervision_requests[ids[i]] = struct{}{}
	}
}

// ClearSentSupervisionRequests clears the "sent_supervision_requests" edge to the PlayerSupervisionRequest entity.
func (m *UserMutation) ClearSentSupervisionRequests() {
	m.clearedsent_supervision_requests = true
}

// SentSupervisionRequestsCleared reports if the "sent_supervision_requests" edge to the PlayerSupervisionRequest entity was cleared.
func (m *UserMutation) SentSupervisionRequestsCleared() bool {
	return m.clearedsent_supervision_requests
}

// RemoveSentSupervisionRequestIDs removes the "sent_supervision_requests" edge to the PlayerSupervisionRequest entity by IDs.
func (m *UserMutation) RemoveSentSupervisionRequestIDs(ids ...uuid.UUID) {
	if m.removedsent_supervision_requests == nil {
		m.removedsent_supervision_requests = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.sent_supervision_requests, ids[i])
		m.removedsent_supervision_requests[ids[i]] = struct{}{}
	}
}

// RemovedSentSupervisionRequests returns the removed IDs of the "sent_supervision_requests" edge to the PlayerSupervisionRequest entity.
func (m *UserMutation) RemovedSentSupervisionRequestsIDs() (ids []uuid.UUID) {
	for id := range m.removedsent_supervision_requests {
		ids = append(ids, id)
	}
	return
}

// SentSupervisionRequestsIDs returns the "sent_supervision_requests" edge IDs in the mutation.
func (m *UserMutation) SentSupervisionRequestsIDs() (ids []uuid.UUID) {
	for id := range m.sent_supervision_requests {
		ids = append(ids, id)
	}
	return
}

// ResetSentSupervisionRequests resets all changes to the "sent_supervision_requests" edge.
func (m *UserMutation) ResetSentSupervisionRequests() {
	m.sent_supervision_requests = nil
	m.clearedsent_supervision_requests = false
	m.removedsent_supervision_requests = nil
}

// AddSupervisionRequestApprovalIDs adds the "supervision_request_approvals" edge to the PlayerSupervisionRequestApproval entity by ids.
func (m *UserMutation) AddSupervisionRequestApprovalIDs(ids ...uuid.UUID) {
	if m.supervision_request_approvals == nil {
		m.supervision_request_approvals = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.supervision_request_approvals[ids[i]] = struct{}{}
	}
}

// ClearSupervisionRequestApprovals clears the "supervision_request_approvals" edge to the PlayerSupervisionRequestApproval entity.
func (m *UserMutation) ClearSupervisionRequestApprovals() {
	m.clearedsupervision_request_approvals = true
}

// SupervisionRequestApprovalsCleared reports if the "supervision_request_approvals" edge to the PlayerSupervisionRequestApproval entity was cleared.
func (m *UserMutation) SupervisionRequestApprovalsCleared() bool {
	return m.clearedsupervision_request_approvals
}

// RemoveSupervisionRequestApprovalIDs removes the "supervision_request_approvals" edge to the PlayerSupervisionRequestApproval entity by IDs.
func (m *UserMutation) RemoveSupervisionRequestApprovalIDs(ids ...uuid.UUID) {
	if m.removedsupervision_request_approvals == nil {
		m.removedsupervision_request_approvals = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.supervision_request_approvals, ids[i])
		m.removedsupervision_request_approvals[ids[i]] = struct{}{}
	}
}

// RemovedSupervisionRequestApprovals returns the removed IDs of the "supervision_request_approvals" edge to the PlayerSupervisionRequestApproval entity.
func (m *UserMutation) RemovedSupervisionRequestApprovalsIDs() (ids []uuid.UUID) {
	for id := range m.removedsupervision_request_approvals {
		ids = append(ids, id)
	}
	return
}

// SupervisionRequestApprovalsIDs returns the "supervision_request_approvals" edge IDs in the mutation.
func (m *UserMutation) SupervisionRequestApprovalsIDs() (ids []uuid.UUID) {
	for id := range m.supervision_request_approvals {
		ids = append(ids, id)
	}
	return
}

// ResetSupervisionRequestApprovals resets all changes to the "supervision_request_approvals" edge.
func (m *UserMutation) ResetSupervisionRequestApprovals() {
	m.supervision_request_approvals = nil
	m.clearedsupervision_request_approvals = false
	m.removedsupervision_request_approvals = nil
}

// AddGroupMembershipIDs adds the "group_memberships" edge to the GroupMembership entity by ids.
func (m *UserMutation) AddGroupMembershipIDs(ids ...uuid.UUID) {
	if m.group_memberships == nil {
		m.group_memberships = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.group_memberships[ids[i]] = struct{}{}
	}
}

// ClearGroupMemberships clears the "group_memberships" edge to the GroupMembership entity.
func (m *UserMutation) ClearGroupMemberships() {
	m.clearedgroup_memberships = true
}

// GroupMembershipsCleared reports if the "group_memberships" edge to the GroupMembership entity was cleared.
func (m *UserMutation) GroupMembershipsCleared() bool {
	return m.clearedgroup_memberships
}

// RemoveGroupMembershipIDs removes the "group_memberships" edge to the GroupMembership entity by IDs.
func (m *UserMutation) RemoveGroupMembershipIDs(ids ...uuid.UUID) {
	if m.removedgroup_memberships == nil {
		m.removedgroup_memberships = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.group_memberships, ids[i])
		m.removedgroup_memberships[ids[i]] = struct{}{}
	}
}

// RemovedGroupMemberships returns the removed IDs of the "group_memberships" edge to the GroupMembership entity.
func (m *UserMutation) RemovedGroupMembershipsIDs() (ids []uuid.UUID) {
	for id := range m.removedgroup_memberships {
		ids = append(ids, id)
	}
	return
}

// GroupMembershipsIDs returns the "group_memberships" edge IDs in the mutation.
func (m *UserMutation) GroupMembershipsIDs() (ids []uuid.UUID) {
	for id := range m.group_memberships {
		ids = append(ids, id)
	}
	return
}

// ResetGroupMemberships resets all changes to the "group_memberships" edge.
func (m *UserMutation) ResetGroupMemberships() {
	m.group_memberships = nil
	m.clearedgroup_memberships = false
	m.removedgroup_memberships = nil
}

// AddGroupMembershipApplicationIDs adds the "group_membership_applications" edge to the GroupMembershipApplication entity by ids.
func (m *UserMutation) AddGroupMembershipApplicationIDs(ids ...uuid.UUID) {
	if m.group_membership_applications == nil {
		m.group_membership_applications = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.group_membership_applications[ids[i]] = struct{}{}
	}
}

// ClearGroupMembershipApplications clears the "group_membership_applications" edge to the GroupMembershipApplication entity.
func (m *UserMutation) ClearGroupMembershipApplications() {
	m.clearedgroup_membership_applications = true
}

// GroupMembershipApplicationsCleared reports if the "group_membership_applications" edge to the GroupMembershipApplication entity was cleared.
func (m *UserMutation) GroupMembershipApplicationsCleared() bool {
	return m.clearedgroup_membership_applications
}

// RemoveGroupMembershipApplicationIDs removes the "group_membership_applications" edge to the GroupMembershipApplication entity by IDs.
func (m *UserMutation) RemoveGroupMembershipApplicationIDs(ids ...uuid.UUID) {
	if m.removedgroup_membership_applications == nil {
		m.removedgroup_membership_applications = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.group_membership_applications, ids[i])
		m.removedgroup_membership_applications[ids[i]] = struct{}{}
	}
}

// RemovedGroupMembershipApplications returns the removed IDs of the "group_membership_applications" edge to the GroupMembershipApplication entity.
func (m *UserMutation) RemovedGroupMembershipApplicationsIDs() (ids []uuid.UUID) {
	for id := range m.removedgroup_membership_applications {
		ids = append(ids, id)
	}
	return
}

// GroupMembershipApplicationsIDs returns the "group_membership_applications" edge IDs in the mutation.
func (m *UserMutation) GroupMembershipApplicationsIDs() (ids []uuid.UUID) {
	for id := range m.group_membership_applications {
		ids = append(ids, id)
	}
	return
}

// ResetGroupMembershipApplications resets all changes to the "group_membership_applications" edge.
func (m *UserMutation) ResetGroupMembershipApplications() {
	m.group_membership_applications = nil
	m.clearedgroup_membership_applications = false
	m.removedgroup_membership_applications = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.avatar_url != nil {
		fields = append(fields, user.FieldAvatarURL)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	case user.FieldAvatarURL:
		return m.AvatarURL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldAvatarURL:
		return m.OldAvatarURL(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldAvatarURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatarURL(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldAvatarURL:
		m.ResetAvatarURL()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 6)
	if m.players != nil {
		edges = append(edges, user.EdgePlayers)
	}
	if m.main_player != nil {
		edges = append(edges, user.EdgeMainPlayer)
	}
	if m.sent_supervision_requests != nil {
		edges = append(edges, user.EdgeSentSupervisionRequests)
	}
	if m.supervision_request_approvals != nil {
		edges = append(edges, user.EdgeSupervisionRequestApprovals)
	}
	if m.group_memberships != nil {
		edges = append(edges, user.EdgeGroupMemberships)
	}
	if m.group_membership_applications != nil {
		edges = append(edges, user.EdgeGroupMembershipApplications)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgePlayers:
		ids := make([]ent.Value, 0, len(m.players))
		for id := range m.players {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeMainPlayer:
		if id := m.main_player; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeSentSupervisionRequests:
		ids := make([]ent.Value, 0, len(m.sent_supervision_requests))
		for id := range m.sent_supervision_requests {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSupervisionRequestApprovals:
		ids := make([]ent.Value, 0, len(m.supervision_request_approvals))
		for id := range m.supervision_request_approvals {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGroupMemberships:
		ids := make([]ent.Value, 0, len(m.group_memberships))
		for id := range m.group_memberships {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGroupMembershipApplications:
		ids := make([]ent.Value, 0, len(m.group_membership_applications))
		for id := range m.group_membership_applications {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 6)
	if m.removedplayers != nil {
		edges = append(edges, user.EdgePlayers)
	}
	if m.removedsent_supervision_requests != nil {
		edges = append(edges, user.EdgeSentSupervisionRequests)
	}
	if m.removedsupervision_request_approvals != nil {
		edges = append(edges, user.EdgeSupervisionRequestApprovals)
	}
	if m.removedgroup_memberships != nil {
		edges = append(edges, user.EdgeGroupMemberships)
	}
	if m.removedgroup_membership_applications != nil {
		edges = append(edges, user.EdgeGroupMembershipApplications)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgePlayers:
		ids := make([]ent.Value, 0, len(m.removedplayers))
		for id := range m.removedplayers {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSentSupervisionRequests:
		ids := make([]ent.Value, 0, len(m.removedsent_supervision_requests))
		for id := range m.removedsent_supervision_requests {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSupervisionRequestApprovals:
		ids := make([]ent.Value, 0, len(m.removedsupervision_request_approvals))
		for id := range m.removedsupervision_request_approvals {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGroupMemberships:
		ids := make([]ent.Value, 0, len(m.removedgroup_memberships))
		for id := range m.removedgroup_memberships {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGroupMembershipApplications:
		ids := make([]ent.Value, 0, len(m.removedgroup_membership_applications))
		for id := range m.removedgroup_membership_applications {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 6)
	if m.clearedplayers {
		edges = append(edges, user.EdgePlayers)
	}
	if m.clearedmain_player {
		edges = append(edges, user.EdgeMainPlayer)
	}
	if m.clearedsent_supervision_requests {
		edges = append(edges, user.EdgeSentSupervisionRequests)
	}
	if m.clearedsupervision_request_approvals {
		edges = append(edges, user.EdgeSupervisionRequestApprovals)
	}
	if m.clearedgroup_memberships {
		edges = append(edges, user.EdgeGroupMemberships)
	}
	if m.clearedgroup_membership_applications {
		edges = append(edges, user.EdgeGroupMembershipApplications)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgePlayers:
		return m.clearedplayers
	case user.EdgeMainPlayer:
		return m.clearedmain_player
	case user.EdgeSentSupervisionRequests:
		return m.clearedsent_supervision_requests
	case user.EdgeSupervisionRequestApprovals:
		return m.clearedsupervision_request_approvals
	case user.EdgeGroupMemberships:
		return m.clearedgroup_memberships
	case user.EdgeGroupMembershipApplications:
		return m.clearedgroup_membership_applications
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeMainPlayer:
		m.ClearMainPlayer()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgePlayers:
		m.ResetPlayers()
		return nil
	case user.EdgeMainPlayer:
		m.ResetMainPlayer()
		return nil
	case user.EdgeSentSupervisionRequests:
		m.ResetSentSupervisionRequests()
		return nil
	case user.EdgeSupervisionRequestApprovals:
		m.ResetSupervisionRequestApprovals()
		return nil
	case user.EdgeGroupMemberships:
		m.ResetGroupMemberships()
		return nil
	case user.EdgeGroupMembershipApplications:
		m.ResetGroupMembershipApplications()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
