// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-boardgame-stats/backend/internal/ent/game"
	"github.com/open-boardgame-stats/backend/internal/ent/numericalstat"
	"github.com/open-boardgame-stats/backend/internal/ent/numericalstatdescription"
	"github.com/open-boardgame-stats/backend/internal/ent/predicate"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
)

// NumericalStatDescriptionUpdate is the builder for updating NumericalStatDescription entities.
type NumericalStatDescriptionUpdate struct {
	config
	hooks    []Hook
	mutation *NumericalStatDescriptionMutation
}

// Where appends a list predicates to the NumericalStatDescriptionUpdate builder.
func (nsdu *NumericalStatDescriptionUpdate) Where(ps ...predicate.NumericalStatDescription) *NumericalStatDescriptionUpdate {
	nsdu.mutation.Where(ps...)
	return nsdu
}

// SetName sets the "name" field.
func (nsdu *NumericalStatDescriptionUpdate) SetName(s string) *NumericalStatDescriptionUpdate {
	nsdu.mutation.SetName(s)
	return nsdu
}

// SetDescription sets the "description" field.
func (nsdu *NumericalStatDescriptionUpdate) SetDescription(s string) *NumericalStatDescriptionUpdate {
	nsdu.mutation.SetDescription(s)
	return nsdu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (nsdu *NumericalStatDescriptionUpdate) SetNillableDescription(s *string) *NumericalStatDescriptionUpdate {
	if s != nil {
		nsdu.SetDescription(*s)
	}
	return nsdu
}

// ClearDescription clears the value of the "description" field.
func (nsdu *NumericalStatDescriptionUpdate) ClearDescription() *NumericalStatDescriptionUpdate {
	nsdu.mutation.ClearDescription()
	return nsdu
}

// AddGameIDs adds the "game" edge to the Game entity by IDs.
func (nsdu *NumericalStatDescriptionUpdate) AddGameIDs(ids ...guidgql.GUID) *NumericalStatDescriptionUpdate {
	nsdu.mutation.AddGameIDs(ids...)
	return nsdu
}

// AddGame adds the "game" edges to the Game entity.
func (nsdu *NumericalStatDescriptionUpdate) AddGame(g ...*Game) *NumericalStatDescriptionUpdate {
	ids := make([]guidgql.GUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return nsdu.AddGameIDs(ids...)
}

// AddNumericalStatIDs adds the "numerical_stats" edge to the NumericalStat entity by IDs.
func (nsdu *NumericalStatDescriptionUpdate) AddNumericalStatIDs(ids ...guidgql.GUID) *NumericalStatDescriptionUpdate {
	nsdu.mutation.AddNumericalStatIDs(ids...)
	return nsdu
}

// AddNumericalStats adds the "numerical_stats" edges to the NumericalStat entity.
func (nsdu *NumericalStatDescriptionUpdate) AddNumericalStats(n ...*NumericalStat) *NumericalStatDescriptionUpdate {
	ids := make([]guidgql.GUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nsdu.AddNumericalStatIDs(ids...)
}

// Mutation returns the NumericalStatDescriptionMutation object of the builder.
func (nsdu *NumericalStatDescriptionUpdate) Mutation() *NumericalStatDescriptionMutation {
	return nsdu.mutation
}

// ClearGame clears all "game" edges to the Game entity.
func (nsdu *NumericalStatDescriptionUpdate) ClearGame() *NumericalStatDescriptionUpdate {
	nsdu.mutation.ClearGame()
	return nsdu
}

// RemoveGameIDs removes the "game" edge to Game entities by IDs.
func (nsdu *NumericalStatDescriptionUpdate) RemoveGameIDs(ids ...guidgql.GUID) *NumericalStatDescriptionUpdate {
	nsdu.mutation.RemoveGameIDs(ids...)
	return nsdu
}

// RemoveGame removes "game" edges to Game entities.
func (nsdu *NumericalStatDescriptionUpdate) RemoveGame(g ...*Game) *NumericalStatDescriptionUpdate {
	ids := make([]guidgql.GUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return nsdu.RemoveGameIDs(ids...)
}

// ClearNumericalStats clears all "numerical_stats" edges to the NumericalStat entity.
func (nsdu *NumericalStatDescriptionUpdate) ClearNumericalStats() *NumericalStatDescriptionUpdate {
	nsdu.mutation.ClearNumericalStats()
	return nsdu
}

// RemoveNumericalStatIDs removes the "numerical_stats" edge to NumericalStat entities by IDs.
func (nsdu *NumericalStatDescriptionUpdate) RemoveNumericalStatIDs(ids ...guidgql.GUID) *NumericalStatDescriptionUpdate {
	nsdu.mutation.RemoveNumericalStatIDs(ids...)
	return nsdu
}

// RemoveNumericalStats removes "numerical_stats" edges to NumericalStat entities.
func (nsdu *NumericalStatDescriptionUpdate) RemoveNumericalStats(n ...*NumericalStat) *NumericalStatDescriptionUpdate {
	ids := make([]guidgql.GUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nsdu.RemoveNumericalStatIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nsdu *NumericalStatDescriptionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(nsdu.hooks) == 0 {
		if err = nsdu.check(); err != nil {
			return 0, err
		}
		affected, err = nsdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NumericalStatDescriptionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nsdu.check(); err != nil {
				return 0, err
			}
			nsdu.mutation = mutation
			affected, err = nsdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(nsdu.hooks) - 1; i >= 0; i-- {
			if nsdu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nsdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nsdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (nsdu *NumericalStatDescriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := nsdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nsdu *NumericalStatDescriptionUpdate) Exec(ctx context.Context) error {
	_, err := nsdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nsdu *NumericalStatDescriptionUpdate) ExecX(ctx context.Context) {
	if err := nsdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nsdu *NumericalStatDescriptionUpdate) check() error {
	if v, ok := nsdu.mutation.Name(); ok {
		if err := numericalstatdescription.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "NumericalStatDescription.name": %w`, err)}
		}
	}
	return nil
}

func (nsdu *NumericalStatDescriptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   numericalstatdescription.Table,
			Columns: numericalstatdescription.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: numericalstatdescription.FieldID,
			},
		},
	}
	if ps := nsdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nsdu.mutation.Name(); ok {
		_spec.SetField(numericalstatdescription.FieldName, field.TypeString, value)
	}
	if value, ok := nsdu.mutation.Description(); ok {
		_spec.SetField(numericalstatdescription.FieldDescription, field.TypeString, value)
	}
	if nsdu.mutation.DescriptionCleared() {
		_spec.ClearField(numericalstatdescription.FieldDescription, field.TypeString)
	}
	if nsdu.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   numericalstatdescription.GameTable,
			Columns: numericalstatdescription.GamePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: game.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nsdu.mutation.RemovedGameIDs(); len(nodes) > 0 && !nsdu.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   numericalstatdescription.GameTable,
			Columns: numericalstatdescription.GamePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: game.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nsdu.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   numericalstatdescription.GameTable,
			Columns: numericalstatdescription.GamePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: game.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nsdu.mutation.NumericalStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   numericalstatdescription.NumericalStatsTable,
			Columns: []string{numericalstatdescription.NumericalStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: numericalstat.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nsdu.mutation.RemovedNumericalStatsIDs(); len(nodes) > 0 && !nsdu.mutation.NumericalStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   numericalstatdescription.NumericalStatsTable,
			Columns: []string{numericalstatdescription.NumericalStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: numericalstat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nsdu.mutation.NumericalStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   numericalstatdescription.NumericalStatsTable,
			Columns: []string{numericalstatdescription.NumericalStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: numericalstat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nsdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{numericalstatdescription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// NumericalStatDescriptionUpdateOne is the builder for updating a single NumericalStatDescription entity.
type NumericalStatDescriptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NumericalStatDescriptionMutation
}

// SetName sets the "name" field.
func (nsduo *NumericalStatDescriptionUpdateOne) SetName(s string) *NumericalStatDescriptionUpdateOne {
	nsduo.mutation.SetName(s)
	return nsduo
}

// SetDescription sets the "description" field.
func (nsduo *NumericalStatDescriptionUpdateOne) SetDescription(s string) *NumericalStatDescriptionUpdateOne {
	nsduo.mutation.SetDescription(s)
	return nsduo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (nsduo *NumericalStatDescriptionUpdateOne) SetNillableDescription(s *string) *NumericalStatDescriptionUpdateOne {
	if s != nil {
		nsduo.SetDescription(*s)
	}
	return nsduo
}

// ClearDescription clears the value of the "description" field.
func (nsduo *NumericalStatDescriptionUpdateOne) ClearDescription() *NumericalStatDescriptionUpdateOne {
	nsduo.mutation.ClearDescription()
	return nsduo
}

// AddGameIDs adds the "game" edge to the Game entity by IDs.
func (nsduo *NumericalStatDescriptionUpdateOne) AddGameIDs(ids ...guidgql.GUID) *NumericalStatDescriptionUpdateOne {
	nsduo.mutation.AddGameIDs(ids...)
	return nsduo
}

// AddGame adds the "game" edges to the Game entity.
func (nsduo *NumericalStatDescriptionUpdateOne) AddGame(g ...*Game) *NumericalStatDescriptionUpdateOne {
	ids := make([]guidgql.GUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return nsduo.AddGameIDs(ids...)
}

// AddNumericalStatIDs adds the "numerical_stats" edge to the NumericalStat entity by IDs.
func (nsduo *NumericalStatDescriptionUpdateOne) AddNumericalStatIDs(ids ...guidgql.GUID) *NumericalStatDescriptionUpdateOne {
	nsduo.mutation.AddNumericalStatIDs(ids...)
	return nsduo
}

// AddNumericalStats adds the "numerical_stats" edges to the NumericalStat entity.
func (nsduo *NumericalStatDescriptionUpdateOne) AddNumericalStats(n ...*NumericalStat) *NumericalStatDescriptionUpdateOne {
	ids := make([]guidgql.GUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nsduo.AddNumericalStatIDs(ids...)
}

// Mutation returns the NumericalStatDescriptionMutation object of the builder.
func (nsduo *NumericalStatDescriptionUpdateOne) Mutation() *NumericalStatDescriptionMutation {
	return nsduo.mutation
}

// ClearGame clears all "game" edges to the Game entity.
func (nsduo *NumericalStatDescriptionUpdateOne) ClearGame() *NumericalStatDescriptionUpdateOne {
	nsduo.mutation.ClearGame()
	return nsduo
}

// RemoveGameIDs removes the "game" edge to Game entities by IDs.
func (nsduo *NumericalStatDescriptionUpdateOne) RemoveGameIDs(ids ...guidgql.GUID) *NumericalStatDescriptionUpdateOne {
	nsduo.mutation.RemoveGameIDs(ids...)
	return nsduo
}

// RemoveGame removes "game" edges to Game entities.
func (nsduo *NumericalStatDescriptionUpdateOne) RemoveGame(g ...*Game) *NumericalStatDescriptionUpdateOne {
	ids := make([]guidgql.GUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return nsduo.RemoveGameIDs(ids...)
}

// ClearNumericalStats clears all "numerical_stats" edges to the NumericalStat entity.
func (nsduo *NumericalStatDescriptionUpdateOne) ClearNumericalStats() *NumericalStatDescriptionUpdateOne {
	nsduo.mutation.ClearNumericalStats()
	return nsduo
}

// RemoveNumericalStatIDs removes the "numerical_stats" edge to NumericalStat entities by IDs.
func (nsduo *NumericalStatDescriptionUpdateOne) RemoveNumericalStatIDs(ids ...guidgql.GUID) *NumericalStatDescriptionUpdateOne {
	nsduo.mutation.RemoveNumericalStatIDs(ids...)
	return nsduo
}

// RemoveNumericalStats removes "numerical_stats" edges to NumericalStat entities.
func (nsduo *NumericalStatDescriptionUpdateOne) RemoveNumericalStats(n ...*NumericalStat) *NumericalStatDescriptionUpdateOne {
	ids := make([]guidgql.GUID, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nsduo.RemoveNumericalStatIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nsduo *NumericalStatDescriptionUpdateOne) Select(field string, fields ...string) *NumericalStatDescriptionUpdateOne {
	nsduo.fields = append([]string{field}, fields...)
	return nsduo
}

// Save executes the query and returns the updated NumericalStatDescription entity.
func (nsduo *NumericalStatDescriptionUpdateOne) Save(ctx context.Context) (*NumericalStatDescription, error) {
	var (
		err  error
		node *NumericalStatDescription
	)
	if len(nsduo.hooks) == 0 {
		if err = nsduo.check(); err != nil {
			return nil, err
		}
		node, err = nsduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NumericalStatDescriptionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nsduo.check(); err != nil {
				return nil, err
			}
			nsduo.mutation = mutation
			node, err = nsduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nsduo.hooks) - 1; i >= 0; i-- {
			if nsduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nsduo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, nsduo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*NumericalStatDescription)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from NumericalStatDescriptionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (nsduo *NumericalStatDescriptionUpdateOne) SaveX(ctx context.Context) *NumericalStatDescription {
	node, err := nsduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nsduo *NumericalStatDescriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := nsduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nsduo *NumericalStatDescriptionUpdateOne) ExecX(ctx context.Context) {
	if err := nsduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nsduo *NumericalStatDescriptionUpdateOne) check() error {
	if v, ok := nsduo.mutation.Name(); ok {
		if err := numericalstatdescription.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "NumericalStatDescription.name": %w`, err)}
		}
	}
	return nil
}

func (nsduo *NumericalStatDescriptionUpdateOne) sqlSave(ctx context.Context) (_node *NumericalStatDescription, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   numericalstatdescription.Table,
			Columns: numericalstatdescription.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: numericalstatdescription.FieldID,
			},
		},
	}
	id, ok := nsduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NumericalStatDescription.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nsduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, numericalstatdescription.FieldID)
		for _, f := range fields {
			if !numericalstatdescription.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != numericalstatdescription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nsduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nsduo.mutation.Name(); ok {
		_spec.SetField(numericalstatdescription.FieldName, field.TypeString, value)
	}
	if value, ok := nsduo.mutation.Description(); ok {
		_spec.SetField(numericalstatdescription.FieldDescription, field.TypeString, value)
	}
	if nsduo.mutation.DescriptionCleared() {
		_spec.ClearField(numericalstatdescription.FieldDescription, field.TypeString)
	}
	if nsduo.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   numericalstatdescription.GameTable,
			Columns: numericalstatdescription.GamePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: game.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nsduo.mutation.RemovedGameIDs(); len(nodes) > 0 && !nsduo.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   numericalstatdescription.GameTable,
			Columns: numericalstatdescription.GamePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: game.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nsduo.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   numericalstatdescription.GameTable,
			Columns: numericalstatdescription.GamePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: game.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nsduo.mutation.NumericalStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   numericalstatdescription.NumericalStatsTable,
			Columns: []string{numericalstatdescription.NumericalStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: numericalstat.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nsduo.mutation.RemovedNumericalStatsIDs(); len(nodes) > 0 && !nsduo.mutation.NumericalStatsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   numericalstatdescription.NumericalStatsTable,
			Columns: []string{numericalstatdescription.NumericalStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: numericalstat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nsduo.mutation.NumericalStatsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   numericalstatdescription.NumericalStatsTable,
			Columns: []string{numericalstatdescription.NumericalStatsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: numericalstat.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NumericalStatDescription{config: nsduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nsduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{numericalstatdescription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
