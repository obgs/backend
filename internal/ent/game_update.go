// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-boardgame-stats/backend/internal/ent/game"
	"github.com/open-boardgame-stats/backend/internal/ent/gamefavorite"
	"github.com/open-boardgame-stats/backend/internal/ent/predicate"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
	"github.com/open-boardgame-stats/backend/internal/ent/statdescription"
	"github.com/open-boardgame-stats/backend/internal/ent/user"
)

// GameUpdate is the builder for updating Game entities.
type GameUpdate struct {
	config
	hooks    []Hook
	mutation *GameMutation
}

// Where appends a list predicates to the GameUpdate builder.
func (gu *GameUpdate) Where(ps ...predicate.Game) *GameUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetName sets the "name" field.
func (gu *GameUpdate) SetName(s string) *GameUpdate {
	gu.mutation.SetName(s)
	return gu
}

// SetMinPlayers sets the "min_players" field.
func (gu *GameUpdate) SetMinPlayers(i int) *GameUpdate {
	gu.mutation.ResetMinPlayers()
	gu.mutation.SetMinPlayers(i)
	return gu
}

// SetNillableMinPlayers sets the "min_players" field if the given value is not nil.
func (gu *GameUpdate) SetNillableMinPlayers(i *int) *GameUpdate {
	if i != nil {
		gu.SetMinPlayers(*i)
	}
	return gu
}

// AddMinPlayers adds i to the "min_players" field.
func (gu *GameUpdate) AddMinPlayers(i int) *GameUpdate {
	gu.mutation.AddMinPlayers(i)
	return gu
}

// SetMaxPlayers sets the "max_players" field.
func (gu *GameUpdate) SetMaxPlayers(i int) *GameUpdate {
	gu.mutation.ResetMaxPlayers()
	gu.mutation.SetMaxPlayers(i)
	return gu
}

// SetNillableMaxPlayers sets the "max_players" field if the given value is not nil.
func (gu *GameUpdate) SetNillableMaxPlayers(i *int) *GameUpdate {
	if i != nil {
		gu.SetMaxPlayers(*i)
	}
	return gu
}

// AddMaxPlayers adds i to the "max_players" field.
func (gu *GameUpdate) AddMaxPlayers(i int) *GameUpdate {
	gu.mutation.AddMaxPlayers(i)
	return gu
}

// SetDescription sets the "description" field.
func (gu *GameUpdate) SetDescription(s string) *GameUpdate {
	gu.mutation.SetDescription(s)
	return gu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (gu *GameUpdate) SetNillableDescription(s *string) *GameUpdate {
	if s != nil {
		gu.SetDescription(*s)
	}
	return gu
}

// ClearDescription clears the value of the "description" field.
func (gu *GameUpdate) ClearDescription() *GameUpdate {
	gu.mutation.ClearDescription()
	return gu
}

// SetBoardgamegeekURL sets the "boardgamegeek_url" field.
func (gu *GameUpdate) SetBoardgamegeekURL(s string) *GameUpdate {
	gu.mutation.SetBoardgamegeekURL(s)
	return gu
}

// SetNillableBoardgamegeekURL sets the "boardgamegeek_url" field if the given value is not nil.
func (gu *GameUpdate) SetNillableBoardgamegeekURL(s *string) *GameUpdate {
	if s != nil {
		gu.SetBoardgamegeekURL(*s)
	}
	return gu
}

// ClearBoardgamegeekURL clears the value of the "boardgamegeek_url" field.
func (gu *GameUpdate) ClearBoardgamegeekURL() *GameUpdate {
	gu.mutation.ClearBoardgamegeekURL()
	return gu
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (gu *GameUpdate) SetAuthorID(id guidgql.GUID) *GameUpdate {
	gu.mutation.SetAuthorID(id)
	return gu
}

// SetAuthor sets the "author" edge to the User entity.
func (gu *GameUpdate) SetAuthor(u *User) *GameUpdate {
	return gu.SetAuthorID(u.ID)
}

// AddFavoriteIDs adds the "favorites" edge to the GameFavorite entity by IDs.
func (gu *GameUpdate) AddFavoriteIDs(ids ...guidgql.GUID) *GameUpdate {
	gu.mutation.AddFavoriteIDs(ids...)
	return gu
}

// AddFavorites adds the "favorites" edges to the GameFavorite entity.
func (gu *GameUpdate) AddFavorites(g ...*GameFavorite) *GameUpdate {
	ids := make([]guidgql.GUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gu.AddFavoriteIDs(ids...)
}

// AddStatDescriptionIDs adds the "stat_descriptions" edge to the StatDescription entity by IDs.
func (gu *GameUpdate) AddStatDescriptionIDs(ids ...guidgql.GUID) *GameUpdate {
	gu.mutation.AddStatDescriptionIDs(ids...)
	return gu
}

// AddStatDescriptions adds the "stat_descriptions" edges to the StatDescription entity.
func (gu *GameUpdate) AddStatDescriptions(s ...*StatDescription) *GameUpdate {
	ids := make([]guidgql.GUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return gu.AddStatDescriptionIDs(ids...)
}

// Mutation returns the GameMutation object of the builder.
func (gu *GameUpdate) Mutation() *GameMutation {
	return gu.mutation
}

// ClearAuthor clears the "author" edge to the User entity.
func (gu *GameUpdate) ClearAuthor() *GameUpdate {
	gu.mutation.ClearAuthor()
	return gu
}

// ClearFavorites clears all "favorites" edges to the GameFavorite entity.
func (gu *GameUpdate) ClearFavorites() *GameUpdate {
	gu.mutation.ClearFavorites()
	return gu
}

// RemoveFavoriteIDs removes the "favorites" edge to GameFavorite entities by IDs.
func (gu *GameUpdate) RemoveFavoriteIDs(ids ...guidgql.GUID) *GameUpdate {
	gu.mutation.RemoveFavoriteIDs(ids...)
	return gu
}

// RemoveFavorites removes "favorites" edges to GameFavorite entities.
func (gu *GameUpdate) RemoveFavorites(g ...*GameFavorite) *GameUpdate {
	ids := make([]guidgql.GUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gu.RemoveFavoriteIDs(ids...)
}

// ClearStatDescriptions clears all "stat_descriptions" edges to the StatDescription entity.
func (gu *GameUpdate) ClearStatDescriptions() *GameUpdate {
	gu.mutation.ClearStatDescriptions()
	return gu
}

// RemoveStatDescriptionIDs removes the "stat_descriptions" edge to StatDescription entities by IDs.
func (gu *GameUpdate) RemoveStatDescriptionIDs(ids ...guidgql.GUID) *GameUpdate {
	gu.mutation.RemoveStatDescriptionIDs(ids...)
	return gu
}

// RemoveStatDescriptions removes "stat_descriptions" edges to StatDescription entities.
func (gu *GameUpdate) RemoveStatDescriptions(s ...*StatDescription) *GameUpdate {
	ids := make([]guidgql.GUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return gu.RemoveStatDescriptionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GameUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(gu.hooks) == 0 {
		if err = gu.check(); err != nil {
			return 0, err
		}
		affected, err = gu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GameMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = gu.check(); err != nil {
				return 0, err
			}
			gu.mutation = mutation
			affected, err = gu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(gu.hooks) - 1; i >= 0; i-- {
			if gu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = gu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GameUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GameUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GameUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gu *GameUpdate) check() error {
	if v, ok := gu.mutation.Name(); ok {
		if err := game.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Game.name": %w`, err)}
		}
	}
	if _, ok := gu.mutation.AuthorID(); gu.mutation.AuthorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Game.author"`)
	}
	return nil
}

func (gu *GameUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   game.Table,
			Columns: game.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: game.FieldID,
			},
		},
	}
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.Name(); ok {
		_spec.SetField(game.FieldName, field.TypeString, value)
	}
	if value, ok := gu.mutation.MinPlayers(); ok {
		_spec.SetField(game.FieldMinPlayers, field.TypeInt, value)
	}
	if value, ok := gu.mutation.AddedMinPlayers(); ok {
		_spec.AddField(game.FieldMinPlayers, field.TypeInt, value)
	}
	if value, ok := gu.mutation.MaxPlayers(); ok {
		_spec.SetField(game.FieldMaxPlayers, field.TypeInt, value)
	}
	if value, ok := gu.mutation.AddedMaxPlayers(); ok {
		_spec.AddField(game.FieldMaxPlayers, field.TypeInt, value)
	}
	if value, ok := gu.mutation.Description(); ok {
		_spec.SetField(game.FieldDescription, field.TypeString, value)
	}
	if gu.mutation.DescriptionCleared() {
		_spec.ClearField(game.FieldDescription, field.TypeString)
	}
	if value, ok := gu.mutation.BoardgamegeekURL(); ok {
		_spec.SetField(game.FieldBoardgamegeekURL, field.TypeString, value)
	}
	if gu.mutation.BoardgamegeekURLCleared() {
		_spec.ClearField(game.FieldBoardgamegeekURL, field.TypeString)
	}
	if gu.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   game.AuthorTable,
			Columns: []string{game.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   game.AuthorTable,
			Columns: []string{game.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.FavoritesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.FavoritesTable,
			Columns: []string{game.FavoritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: gamefavorite.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedFavoritesIDs(); len(nodes) > 0 && !gu.mutation.FavoritesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.FavoritesTable,
			Columns: []string{game.FavoritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: gamefavorite.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.FavoritesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.FavoritesTable,
			Columns: []string{game.FavoritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: gamefavorite.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.StatDescriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   game.StatDescriptionsTable,
			Columns: game.StatDescriptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: statdescription.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedStatDescriptionsIDs(); len(nodes) > 0 && !gu.mutation.StatDescriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   game.StatDescriptionsTable,
			Columns: game.StatDescriptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: statdescription.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.StatDescriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   game.StatDescriptionsTable,
			Columns: game.StatDescriptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: statdescription.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{game.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// GameUpdateOne is the builder for updating a single Game entity.
type GameUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GameMutation
}

// SetName sets the "name" field.
func (guo *GameUpdateOne) SetName(s string) *GameUpdateOne {
	guo.mutation.SetName(s)
	return guo
}

// SetMinPlayers sets the "min_players" field.
func (guo *GameUpdateOne) SetMinPlayers(i int) *GameUpdateOne {
	guo.mutation.ResetMinPlayers()
	guo.mutation.SetMinPlayers(i)
	return guo
}

// SetNillableMinPlayers sets the "min_players" field if the given value is not nil.
func (guo *GameUpdateOne) SetNillableMinPlayers(i *int) *GameUpdateOne {
	if i != nil {
		guo.SetMinPlayers(*i)
	}
	return guo
}

// AddMinPlayers adds i to the "min_players" field.
func (guo *GameUpdateOne) AddMinPlayers(i int) *GameUpdateOne {
	guo.mutation.AddMinPlayers(i)
	return guo
}

// SetMaxPlayers sets the "max_players" field.
func (guo *GameUpdateOne) SetMaxPlayers(i int) *GameUpdateOne {
	guo.mutation.ResetMaxPlayers()
	guo.mutation.SetMaxPlayers(i)
	return guo
}

// SetNillableMaxPlayers sets the "max_players" field if the given value is not nil.
func (guo *GameUpdateOne) SetNillableMaxPlayers(i *int) *GameUpdateOne {
	if i != nil {
		guo.SetMaxPlayers(*i)
	}
	return guo
}

// AddMaxPlayers adds i to the "max_players" field.
func (guo *GameUpdateOne) AddMaxPlayers(i int) *GameUpdateOne {
	guo.mutation.AddMaxPlayers(i)
	return guo
}

// SetDescription sets the "description" field.
func (guo *GameUpdateOne) SetDescription(s string) *GameUpdateOne {
	guo.mutation.SetDescription(s)
	return guo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (guo *GameUpdateOne) SetNillableDescription(s *string) *GameUpdateOne {
	if s != nil {
		guo.SetDescription(*s)
	}
	return guo
}

// ClearDescription clears the value of the "description" field.
func (guo *GameUpdateOne) ClearDescription() *GameUpdateOne {
	guo.mutation.ClearDescription()
	return guo
}

// SetBoardgamegeekURL sets the "boardgamegeek_url" field.
func (guo *GameUpdateOne) SetBoardgamegeekURL(s string) *GameUpdateOne {
	guo.mutation.SetBoardgamegeekURL(s)
	return guo
}

// SetNillableBoardgamegeekURL sets the "boardgamegeek_url" field if the given value is not nil.
func (guo *GameUpdateOne) SetNillableBoardgamegeekURL(s *string) *GameUpdateOne {
	if s != nil {
		guo.SetBoardgamegeekURL(*s)
	}
	return guo
}

// ClearBoardgamegeekURL clears the value of the "boardgamegeek_url" field.
func (guo *GameUpdateOne) ClearBoardgamegeekURL() *GameUpdateOne {
	guo.mutation.ClearBoardgamegeekURL()
	return guo
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (guo *GameUpdateOne) SetAuthorID(id guidgql.GUID) *GameUpdateOne {
	guo.mutation.SetAuthorID(id)
	return guo
}

// SetAuthor sets the "author" edge to the User entity.
func (guo *GameUpdateOne) SetAuthor(u *User) *GameUpdateOne {
	return guo.SetAuthorID(u.ID)
}

// AddFavoriteIDs adds the "favorites" edge to the GameFavorite entity by IDs.
func (guo *GameUpdateOne) AddFavoriteIDs(ids ...guidgql.GUID) *GameUpdateOne {
	guo.mutation.AddFavoriteIDs(ids...)
	return guo
}

// AddFavorites adds the "favorites" edges to the GameFavorite entity.
func (guo *GameUpdateOne) AddFavorites(g ...*GameFavorite) *GameUpdateOne {
	ids := make([]guidgql.GUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return guo.AddFavoriteIDs(ids...)
}

// AddStatDescriptionIDs adds the "stat_descriptions" edge to the StatDescription entity by IDs.
func (guo *GameUpdateOne) AddStatDescriptionIDs(ids ...guidgql.GUID) *GameUpdateOne {
	guo.mutation.AddStatDescriptionIDs(ids...)
	return guo
}

// AddStatDescriptions adds the "stat_descriptions" edges to the StatDescription entity.
func (guo *GameUpdateOne) AddStatDescriptions(s ...*StatDescription) *GameUpdateOne {
	ids := make([]guidgql.GUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return guo.AddStatDescriptionIDs(ids...)
}

// Mutation returns the GameMutation object of the builder.
func (guo *GameUpdateOne) Mutation() *GameMutation {
	return guo.mutation
}

// ClearAuthor clears the "author" edge to the User entity.
func (guo *GameUpdateOne) ClearAuthor() *GameUpdateOne {
	guo.mutation.ClearAuthor()
	return guo
}

// ClearFavorites clears all "favorites" edges to the GameFavorite entity.
func (guo *GameUpdateOne) ClearFavorites() *GameUpdateOne {
	guo.mutation.ClearFavorites()
	return guo
}

// RemoveFavoriteIDs removes the "favorites" edge to GameFavorite entities by IDs.
func (guo *GameUpdateOne) RemoveFavoriteIDs(ids ...guidgql.GUID) *GameUpdateOne {
	guo.mutation.RemoveFavoriteIDs(ids...)
	return guo
}

// RemoveFavorites removes "favorites" edges to GameFavorite entities.
func (guo *GameUpdateOne) RemoveFavorites(g ...*GameFavorite) *GameUpdateOne {
	ids := make([]guidgql.GUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return guo.RemoveFavoriteIDs(ids...)
}

// ClearStatDescriptions clears all "stat_descriptions" edges to the StatDescription entity.
func (guo *GameUpdateOne) ClearStatDescriptions() *GameUpdateOne {
	guo.mutation.ClearStatDescriptions()
	return guo
}

// RemoveStatDescriptionIDs removes the "stat_descriptions" edge to StatDescription entities by IDs.
func (guo *GameUpdateOne) RemoveStatDescriptionIDs(ids ...guidgql.GUID) *GameUpdateOne {
	guo.mutation.RemoveStatDescriptionIDs(ids...)
	return guo
}

// RemoveStatDescriptions removes "stat_descriptions" edges to StatDescription entities.
func (guo *GameUpdateOne) RemoveStatDescriptions(s ...*StatDescription) *GameUpdateOne {
	ids := make([]guidgql.GUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return guo.RemoveStatDescriptionIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GameUpdateOne) Select(field string, fields ...string) *GameUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Game entity.
func (guo *GameUpdateOne) Save(ctx context.Context) (*Game, error) {
	var (
		err  error
		node *Game
	)
	if len(guo.hooks) == 0 {
		if err = guo.check(); err != nil {
			return nil, err
		}
		node, err = guo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GameMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = guo.check(); err != nil {
				return nil, err
			}
			guo.mutation = mutation
			node, err = guo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(guo.hooks) - 1; i >= 0; i-- {
			if guo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = guo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, guo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Game)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from GameMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GameUpdateOne) SaveX(ctx context.Context) *Game {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GameUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GameUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (guo *GameUpdateOne) check() error {
	if v, ok := guo.mutation.Name(); ok {
		if err := game.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Game.name": %w`, err)}
		}
	}
	if _, ok := guo.mutation.AuthorID(); guo.mutation.AuthorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Game.author"`)
	}
	return nil
}

func (guo *GameUpdateOne) sqlSave(ctx context.Context) (_node *Game, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   game.Table,
			Columns: game.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: game.FieldID,
			},
		},
	}
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Game.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, game.FieldID)
		for _, f := range fields {
			if !game.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != game.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.Name(); ok {
		_spec.SetField(game.FieldName, field.TypeString, value)
	}
	if value, ok := guo.mutation.MinPlayers(); ok {
		_spec.SetField(game.FieldMinPlayers, field.TypeInt, value)
	}
	if value, ok := guo.mutation.AddedMinPlayers(); ok {
		_spec.AddField(game.FieldMinPlayers, field.TypeInt, value)
	}
	if value, ok := guo.mutation.MaxPlayers(); ok {
		_spec.SetField(game.FieldMaxPlayers, field.TypeInt, value)
	}
	if value, ok := guo.mutation.AddedMaxPlayers(); ok {
		_spec.AddField(game.FieldMaxPlayers, field.TypeInt, value)
	}
	if value, ok := guo.mutation.Description(); ok {
		_spec.SetField(game.FieldDescription, field.TypeString, value)
	}
	if guo.mutation.DescriptionCleared() {
		_spec.ClearField(game.FieldDescription, field.TypeString)
	}
	if value, ok := guo.mutation.BoardgamegeekURL(); ok {
		_spec.SetField(game.FieldBoardgamegeekURL, field.TypeString, value)
	}
	if guo.mutation.BoardgamegeekURLCleared() {
		_spec.ClearField(game.FieldBoardgamegeekURL, field.TypeString)
	}
	if guo.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   game.AuthorTable,
			Columns: []string{game.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   game.AuthorTable,
			Columns: []string{game.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.FavoritesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.FavoritesTable,
			Columns: []string{game.FavoritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: gamefavorite.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedFavoritesIDs(); len(nodes) > 0 && !guo.mutation.FavoritesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.FavoritesTable,
			Columns: []string{game.FavoritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: gamefavorite.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.FavoritesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.FavoritesTable,
			Columns: []string{game.FavoritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: gamefavorite.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.StatDescriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   game.StatDescriptionsTable,
			Columns: game.StatDescriptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: statdescription.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedStatDescriptionsIDs(); len(nodes) > 0 && !guo.mutation.StatDescriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   game.StatDescriptionsTable,
			Columns: game.StatDescriptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: statdescription.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.StatDescriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   game.StatDescriptionsTable,
			Columns: game.StatDescriptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: statdescription.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Game{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{game.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
