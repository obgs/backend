// Code generated by ent, DO NOT EDIT.

package groupmembership

import (
	"fmt"

	"github.com/99designs/gqlgen/graphql"
	"github.com/open-boardgame-stats/backend/internal/ent/enums"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
)

const (
	// Label holds the string label denoting the groupmembership type in the database.
	Label = "group_membership"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// EdgeGroup holds the string denoting the group edge name in mutations.
	EdgeGroup = "group"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the groupmembership in the database.
	Table = "group_memberships"
	// GroupTable is the table that holds the group relation/edge.
	GroupTable = "group_memberships"
	// GroupInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	GroupInverseTable = "groups"
	// GroupColumn is the table column denoting the group relation/edge.
	GroupColumn = "group_members"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "group_memberships"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_group_memberships"
)

// Columns holds all SQL columns for groupmembership fields.
var Columns = []string{
	FieldID,
	FieldRole,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "group_memberships"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"group_members",
	"user_group_memberships",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() guidgql.GUID
)

// RoleValidator is a validator for the "role" field enum values. It is called by the builders before save.
func RoleValidator(r enums.Role) error {
	switch r.String() {
	case "owner", "admin", "member":
		return nil
	default:
		return fmt.Errorf("groupmembership: invalid enum value for role field: %q", r)
	}
}

var (
	// enums.Role must implement graphql.Marshaler.
	_ graphql.Marshaler = (*enums.Role)(nil)
	// enums.Role must implement graphql.Unmarshaler.
	_ graphql.Unmarshaler = (*enums.Role)(nil)
)
