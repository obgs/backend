// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-boardgame-stats/backend/internal/ent/enumstat"
	"github.com/open-boardgame-stats/backend/internal/ent/enumstatdescription"
	"github.com/open-boardgame-stats/backend/internal/ent/game"
	"github.com/open-boardgame-stats/backend/internal/ent/predicate"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
)

// EnumStatDescriptionQuery is the builder for querying EnumStatDescription entities.
type EnumStatDescriptionQuery struct {
	config
	limit              *int
	offset             *int
	unique             *bool
	order              []OrderFunc
	fields             []string
	predicates         []predicate.EnumStatDescription
	withGame           *GameQuery
	withEnumStats      *EnumStatQuery
	modifiers          []func(*sql.Selector)
	loadTotal          []func(context.Context, []*EnumStatDescription) error
	withNamedGame      map[string]*GameQuery
	withNamedEnumStats map[string]*EnumStatQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EnumStatDescriptionQuery builder.
func (esdq *EnumStatDescriptionQuery) Where(ps ...predicate.EnumStatDescription) *EnumStatDescriptionQuery {
	esdq.predicates = append(esdq.predicates, ps...)
	return esdq
}

// Limit adds a limit step to the query.
func (esdq *EnumStatDescriptionQuery) Limit(limit int) *EnumStatDescriptionQuery {
	esdq.limit = &limit
	return esdq
}

// Offset adds an offset step to the query.
func (esdq *EnumStatDescriptionQuery) Offset(offset int) *EnumStatDescriptionQuery {
	esdq.offset = &offset
	return esdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (esdq *EnumStatDescriptionQuery) Unique(unique bool) *EnumStatDescriptionQuery {
	esdq.unique = &unique
	return esdq
}

// Order adds an order step to the query.
func (esdq *EnumStatDescriptionQuery) Order(o ...OrderFunc) *EnumStatDescriptionQuery {
	esdq.order = append(esdq.order, o...)
	return esdq
}

// QueryGame chains the current query on the "game" edge.
func (esdq *EnumStatDescriptionQuery) QueryGame() *GameQuery {
	query := &GameQuery{config: esdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := esdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := esdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enumstatdescription.Table, enumstatdescription.FieldID, selector),
			sqlgraph.To(game.Table, game.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, enumstatdescription.GameTable, enumstatdescription.GamePrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(esdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEnumStats chains the current query on the "enum_stats" edge.
func (esdq *EnumStatDescriptionQuery) QueryEnumStats() *EnumStatQuery {
	query := &EnumStatQuery{config: esdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := esdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := esdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(enumstatdescription.Table, enumstatdescription.FieldID, selector),
			sqlgraph.To(enumstat.Table, enumstat.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, enumstatdescription.EnumStatsTable, enumstatdescription.EnumStatsColumn),
		)
		fromU = sqlgraph.SetNeighbors(esdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EnumStatDescription entity from the query.
// Returns a *NotFoundError when no EnumStatDescription was found.
func (esdq *EnumStatDescriptionQuery) First(ctx context.Context) (*EnumStatDescription, error) {
	nodes, err := esdq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{enumstatdescription.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (esdq *EnumStatDescriptionQuery) FirstX(ctx context.Context) *EnumStatDescription {
	node, err := esdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EnumStatDescription ID from the query.
// Returns a *NotFoundError when no EnumStatDescription ID was found.
func (esdq *EnumStatDescriptionQuery) FirstID(ctx context.Context) (id guidgql.GUID, err error) {
	var ids []guidgql.GUID
	if ids, err = esdq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{enumstatdescription.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (esdq *EnumStatDescriptionQuery) FirstIDX(ctx context.Context) guidgql.GUID {
	id, err := esdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EnumStatDescription entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EnumStatDescription entity is found.
// Returns a *NotFoundError when no EnumStatDescription entities are found.
func (esdq *EnumStatDescriptionQuery) Only(ctx context.Context) (*EnumStatDescription, error) {
	nodes, err := esdq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{enumstatdescription.Label}
	default:
		return nil, &NotSingularError{enumstatdescription.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (esdq *EnumStatDescriptionQuery) OnlyX(ctx context.Context) *EnumStatDescription {
	node, err := esdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EnumStatDescription ID in the query.
// Returns a *NotSingularError when more than one EnumStatDescription ID is found.
// Returns a *NotFoundError when no entities are found.
func (esdq *EnumStatDescriptionQuery) OnlyID(ctx context.Context) (id guidgql.GUID, err error) {
	var ids []guidgql.GUID
	if ids, err = esdq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{enumstatdescription.Label}
	default:
		err = &NotSingularError{enumstatdescription.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (esdq *EnumStatDescriptionQuery) OnlyIDX(ctx context.Context) guidgql.GUID {
	id, err := esdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EnumStatDescriptions.
func (esdq *EnumStatDescriptionQuery) All(ctx context.Context) ([]*EnumStatDescription, error) {
	if err := esdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return esdq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (esdq *EnumStatDescriptionQuery) AllX(ctx context.Context) []*EnumStatDescription {
	nodes, err := esdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EnumStatDescription IDs.
func (esdq *EnumStatDescriptionQuery) IDs(ctx context.Context) ([]guidgql.GUID, error) {
	var ids []guidgql.GUID
	if err := esdq.Select(enumstatdescription.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (esdq *EnumStatDescriptionQuery) IDsX(ctx context.Context) []guidgql.GUID {
	ids, err := esdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (esdq *EnumStatDescriptionQuery) Count(ctx context.Context) (int, error) {
	if err := esdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return esdq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (esdq *EnumStatDescriptionQuery) CountX(ctx context.Context) int {
	count, err := esdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (esdq *EnumStatDescriptionQuery) Exist(ctx context.Context) (bool, error) {
	if err := esdq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return esdq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (esdq *EnumStatDescriptionQuery) ExistX(ctx context.Context) bool {
	exist, err := esdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EnumStatDescriptionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (esdq *EnumStatDescriptionQuery) Clone() *EnumStatDescriptionQuery {
	if esdq == nil {
		return nil
	}
	return &EnumStatDescriptionQuery{
		config:        esdq.config,
		limit:         esdq.limit,
		offset:        esdq.offset,
		order:         append([]OrderFunc{}, esdq.order...),
		predicates:    append([]predicate.EnumStatDescription{}, esdq.predicates...),
		withGame:      esdq.withGame.Clone(),
		withEnumStats: esdq.withEnumStats.Clone(),
		// clone intermediate query.
		sql:    esdq.sql.Clone(),
		path:   esdq.path,
		unique: esdq.unique,
	}
}

// WithGame tells the query-builder to eager-load the nodes that are connected to
// the "game" edge. The optional arguments are used to configure the query builder of the edge.
func (esdq *EnumStatDescriptionQuery) WithGame(opts ...func(*GameQuery)) *EnumStatDescriptionQuery {
	query := &GameQuery{config: esdq.config}
	for _, opt := range opts {
		opt(query)
	}
	esdq.withGame = query
	return esdq
}

// WithEnumStats tells the query-builder to eager-load the nodes that are connected to
// the "enum_stats" edge. The optional arguments are used to configure the query builder of the edge.
func (esdq *EnumStatDescriptionQuery) WithEnumStats(opts ...func(*EnumStatQuery)) *EnumStatDescriptionQuery {
	query := &EnumStatQuery{config: esdq.config}
	for _, opt := range opts {
		opt(query)
	}
	esdq.withEnumStats = query
	return esdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EnumStatDescription.Query().
//		GroupBy(enumstatdescription.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (esdq *EnumStatDescriptionQuery) GroupBy(field string, fields ...string) *EnumStatDescriptionGroupBy {
	grbuild := &EnumStatDescriptionGroupBy{config: esdq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := esdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return esdq.sqlQuery(ctx), nil
	}
	grbuild.label = enumstatdescription.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.EnumStatDescription.Query().
//		Select(enumstatdescription.FieldName).
//		Scan(ctx, &v)
func (esdq *EnumStatDescriptionQuery) Select(fields ...string) *EnumStatDescriptionSelect {
	esdq.fields = append(esdq.fields, fields...)
	selbuild := &EnumStatDescriptionSelect{EnumStatDescriptionQuery: esdq}
	selbuild.label = enumstatdescription.Label
	selbuild.flds, selbuild.scan = &esdq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a EnumStatDescriptionSelect configured with the given aggregations.
func (esdq *EnumStatDescriptionQuery) Aggregate(fns ...AggregateFunc) *EnumStatDescriptionSelect {
	return esdq.Select().Aggregate(fns...)
}

func (esdq *EnumStatDescriptionQuery) prepareQuery(ctx context.Context) error {
	for _, f := range esdq.fields {
		if !enumstatdescription.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if esdq.path != nil {
		prev, err := esdq.path(ctx)
		if err != nil {
			return err
		}
		esdq.sql = prev
	}
	return nil
}

func (esdq *EnumStatDescriptionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EnumStatDescription, error) {
	var (
		nodes       = []*EnumStatDescription{}
		_spec       = esdq.querySpec()
		loadedTypes = [2]bool{
			esdq.withGame != nil,
			esdq.withEnumStats != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*EnumStatDescription).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &EnumStatDescription{config: esdq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(esdq.modifiers) > 0 {
		_spec.Modifiers = esdq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, esdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := esdq.withGame; query != nil {
		if err := esdq.loadGame(ctx, query, nodes,
			func(n *EnumStatDescription) { n.Edges.Game = []*Game{} },
			func(n *EnumStatDescription, e *Game) { n.Edges.Game = append(n.Edges.Game, e) }); err != nil {
			return nil, err
		}
	}
	if query := esdq.withEnumStats; query != nil {
		if err := esdq.loadEnumStats(ctx, query, nodes,
			func(n *EnumStatDescription) { n.Edges.EnumStats = []*EnumStat{} },
			func(n *EnumStatDescription, e *EnumStat) { n.Edges.EnumStats = append(n.Edges.EnumStats, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range esdq.withNamedGame {
		if err := esdq.loadGame(ctx, query, nodes,
			func(n *EnumStatDescription) { n.appendNamedGame(name) },
			func(n *EnumStatDescription, e *Game) { n.appendNamedGame(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range esdq.withNamedEnumStats {
		if err := esdq.loadEnumStats(ctx, query, nodes,
			func(n *EnumStatDescription) { n.appendNamedEnumStats(name) },
			func(n *EnumStatDescription, e *EnumStat) { n.appendNamedEnumStats(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range esdq.loadTotal {
		if err := esdq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (esdq *EnumStatDescriptionQuery) loadGame(ctx context.Context, query *GameQuery, nodes []*EnumStatDescription, init func(*EnumStatDescription), assign func(*EnumStatDescription, *Game)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[guidgql.GUID]*EnumStatDescription)
	nids := make(map[guidgql.GUID]map[*EnumStatDescription]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(enumstatdescription.GameTable)
		s.Join(joinT).On(s.C(game.FieldID), joinT.C(enumstatdescription.GamePrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(enumstatdescription.GamePrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(enumstatdescription.GamePrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(guidgql.GUID)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := *values[0].(*guidgql.GUID)
			inValue := *values[1].(*guidgql.GUID)
			if nids[inValue] == nil {
				nids[inValue] = map[*EnumStatDescription]struct{}{byID[outValue]: {}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "game" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (esdq *EnumStatDescriptionQuery) loadEnumStats(ctx context.Context, query *EnumStatQuery, nodes []*EnumStatDescription, init func(*EnumStatDescription), assign func(*EnumStatDescription, *EnumStat)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[guidgql.GUID]*EnumStatDescription)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.EnumStat(func(s *sql.Selector) {
		s.Where(sql.InValues(enumstatdescription.EnumStatsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.enum_stat_description_enum_stats
		if fk == nil {
			return fmt.Errorf(`foreign-key "enum_stat_description_enum_stats" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "enum_stat_description_enum_stats" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (esdq *EnumStatDescriptionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := esdq.querySpec()
	if len(esdq.modifiers) > 0 {
		_spec.Modifiers = esdq.modifiers
	}
	_spec.Node.Columns = esdq.fields
	if len(esdq.fields) > 0 {
		_spec.Unique = esdq.unique != nil && *esdq.unique
	}
	return sqlgraph.CountNodes(ctx, esdq.driver, _spec)
}

func (esdq *EnumStatDescriptionQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := esdq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (esdq *EnumStatDescriptionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   enumstatdescription.Table,
			Columns: enumstatdescription.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: enumstatdescription.FieldID,
			},
		},
		From:   esdq.sql,
		Unique: true,
	}
	if unique := esdq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := esdq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, enumstatdescription.FieldID)
		for i := range fields {
			if fields[i] != enumstatdescription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := esdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := esdq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := esdq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := esdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (esdq *EnumStatDescriptionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(esdq.driver.Dialect())
	t1 := builder.Table(enumstatdescription.Table)
	columns := esdq.fields
	if len(columns) == 0 {
		columns = enumstatdescription.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if esdq.sql != nil {
		selector = esdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if esdq.unique != nil && *esdq.unique {
		selector.Distinct()
	}
	for _, p := range esdq.predicates {
		p(selector)
	}
	for _, p := range esdq.order {
		p(selector)
	}
	if offset := esdq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := esdq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedGame tells the query-builder to eager-load the nodes that are connected to the "game"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (esdq *EnumStatDescriptionQuery) WithNamedGame(name string, opts ...func(*GameQuery)) *EnumStatDescriptionQuery {
	query := &GameQuery{config: esdq.config}
	for _, opt := range opts {
		opt(query)
	}
	if esdq.withNamedGame == nil {
		esdq.withNamedGame = make(map[string]*GameQuery)
	}
	esdq.withNamedGame[name] = query
	return esdq
}

// WithNamedEnumStats tells the query-builder to eager-load the nodes that are connected to the "enum_stats"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (esdq *EnumStatDescriptionQuery) WithNamedEnumStats(name string, opts ...func(*EnumStatQuery)) *EnumStatDescriptionQuery {
	query := &EnumStatQuery{config: esdq.config}
	for _, opt := range opts {
		opt(query)
	}
	if esdq.withNamedEnumStats == nil {
		esdq.withNamedEnumStats = make(map[string]*EnumStatQuery)
	}
	esdq.withNamedEnumStats[name] = query
	return esdq
}

// EnumStatDescriptionGroupBy is the group-by builder for EnumStatDescription entities.
type EnumStatDescriptionGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (esdgb *EnumStatDescriptionGroupBy) Aggregate(fns ...AggregateFunc) *EnumStatDescriptionGroupBy {
	esdgb.fns = append(esdgb.fns, fns...)
	return esdgb
}

// Scan applies the group-by query and scans the result into the given value.
func (esdgb *EnumStatDescriptionGroupBy) Scan(ctx context.Context, v any) error {
	query, err := esdgb.path(ctx)
	if err != nil {
		return err
	}
	esdgb.sql = query
	return esdgb.sqlScan(ctx, v)
}

func (esdgb *EnumStatDescriptionGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range esdgb.fields {
		if !enumstatdescription.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := esdgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := esdgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (esdgb *EnumStatDescriptionGroupBy) sqlQuery() *sql.Selector {
	selector := esdgb.sql.Select()
	aggregation := make([]string, 0, len(esdgb.fns))
	for _, fn := range esdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(esdgb.fields)+len(esdgb.fns))
		for _, f := range esdgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(esdgb.fields...)...)
}

// EnumStatDescriptionSelect is the builder for selecting fields of EnumStatDescription entities.
type EnumStatDescriptionSelect struct {
	*EnumStatDescriptionQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (esds *EnumStatDescriptionSelect) Aggregate(fns ...AggregateFunc) *EnumStatDescriptionSelect {
	esds.fns = append(esds.fns, fns...)
	return esds
}

// Scan applies the selector query and scans the result into the given value.
func (esds *EnumStatDescriptionSelect) Scan(ctx context.Context, v any) error {
	if err := esds.prepareQuery(ctx); err != nil {
		return err
	}
	esds.sql = esds.EnumStatDescriptionQuery.sqlQuery(ctx)
	return esds.sqlScan(ctx, v)
}

func (esds *EnumStatDescriptionSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(esds.fns))
	for _, fn := range esds.fns {
		aggregation = append(aggregation, fn(esds.sql))
	}
	switch n := len(*esds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		esds.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		esds.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := esds.sql.Query()
	if err := esds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
