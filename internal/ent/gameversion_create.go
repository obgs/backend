// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-boardgame-stats/backend/internal/ent/game"
	"github.com/open-boardgame-stats/backend/internal/ent/gameversion"
	"github.com/open-boardgame-stats/backend/internal/ent/match"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
	"github.com/open-boardgame-stats/backend/internal/ent/statdescription"
)

// GameVersionCreate is the builder for creating a GameVersion entity.
type GameVersionCreate struct {
	config
	mutation *GameVersionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetVersionNumber sets the "version_number" field.
func (gvc *GameVersionCreate) SetVersionNumber(i int) *GameVersionCreate {
	gvc.mutation.SetVersionNumber(i)
	return gvc
}

// SetNillableVersionNumber sets the "version_number" field if the given value is not nil.
func (gvc *GameVersionCreate) SetNillableVersionNumber(i *int) *GameVersionCreate {
	if i != nil {
		gvc.SetVersionNumber(*i)
	}
	return gvc
}

// SetID sets the "id" field.
func (gvc *GameVersionCreate) SetID(gu guidgql.GUID) *GameVersionCreate {
	gvc.mutation.SetID(gu)
	return gvc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (gvc *GameVersionCreate) SetNillableID(gu *guidgql.GUID) *GameVersionCreate {
	if gu != nil {
		gvc.SetID(*gu)
	}
	return gvc
}

// SetGameID sets the "game" edge to the Game entity by ID.
func (gvc *GameVersionCreate) SetGameID(id guidgql.GUID) *GameVersionCreate {
	gvc.mutation.SetGameID(id)
	return gvc
}

// SetGame sets the "game" edge to the Game entity.
func (gvc *GameVersionCreate) SetGame(g *Game) *GameVersionCreate {
	return gvc.SetGameID(g.ID)
}

// AddStatDescriptionIDs adds the "stat_descriptions" edge to the StatDescription entity by IDs.
func (gvc *GameVersionCreate) AddStatDescriptionIDs(ids ...guidgql.GUID) *GameVersionCreate {
	gvc.mutation.AddStatDescriptionIDs(ids...)
	return gvc
}

// AddStatDescriptions adds the "stat_descriptions" edges to the StatDescription entity.
func (gvc *GameVersionCreate) AddStatDescriptions(s ...*StatDescription) *GameVersionCreate {
	ids := make([]guidgql.GUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return gvc.AddStatDescriptionIDs(ids...)
}

// AddMatchIDs adds the "matches" edge to the Match entity by IDs.
func (gvc *GameVersionCreate) AddMatchIDs(ids ...guidgql.GUID) *GameVersionCreate {
	gvc.mutation.AddMatchIDs(ids...)
	return gvc
}

// AddMatches adds the "matches" edges to the Match entity.
func (gvc *GameVersionCreate) AddMatches(m ...*Match) *GameVersionCreate {
	ids := make([]guidgql.GUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return gvc.AddMatchIDs(ids...)
}

// Mutation returns the GameVersionMutation object of the builder.
func (gvc *GameVersionCreate) Mutation() *GameVersionMutation {
	return gvc.mutation
}

// Save creates the GameVersion in the database.
func (gvc *GameVersionCreate) Save(ctx context.Context) (*GameVersion, error) {
	gvc.defaults()
	return withHooks(ctx, gvc.sqlSave, gvc.mutation, gvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gvc *GameVersionCreate) SaveX(ctx context.Context) *GameVersion {
	v, err := gvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gvc *GameVersionCreate) Exec(ctx context.Context) error {
	_, err := gvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gvc *GameVersionCreate) ExecX(ctx context.Context) {
	if err := gvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gvc *GameVersionCreate) defaults() {
	if _, ok := gvc.mutation.VersionNumber(); !ok {
		v := gameversion.DefaultVersionNumber
		gvc.mutation.SetVersionNumber(v)
	}
	if _, ok := gvc.mutation.ID(); !ok {
		v := gameversion.DefaultID()
		gvc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gvc *GameVersionCreate) check() error {
	if _, ok := gvc.mutation.VersionNumber(); !ok {
		return &ValidationError{Name: "version_number", err: errors.New(`ent: missing required field "GameVersion.version_number"`)}
	}
	if _, ok := gvc.mutation.GameID(); !ok {
		return &ValidationError{Name: "game", err: errors.New(`ent: missing required edge "GameVersion.game"`)}
	}
	if len(gvc.mutation.StatDescriptionsIDs()) == 0 {
		return &ValidationError{Name: "stat_descriptions", err: errors.New(`ent: missing required edge "GameVersion.stat_descriptions"`)}
	}
	return nil
}

func (gvc *GameVersionCreate) sqlSave(ctx context.Context) (*GameVersion, error) {
	if err := gvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*guidgql.GUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	gvc.mutation.id = &_node.ID
	gvc.mutation.done = true
	return _node, nil
}

func (gvc *GameVersionCreate) createSpec() (*GameVersion, *sqlgraph.CreateSpec) {
	var (
		_node = &GameVersion{config: gvc.config}
		_spec = sqlgraph.NewCreateSpec(gameversion.Table, sqlgraph.NewFieldSpec(gameversion.FieldID, field.TypeString))
	)
	_spec.OnConflict = gvc.conflict
	if id, ok := gvc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := gvc.mutation.VersionNumber(); ok {
		_spec.SetField(gameversion.FieldVersionNumber, field.TypeInt, value)
		_node.VersionNumber = value
	}
	if nodes := gvc.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   gameversion.GameTable,
			Columns: []string{gameversion.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.game_version_game = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gvc.mutation.StatDescriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   gameversion.StatDescriptionsTable,
			Columns: gameversion.StatDescriptionsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(statdescription.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gvc.mutation.MatchesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gameversion.MatchesTable,
			Columns: []string{gameversion.MatchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(match.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GameVersion.Create().
//		SetVersionNumber(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GameVersionUpsert) {
//			SetVersionNumber(v+v).
//		}).
//		Exec(ctx)
func (gvc *GameVersionCreate) OnConflict(opts ...sql.ConflictOption) *GameVersionUpsertOne {
	gvc.conflict = opts
	return &GameVersionUpsertOne{
		create: gvc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GameVersion.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gvc *GameVersionCreate) OnConflictColumns(columns ...string) *GameVersionUpsertOne {
	gvc.conflict = append(gvc.conflict, sql.ConflictColumns(columns...))
	return &GameVersionUpsertOne{
		create: gvc,
	}
}

type (
	// GameVersionUpsertOne is the builder for "upsert"-ing
	//  one GameVersion node.
	GameVersionUpsertOne struct {
		create *GameVersionCreate
	}

	// GameVersionUpsert is the "OnConflict" setter.
	GameVersionUpsert struct {
		*sql.UpdateSet
	}
)

// SetVersionNumber sets the "version_number" field.
func (u *GameVersionUpsert) SetVersionNumber(v int) *GameVersionUpsert {
	u.Set(gameversion.FieldVersionNumber, v)
	return u
}

// UpdateVersionNumber sets the "version_number" field to the value that was provided on create.
func (u *GameVersionUpsert) UpdateVersionNumber() *GameVersionUpsert {
	u.SetExcluded(gameversion.FieldVersionNumber)
	return u
}

// AddVersionNumber adds v to the "version_number" field.
func (u *GameVersionUpsert) AddVersionNumber(v int) *GameVersionUpsert {
	u.Add(gameversion.FieldVersionNumber, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.GameVersion.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(gameversion.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GameVersionUpsertOne) UpdateNewValues() *GameVersionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(gameversion.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GameVersion.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GameVersionUpsertOne) Ignore() *GameVersionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GameVersionUpsertOne) DoNothing() *GameVersionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GameVersionCreate.OnConflict
// documentation for more info.
func (u *GameVersionUpsertOne) Update(set func(*GameVersionUpsert)) *GameVersionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GameVersionUpsert{UpdateSet: update})
	}))
	return u
}

// SetVersionNumber sets the "version_number" field.
func (u *GameVersionUpsertOne) SetVersionNumber(v int) *GameVersionUpsertOne {
	return u.Update(func(s *GameVersionUpsert) {
		s.SetVersionNumber(v)
	})
}

// AddVersionNumber adds v to the "version_number" field.
func (u *GameVersionUpsertOne) AddVersionNumber(v int) *GameVersionUpsertOne {
	return u.Update(func(s *GameVersionUpsert) {
		s.AddVersionNumber(v)
	})
}

// UpdateVersionNumber sets the "version_number" field to the value that was provided on create.
func (u *GameVersionUpsertOne) UpdateVersionNumber() *GameVersionUpsertOne {
	return u.Update(func(s *GameVersionUpsert) {
		s.UpdateVersionNumber()
	})
}

// Exec executes the query.
func (u *GameVersionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GameVersionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GameVersionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GameVersionUpsertOne) ID(ctx context.Context) (id guidgql.GUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: GameVersionUpsertOne.ID is not supported by MySQL driver. Use GameVersionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GameVersionUpsertOne) IDX(ctx context.Context) guidgql.GUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GameVersionCreateBulk is the builder for creating many GameVersion entities in bulk.
type GameVersionCreateBulk struct {
	config
	builders []*GameVersionCreate
	conflict []sql.ConflictOption
}

// Save creates the GameVersion entities in the database.
func (gvcb *GameVersionCreateBulk) Save(ctx context.Context) ([]*GameVersion, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gvcb.builders))
	nodes := make([]*GameVersion, len(gvcb.builders))
	mutators := make([]Mutator, len(gvcb.builders))
	for i := range gvcb.builders {
		func(i int, root context.Context) {
			builder := gvcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GameVersionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gvcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gvcb *GameVersionCreateBulk) SaveX(ctx context.Context) []*GameVersion {
	v, err := gvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gvcb *GameVersionCreateBulk) Exec(ctx context.Context) error {
	_, err := gvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gvcb *GameVersionCreateBulk) ExecX(ctx context.Context) {
	if err := gvcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GameVersion.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GameVersionUpsert) {
//			SetVersionNumber(v+v).
//		}).
//		Exec(ctx)
func (gvcb *GameVersionCreateBulk) OnConflict(opts ...sql.ConflictOption) *GameVersionUpsertBulk {
	gvcb.conflict = opts
	return &GameVersionUpsertBulk{
		create: gvcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GameVersion.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gvcb *GameVersionCreateBulk) OnConflictColumns(columns ...string) *GameVersionUpsertBulk {
	gvcb.conflict = append(gvcb.conflict, sql.ConflictColumns(columns...))
	return &GameVersionUpsertBulk{
		create: gvcb,
	}
}

// GameVersionUpsertBulk is the builder for "upsert"-ing
// a bulk of GameVersion nodes.
type GameVersionUpsertBulk struct {
	create *GameVersionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GameVersion.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(gameversion.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *GameVersionUpsertBulk) UpdateNewValues() *GameVersionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(gameversion.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GameVersion.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GameVersionUpsertBulk) Ignore() *GameVersionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GameVersionUpsertBulk) DoNothing() *GameVersionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GameVersionCreateBulk.OnConflict
// documentation for more info.
func (u *GameVersionUpsertBulk) Update(set func(*GameVersionUpsert)) *GameVersionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GameVersionUpsert{UpdateSet: update})
	}))
	return u
}

// SetVersionNumber sets the "version_number" field.
func (u *GameVersionUpsertBulk) SetVersionNumber(v int) *GameVersionUpsertBulk {
	return u.Update(func(s *GameVersionUpsert) {
		s.SetVersionNumber(v)
	})
}

// AddVersionNumber adds v to the "version_number" field.
func (u *GameVersionUpsertBulk) AddVersionNumber(v int) *GameVersionUpsertBulk {
	return u.Update(func(s *GameVersionUpsert) {
		s.AddVersionNumber(v)
	})
}

// UpdateVersionNumber sets the "version_number" field to the value that was provided on create.
func (u *GameVersionUpsertBulk) UpdateVersionNumber() *GameVersionUpsertBulk {
	return u.Update(func(s *GameVersionUpsert) {
		s.UpdateVersionNumber()
	})
}

// Exec executes the query.
func (u *GameVersionUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GameVersionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GameVersionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GameVersionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
