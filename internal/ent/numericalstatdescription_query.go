// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-boardgame-stats/backend/internal/ent/game"
	"github.com/open-boardgame-stats/backend/internal/ent/numericalstat"
	"github.com/open-boardgame-stats/backend/internal/ent/numericalstatdescription"
	"github.com/open-boardgame-stats/backend/internal/ent/predicate"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
)

// NumericalStatDescriptionQuery is the builder for querying NumericalStatDescription entities.
type NumericalStatDescriptionQuery struct {
	config
	limit                   *int
	offset                  *int
	unique                  *bool
	order                   []OrderFunc
	fields                  []string
	predicates              []predicate.NumericalStatDescription
	withGame                *GameQuery
	withNumericalStats      *NumericalStatQuery
	modifiers               []func(*sql.Selector)
	loadTotal               []func(context.Context, []*NumericalStatDescription) error
	withNamedGame           map[string]*GameQuery
	withNamedNumericalStats map[string]*NumericalStatQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the NumericalStatDescriptionQuery builder.
func (nsdq *NumericalStatDescriptionQuery) Where(ps ...predicate.NumericalStatDescription) *NumericalStatDescriptionQuery {
	nsdq.predicates = append(nsdq.predicates, ps...)
	return nsdq
}

// Limit adds a limit step to the query.
func (nsdq *NumericalStatDescriptionQuery) Limit(limit int) *NumericalStatDescriptionQuery {
	nsdq.limit = &limit
	return nsdq
}

// Offset adds an offset step to the query.
func (nsdq *NumericalStatDescriptionQuery) Offset(offset int) *NumericalStatDescriptionQuery {
	nsdq.offset = &offset
	return nsdq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (nsdq *NumericalStatDescriptionQuery) Unique(unique bool) *NumericalStatDescriptionQuery {
	nsdq.unique = &unique
	return nsdq
}

// Order adds an order step to the query.
func (nsdq *NumericalStatDescriptionQuery) Order(o ...OrderFunc) *NumericalStatDescriptionQuery {
	nsdq.order = append(nsdq.order, o...)
	return nsdq
}

// QueryGame chains the current query on the "game" edge.
func (nsdq *NumericalStatDescriptionQuery) QueryGame() *GameQuery {
	query := &GameQuery{config: nsdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := nsdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := nsdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(numericalstatdescription.Table, numericalstatdescription.FieldID, selector),
			sqlgraph.To(game.Table, game.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, numericalstatdescription.GameTable, numericalstatdescription.GamePrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(nsdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNumericalStats chains the current query on the "numerical_stats" edge.
func (nsdq *NumericalStatDescriptionQuery) QueryNumericalStats() *NumericalStatQuery {
	query := &NumericalStatQuery{config: nsdq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := nsdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := nsdq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(numericalstatdescription.Table, numericalstatdescription.FieldID, selector),
			sqlgraph.To(numericalstat.Table, numericalstat.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, numericalstatdescription.NumericalStatsTable, numericalstatdescription.NumericalStatsColumn),
		)
		fromU = sqlgraph.SetNeighbors(nsdq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first NumericalStatDescription entity from the query.
// Returns a *NotFoundError when no NumericalStatDescription was found.
func (nsdq *NumericalStatDescriptionQuery) First(ctx context.Context) (*NumericalStatDescription, error) {
	nodes, err := nsdq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{numericalstatdescription.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (nsdq *NumericalStatDescriptionQuery) FirstX(ctx context.Context) *NumericalStatDescription {
	node, err := nsdq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first NumericalStatDescription ID from the query.
// Returns a *NotFoundError when no NumericalStatDescription ID was found.
func (nsdq *NumericalStatDescriptionQuery) FirstID(ctx context.Context) (id guidgql.GUID, err error) {
	var ids []guidgql.GUID
	if ids, err = nsdq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{numericalstatdescription.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (nsdq *NumericalStatDescriptionQuery) FirstIDX(ctx context.Context) guidgql.GUID {
	id, err := nsdq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single NumericalStatDescription entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one NumericalStatDescription entity is found.
// Returns a *NotFoundError when no NumericalStatDescription entities are found.
func (nsdq *NumericalStatDescriptionQuery) Only(ctx context.Context) (*NumericalStatDescription, error) {
	nodes, err := nsdq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{numericalstatdescription.Label}
	default:
		return nil, &NotSingularError{numericalstatdescription.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (nsdq *NumericalStatDescriptionQuery) OnlyX(ctx context.Context) *NumericalStatDescription {
	node, err := nsdq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only NumericalStatDescription ID in the query.
// Returns a *NotSingularError when more than one NumericalStatDescription ID is found.
// Returns a *NotFoundError when no entities are found.
func (nsdq *NumericalStatDescriptionQuery) OnlyID(ctx context.Context) (id guidgql.GUID, err error) {
	var ids []guidgql.GUID
	if ids, err = nsdq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{numericalstatdescription.Label}
	default:
		err = &NotSingularError{numericalstatdescription.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (nsdq *NumericalStatDescriptionQuery) OnlyIDX(ctx context.Context) guidgql.GUID {
	id, err := nsdq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of NumericalStatDescriptions.
func (nsdq *NumericalStatDescriptionQuery) All(ctx context.Context) ([]*NumericalStatDescription, error) {
	if err := nsdq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return nsdq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (nsdq *NumericalStatDescriptionQuery) AllX(ctx context.Context) []*NumericalStatDescription {
	nodes, err := nsdq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of NumericalStatDescription IDs.
func (nsdq *NumericalStatDescriptionQuery) IDs(ctx context.Context) ([]guidgql.GUID, error) {
	var ids []guidgql.GUID
	if err := nsdq.Select(numericalstatdescription.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (nsdq *NumericalStatDescriptionQuery) IDsX(ctx context.Context) []guidgql.GUID {
	ids, err := nsdq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (nsdq *NumericalStatDescriptionQuery) Count(ctx context.Context) (int, error) {
	if err := nsdq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return nsdq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (nsdq *NumericalStatDescriptionQuery) CountX(ctx context.Context) int {
	count, err := nsdq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (nsdq *NumericalStatDescriptionQuery) Exist(ctx context.Context) (bool, error) {
	if err := nsdq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return nsdq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (nsdq *NumericalStatDescriptionQuery) ExistX(ctx context.Context) bool {
	exist, err := nsdq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the NumericalStatDescriptionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (nsdq *NumericalStatDescriptionQuery) Clone() *NumericalStatDescriptionQuery {
	if nsdq == nil {
		return nil
	}
	return &NumericalStatDescriptionQuery{
		config:             nsdq.config,
		limit:              nsdq.limit,
		offset:             nsdq.offset,
		order:              append([]OrderFunc{}, nsdq.order...),
		predicates:         append([]predicate.NumericalStatDescription{}, nsdq.predicates...),
		withGame:           nsdq.withGame.Clone(),
		withNumericalStats: nsdq.withNumericalStats.Clone(),
		// clone intermediate query.
		sql:    nsdq.sql.Clone(),
		path:   nsdq.path,
		unique: nsdq.unique,
	}
}

// WithGame tells the query-builder to eager-load the nodes that are connected to
// the "game" edge. The optional arguments are used to configure the query builder of the edge.
func (nsdq *NumericalStatDescriptionQuery) WithGame(opts ...func(*GameQuery)) *NumericalStatDescriptionQuery {
	query := &GameQuery{config: nsdq.config}
	for _, opt := range opts {
		opt(query)
	}
	nsdq.withGame = query
	return nsdq
}

// WithNumericalStats tells the query-builder to eager-load the nodes that are connected to
// the "numerical_stats" edge. The optional arguments are used to configure the query builder of the edge.
func (nsdq *NumericalStatDescriptionQuery) WithNumericalStats(opts ...func(*NumericalStatQuery)) *NumericalStatDescriptionQuery {
	query := &NumericalStatQuery{config: nsdq.config}
	for _, opt := range opts {
		opt(query)
	}
	nsdq.withNumericalStats = query
	return nsdq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.NumericalStatDescription.Query().
//		GroupBy(numericalstatdescription.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (nsdq *NumericalStatDescriptionQuery) GroupBy(field string, fields ...string) *NumericalStatDescriptionGroupBy {
	grbuild := &NumericalStatDescriptionGroupBy{config: nsdq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := nsdq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return nsdq.sqlQuery(ctx), nil
	}
	grbuild.label = numericalstatdescription.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.NumericalStatDescription.Query().
//		Select(numericalstatdescription.FieldName).
//		Scan(ctx, &v)
func (nsdq *NumericalStatDescriptionQuery) Select(fields ...string) *NumericalStatDescriptionSelect {
	nsdq.fields = append(nsdq.fields, fields...)
	selbuild := &NumericalStatDescriptionSelect{NumericalStatDescriptionQuery: nsdq}
	selbuild.label = numericalstatdescription.Label
	selbuild.flds, selbuild.scan = &nsdq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a NumericalStatDescriptionSelect configured with the given aggregations.
func (nsdq *NumericalStatDescriptionQuery) Aggregate(fns ...AggregateFunc) *NumericalStatDescriptionSelect {
	return nsdq.Select().Aggregate(fns...)
}

func (nsdq *NumericalStatDescriptionQuery) prepareQuery(ctx context.Context) error {
	for _, f := range nsdq.fields {
		if !numericalstatdescription.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if nsdq.path != nil {
		prev, err := nsdq.path(ctx)
		if err != nil {
			return err
		}
		nsdq.sql = prev
	}
	return nil
}

func (nsdq *NumericalStatDescriptionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*NumericalStatDescription, error) {
	var (
		nodes       = []*NumericalStatDescription{}
		_spec       = nsdq.querySpec()
		loadedTypes = [2]bool{
			nsdq.withGame != nil,
			nsdq.withNumericalStats != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*NumericalStatDescription).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &NumericalStatDescription{config: nsdq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(nsdq.modifiers) > 0 {
		_spec.Modifiers = nsdq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, nsdq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := nsdq.withGame; query != nil {
		if err := nsdq.loadGame(ctx, query, nodes,
			func(n *NumericalStatDescription) { n.Edges.Game = []*Game{} },
			func(n *NumericalStatDescription, e *Game) { n.Edges.Game = append(n.Edges.Game, e) }); err != nil {
			return nil, err
		}
	}
	if query := nsdq.withNumericalStats; query != nil {
		if err := nsdq.loadNumericalStats(ctx, query, nodes,
			func(n *NumericalStatDescription) { n.Edges.NumericalStats = []*NumericalStat{} },
			func(n *NumericalStatDescription, e *NumericalStat) {
				n.Edges.NumericalStats = append(n.Edges.NumericalStats, e)
			}); err != nil {
			return nil, err
		}
	}
	for name, query := range nsdq.withNamedGame {
		if err := nsdq.loadGame(ctx, query, nodes,
			func(n *NumericalStatDescription) { n.appendNamedGame(name) },
			func(n *NumericalStatDescription, e *Game) { n.appendNamedGame(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range nsdq.withNamedNumericalStats {
		if err := nsdq.loadNumericalStats(ctx, query, nodes,
			func(n *NumericalStatDescription) { n.appendNamedNumericalStats(name) },
			func(n *NumericalStatDescription, e *NumericalStat) { n.appendNamedNumericalStats(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range nsdq.loadTotal {
		if err := nsdq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (nsdq *NumericalStatDescriptionQuery) loadGame(ctx context.Context, query *GameQuery, nodes []*NumericalStatDescription, init func(*NumericalStatDescription), assign func(*NumericalStatDescription, *Game)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[guidgql.GUID]*NumericalStatDescription)
	nids := make(map[guidgql.GUID]map[*NumericalStatDescription]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(numericalstatdescription.GameTable)
		s.Join(joinT).On(s.C(game.FieldID), joinT.C(numericalstatdescription.GamePrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(numericalstatdescription.GamePrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(numericalstatdescription.GamePrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(guidgql.GUID)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := *values[0].(*guidgql.GUID)
			inValue := *values[1].(*guidgql.GUID)
			if nids[inValue] == nil {
				nids[inValue] = map[*NumericalStatDescription]struct{}{byID[outValue]: {}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "game" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (nsdq *NumericalStatDescriptionQuery) loadNumericalStats(ctx context.Context, query *NumericalStatQuery, nodes []*NumericalStatDescription, init func(*NumericalStatDescription), assign func(*NumericalStatDescription, *NumericalStat)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[guidgql.GUID]*NumericalStatDescription)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.NumericalStat(func(s *sql.Selector) {
		s.Where(sql.InValues(numericalstatdescription.NumericalStatsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.numerical_stat_description_numerical_stats
		if fk == nil {
			return fmt.Errorf(`foreign-key "numerical_stat_description_numerical_stats" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "numerical_stat_description_numerical_stats" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (nsdq *NumericalStatDescriptionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := nsdq.querySpec()
	if len(nsdq.modifiers) > 0 {
		_spec.Modifiers = nsdq.modifiers
	}
	_spec.Node.Columns = nsdq.fields
	if len(nsdq.fields) > 0 {
		_spec.Unique = nsdq.unique != nil && *nsdq.unique
	}
	return sqlgraph.CountNodes(ctx, nsdq.driver, _spec)
}

func (nsdq *NumericalStatDescriptionQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := nsdq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (nsdq *NumericalStatDescriptionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   numericalstatdescription.Table,
			Columns: numericalstatdescription.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: numericalstatdescription.FieldID,
			},
		},
		From:   nsdq.sql,
		Unique: true,
	}
	if unique := nsdq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := nsdq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, numericalstatdescription.FieldID)
		for i := range fields {
			if fields[i] != numericalstatdescription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := nsdq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := nsdq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := nsdq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := nsdq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (nsdq *NumericalStatDescriptionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(nsdq.driver.Dialect())
	t1 := builder.Table(numericalstatdescription.Table)
	columns := nsdq.fields
	if len(columns) == 0 {
		columns = numericalstatdescription.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if nsdq.sql != nil {
		selector = nsdq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if nsdq.unique != nil && *nsdq.unique {
		selector.Distinct()
	}
	for _, p := range nsdq.predicates {
		p(selector)
	}
	for _, p := range nsdq.order {
		p(selector)
	}
	if offset := nsdq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := nsdq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedGame tells the query-builder to eager-load the nodes that are connected to the "game"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (nsdq *NumericalStatDescriptionQuery) WithNamedGame(name string, opts ...func(*GameQuery)) *NumericalStatDescriptionQuery {
	query := &GameQuery{config: nsdq.config}
	for _, opt := range opts {
		opt(query)
	}
	if nsdq.withNamedGame == nil {
		nsdq.withNamedGame = make(map[string]*GameQuery)
	}
	nsdq.withNamedGame[name] = query
	return nsdq
}

// WithNamedNumericalStats tells the query-builder to eager-load the nodes that are connected to the "numerical_stats"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (nsdq *NumericalStatDescriptionQuery) WithNamedNumericalStats(name string, opts ...func(*NumericalStatQuery)) *NumericalStatDescriptionQuery {
	query := &NumericalStatQuery{config: nsdq.config}
	for _, opt := range opts {
		opt(query)
	}
	if nsdq.withNamedNumericalStats == nil {
		nsdq.withNamedNumericalStats = make(map[string]*NumericalStatQuery)
	}
	nsdq.withNamedNumericalStats[name] = query
	return nsdq
}

// NumericalStatDescriptionGroupBy is the group-by builder for NumericalStatDescription entities.
type NumericalStatDescriptionGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (nsdgb *NumericalStatDescriptionGroupBy) Aggregate(fns ...AggregateFunc) *NumericalStatDescriptionGroupBy {
	nsdgb.fns = append(nsdgb.fns, fns...)
	return nsdgb
}

// Scan applies the group-by query and scans the result into the given value.
func (nsdgb *NumericalStatDescriptionGroupBy) Scan(ctx context.Context, v any) error {
	query, err := nsdgb.path(ctx)
	if err != nil {
		return err
	}
	nsdgb.sql = query
	return nsdgb.sqlScan(ctx, v)
}

func (nsdgb *NumericalStatDescriptionGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range nsdgb.fields {
		if !numericalstatdescription.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := nsdgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := nsdgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (nsdgb *NumericalStatDescriptionGroupBy) sqlQuery() *sql.Selector {
	selector := nsdgb.sql.Select()
	aggregation := make([]string, 0, len(nsdgb.fns))
	for _, fn := range nsdgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(nsdgb.fields)+len(nsdgb.fns))
		for _, f := range nsdgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(nsdgb.fields...)...)
}

// NumericalStatDescriptionSelect is the builder for selecting fields of NumericalStatDescription entities.
type NumericalStatDescriptionSelect struct {
	*NumericalStatDescriptionQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (nsds *NumericalStatDescriptionSelect) Aggregate(fns ...AggregateFunc) *NumericalStatDescriptionSelect {
	nsds.fns = append(nsds.fns, fns...)
	return nsds
}

// Scan applies the selector query and scans the result into the given value.
func (nsds *NumericalStatDescriptionSelect) Scan(ctx context.Context, v any) error {
	if err := nsds.prepareQuery(ctx); err != nil {
		return err
	}
	nsds.sql = nsds.NumericalStatDescriptionQuery.sqlQuery(ctx)
	return nsds.sqlScan(ctx, v)
}

func (nsds *NumericalStatDescriptionSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(nsds.fns))
	for _, fn := range nsds.fns {
		aggregation = append(aggregation, fn(nsds.sql))
	}
	switch n := len(*nsds.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		nsds.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		nsds.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := nsds.sql.Query()
	if err := nsds.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
