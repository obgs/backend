// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-boardgame-stats/backend/internal/ent/game"
	"github.com/open-boardgame-stats/backend/internal/ent/gamefavorite"
	"github.com/open-boardgame-stats/backend/internal/ent/predicate"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
	"github.com/open-boardgame-stats/backend/internal/ent/user"
)

// GameFavoriteUpdate is the builder for updating GameFavorite entities.
type GameFavoriteUpdate struct {
	config
	hooks    []Hook
	mutation *GameFavoriteMutation
}

// Where appends a list predicates to the GameFavoriteUpdate builder.
func (gfu *GameFavoriteUpdate) Where(ps ...predicate.GameFavorite) *GameFavoriteUpdate {
	gfu.mutation.Where(ps...)
	return gfu
}

// SetGameID sets the "game" edge to the Game entity by ID.
func (gfu *GameFavoriteUpdate) SetGameID(id guidgql.GUID) *GameFavoriteUpdate {
	gfu.mutation.SetGameID(id)
	return gfu
}

// SetGame sets the "game" edge to the Game entity.
func (gfu *GameFavoriteUpdate) SetGame(g *Game) *GameFavoriteUpdate {
	return gfu.SetGameID(g.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (gfu *GameFavoriteUpdate) SetUserID(id guidgql.GUID) *GameFavoriteUpdate {
	gfu.mutation.SetUserID(id)
	return gfu
}

// SetUser sets the "user" edge to the User entity.
func (gfu *GameFavoriteUpdate) SetUser(u *User) *GameFavoriteUpdate {
	return gfu.SetUserID(u.ID)
}

// Mutation returns the GameFavoriteMutation object of the builder.
func (gfu *GameFavoriteUpdate) Mutation() *GameFavoriteMutation {
	return gfu.mutation
}

// ClearGame clears the "game" edge to the Game entity.
func (gfu *GameFavoriteUpdate) ClearGame() *GameFavoriteUpdate {
	gfu.mutation.ClearGame()
	return gfu
}

// ClearUser clears the "user" edge to the User entity.
func (gfu *GameFavoriteUpdate) ClearUser() *GameFavoriteUpdate {
	gfu.mutation.ClearUser()
	return gfu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gfu *GameFavoriteUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, GameFavoriteMutation](ctx, gfu.sqlSave, gfu.mutation, gfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gfu *GameFavoriteUpdate) SaveX(ctx context.Context) int {
	affected, err := gfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gfu *GameFavoriteUpdate) Exec(ctx context.Context) error {
	_, err := gfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gfu *GameFavoriteUpdate) ExecX(ctx context.Context) {
	if err := gfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gfu *GameFavoriteUpdate) check() error {
	if _, ok := gfu.mutation.GameID(); gfu.mutation.GameCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GameFavorite.game"`)
	}
	if _, ok := gfu.mutation.UserID(); gfu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GameFavorite.user"`)
	}
	return nil
}

func (gfu *GameFavoriteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gfu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(gamefavorite.Table, gamefavorite.Columns, sqlgraph.NewFieldSpec(gamefavorite.FieldID, field.TypeString))
	if ps := gfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if gfu.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gamefavorite.GameTable,
			Columns: []string{gamefavorite.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gfu.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gamefavorite.GameTable,
			Columns: []string{gamefavorite.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gfu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gamefavorite.UserTable,
			Columns: []string{gamefavorite.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gfu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gamefavorite.UserTable,
			Columns: []string{gamefavorite.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gamefavorite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gfu.mutation.done = true
	return n, nil
}

// GameFavoriteUpdateOne is the builder for updating a single GameFavorite entity.
type GameFavoriteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GameFavoriteMutation
}

// SetGameID sets the "game" edge to the Game entity by ID.
func (gfuo *GameFavoriteUpdateOne) SetGameID(id guidgql.GUID) *GameFavoriteUpdateOne {
	gfuo.mutation.SetGameID(id)
	return gfuo
}

// SetGame sets the "game" edge to the Game entity.
func (gfuo *GameFavoriteUpdateOne) SetGame(g *Game) *GameFavoriteUpdateOne {
	return gfuo.SetGameID(g.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (gfuo *GameFavoriteUpdateOne) SetUserID(id guidgql.GUID) *GameFavoriteUpdateOne {
	gfuo.mutation.SetUserID(id)
	return gfuo
}

// SetUser sets the "user" edge to the User entity.
func (gfuo *GameFavoriteUpdateOne) SetUser(u *User) *GameFavoriteUpdateOne {
	return gfuo.SetUserID(u.ID)
}

// Mutation returns the GameFavoriteMutation object of the builder.
func (gfuo *GameFavoriteUpdateOne) Mutation() *GameFavoriteMutation {
	return gfuo.mutation
}

// ClearGame clears the "game" edge to the Game entity.
func (gfuo *GameFavoriteUpdateOne) ClearGame() *GameFavoriteUpdateOne {
	gfuo.mutation.ClearGame()
	return gfuo
}

// ClearUser clears the "user" edge to the User entity.
func (gfuo *GameFavoriteUpdateOne) ClearUser() *GameFavoriteUpdateOne {
	gfuo.mutation.ClearUser()
	return gfuo
}

// Where appends a list predicates to the GameFavoriteUpdate builder.
func (gfuo *GameFavoriteUpdateOne) Where(ps ...predicate.GameFavorite) *GameFavoriteUpdateOne {
	gfuo.mutation.Where(ps...)
	return gfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gfuo *GameFavoriteUpdateOne) Select(field string, fields ...string) *GameFavoriteUpdateOne {
	gfuo.fields = append([]string{field}, fields...)
	return gfuo
}

// Save executes the query and returns the updated GameFavorite entity.
func (gfuo *GameFavoriteUpdateOne) Save(ctx context.Context) (*GameFavorite, error) {
	return withHooks[*GameFavorite, GameFavoriteMutation](ctx, gfuo.sqlSave, gfuo.mutation, gfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gfuo *GameFavoriteUpdateOne) SaveX(ctx context.Context) *GameFavorite {
	node, err := gfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gfuo *GameFavoriteUpdateOne) Exec(ctx context.Context) error {
	_, err := gfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gfuo *GameFavoriteUpdateOne) ExecX(ctx context.Context) {
	if err := gfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gfuo *GameFavoriteUpdateOne) check() error {
	if _, ok := gfuo.mutation.GameID(); gfuo.mutation.GameCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GameFavorite.game"`)
	}
	if _, ok := gfuo.mutation.UserID(); gfuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GameFavorite.user"`)
	}
	return nil
}

func (gfuo *GameFavoriteUpdateOne) sqlSave(ctx context.Context) (_node *GameFavorite, err error) {
	if err := gfuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(gamefavorite.Table, gamefavorite.Columns, sqlgraph.NewFieldSpec(gamefavorite.FieldID, field.TypeString))
	id, ok := gfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GameFavorite.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gamefavorite.FieldID)
		for _, f := range fields {
			if !gamefavorite.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != gamefavorite.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if gfuo.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gamefavorite.GameTable,
			Columns: []string{gamefavorite.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gfuo.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gamefavorite.GameTable,
			Columns: []string{gamefavorite.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gfuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gamefavorite.UserTable,
			Columns: []string{gamefavorite.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gfuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   gamefavorite.UserTable,
			Columns: []string{gamefavorite.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GameFavorite{config: gfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gamefavorite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gfuo.mutation.done = true
	return _node, nil
}
