// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/open-boardgame-stats/backend/internal/ent/playersupervisionrequest"
	"github.com/open-boardgame-stats/backend/internal/ent/playersupervisionrequestapproval"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
	"github.com/open-boardgame-stats/backend/internal/ent/user"
)

// PlayerSupervisionRequestApproval is the model entity for the PlayerSupervisionRequestApproval schema.
type PlayerSupervisionRequestApproval struct {
	config `json:"-"`
	// ID of the ent.
	ID guidgql.GUID `json:"id,omitempty"`
	// Approved holds the value of the "approved" field.
	Approved *bool `json:"approved,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlayerSupervisionRequestApprovalQuery when eager-loading is set.
	Edges                                PlayerSupervisionRequestApprovalEdges `json:"edges"`
	player_supervision_request_approvals *guidgql.GUID
	user_supervision_request_approvals   *guidgql.GUID
}

// PlayerSupervisionRequestApprovalEdges holds the relations/edges for other nodes in the graph.
type PlayerSupervisionRequestApprovalEdges struct {
	// Approver holds the value of the approver edge.
	Approver *User `json:"approver,omitempty"`
	// SupervisionRequest holds the value of the supervision_request edge.
	SupervisionRequest *PlayerSupervisionRequest `json:"supervision_request,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// ApproverOrErr returns the Approver value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlayerSupervisionRequestApprovalEdges) ApproverOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Approver == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Approver, nil
	}
	return nil, &NotLoadedError{edge: "approver"}
}

// SupervisionRequestOrErr returns the SupervisionRequest value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlayerSupervisionRequestApprovalEdges) SupervisionRequestOrErr() (*PlayerSupervisionRequest, error) {
	if e.loadedTypes[1] {
		if e.SupervisionRequest == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: playersupervisionrequest.Label}
		}
		return e.SupervisionRequest, nil
	}
	return nil, &NotLoadedError{edge: "supervision_request"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PlayerSupervisionRequestApproval) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case playersupervisionrequestapproval.FieldID:
			values[i] = new(guidgql.GUID)
		case playersupervisionrequestapproval.FieldApproved:
			values[i] = new(sql.NullBool)
		case playersupervisionrequestapproval.ForeignKeys[0]: // player_supervision_request_approvals
			values[i] = &sql.NullScanner{S: new(guidgql.GUID)}
		case playersupervisionrequestapproval.ForeignKeys[1]: // user_supervision_request_approvals
			values[i] = &sql.NullScanner{S: new(guidgql.GUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type PlayerSupervisionRequestApproval", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PlayerSupervisionRequestApproval fields.
func (psra *PlayerSupervisionRequestApproval) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case playersupervisionrequestapproval.FieldID:
			if value, ok := values[i].(*guidgql.GUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				psra.ID = *value
			}
		case playersupervisionrequestapproval.FieldApproved:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field approved", values[i])
			} else if value.Valid {
				psra.Approved = new(bool)
				*psra.Approved = value.Bool
			}
		case playersupervisionrequestapproval.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field player_supervision_request_approvals", values[i])
			} else if value.Valid {
				psra.player_supervision_request_approvals = new(guidgql.GUID)
				*psra.player_supervision_request_approvals = *value.S.(*guidgql.GUID)
			}
		case playersupervisionrequestapproval.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_supervision_request_approvals", values[i])
			} else if value.Valid {
				psra.user_supervision_request_approvals = new(guidgql.GUID)
				*psra.user_supervision_request_approvals = *value.S.(*guidgql.GUID)
			}
		}
	}
	return nil
}

// QueryApprover queries the "approver" edge of the PlayerSupervisionRequestApproval entity.
func (psra *PlayerSupervisionRequestApproval) QueryApprover() *UserQuery {
	return (&PlayerSupervisionRequestApprovalClient{config: psra.config}).QueryApprover(psra)
}

// QuerySupervisionRequest queries the "supervision_request" edge of the PlayerSupervisionRequestApproval entity.
func (psra *PlayerSupervisionRequestApproval) QuerySupervisionRequest() *PlayerSupervisionRequestQuery {
	return (&PlayerSupervisionRequestApprovalClient{config: psra.config}).QuerySupervisionRequest(psra)
}

// Update returns a builder for updating this PlayerSupervisionRequestApproval.
// Note that you need to call PlayerSupervisionRequestApproval.Unwrap() before calling this method if this PlayerSupervisionRequestApproval
// was returned from a transaction, and the transaction was committed or rolled back.
func (psra *PlayerSupervisionRequestApproval) Update() *PlayerSupervisionRequestApprovalUpdateOne {
	return (&PlayerSupervisionRequestApprovalClient{config: psra.config}).UpdateOne(psra)
}

// Unwrap unwraps the PlayerSupervisionRequestApproval entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (psra *PlayerSupervisionRequestApproval) Unwrap() *PlayerSupervisionRequestApproval {
	_tx, ok := psra.config.driver.(*txDriver)
	if !ok {
		panic("ent: PlayerSupervisionRequestApproval is not a transactional entity")
	}
	psra.config.driver = _tx.drv
	return psra
}

// String implements the fmt.Stringer.
func (psra *PlayerSupervisionRequestApproval) String() string {
	var builder strings.Builder
	builder.WriteString("PlayerSupervisionRequestApproval(")
	builder.WriteString(fmt.Sprintf("id=%v, ", psra.ID))
	if v := psra.Approved; v != nil {
		builder.WriteString("approved=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// PlayerSupervisionRequestApprovals is a parsable slice of PlayerSupervisionRequestApproval.
type PlayerSupervisionRequestApprovals []*PlayerSupervisionRequestApproval

func (psra PlayerSupervisionRequestApprovals) config(cfg config) {
	for _i := range psra {
		psra[_i].config = cfg
	}
}
