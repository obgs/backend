// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/contrib/entgql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/hashicorp/go-multierror"
	"github.com/open-boardgame-stats/backend/internal/ent/game"
	"github.com/open-boardgame-stats/backend/internal/ent/gameversion"
	"github.com/open-boardgame-stats/backend/internal/ent/group"
	"github.com/open-boardgame-stats/backend/internal/ent/groupmembership"
	"github.com/open-boardgame-stats/backend/internal/ent/groupmembershipapplication"
	"github.com/open-boardgame-stats/backend/internal/ent/groupsettings"
	"github.com/open-boardgame-stats/backend/internal/ent/match"
	"github.com/open-boardgame-stats/backend/internal/ent/player"
	"github.com/open-boardgame-stats/backend/internal/ent/playersupervisionrequest"
	"github.com/open-boardgame-stats/backend/internal/ent/playersupervisionrequestapproval"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
	"github.com/open-boardgame-stats/backend/internal/ent/statdescription"
	"github.com/open-boardgame-stats/backend/internal/ent/statistic"
	"github.com/open-boardgame-stats/backend/internal/ent/user"
)

// Noder wraps the basic Node method.
type Noder interface {
	IsNode()
}

var gameImplementors = []string{"Game", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Game) IsNode() {}

var gameversionImplementors = []string{"GameVersion", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*GameVersion) IsNode() {}

var groupImplementors = []string{"Group", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Group) IsNode() {}

var groupmembershipImplementors = []string{"GroupMembership", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*GroupMembership) IsNode() {}

var groupmembershipapplicationImplementors = []string{"GroupMembershipApplication", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*GroupMembershipApplication) IsNode() {}

var groupsettingsImplementors = []string{"GroupSettings", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*GroupSettings) IsNode() {}

var matchImplementors = []string{"Match", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Match) IsNode() {}

var playerImplementors = []string{"Player", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Player) IsNode() {}

var playersupervisionrequestImplementors = []string{"PlayerSupervisionRequest", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*PlayerSupervisionRequest) IsNode() {}

var playersupervisionrequestapprovalImplementors = []string{"PlayerSupervisionRequestApproval", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*PlayerSupervisionRequestApproval) IsNode() {}

var statdescriptionImplementors = []string{"StatDescription", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*StatDescription) IsNode() {}

var statisticImplementors = []string{"Statistic", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*Statistic) IsNode() {}

var userImplementors = []string{"User", "Node"}

// IsNode implements the Node interface check for GQLGen.
func (*User) IsNode() {}

var errNodeInvalidID = &NotFoundError{"node"}

// NodeOption allows configuring the Noder execution using functional options.
type NodeOption func(*nodeOptions)

// WithNodeType sets the node Type resolver function (i.e. the table to query).
// If was not provided, the table will be derived from the universal-id
// configuration as described in: https://entgo.io/docs/migrate/#universal-ids.
func WithNodeType(f func(context.Context, guidgql.GUID) (string, error)) NodeOption {
	return func(o *nodeOptions) {
		o.nodeType = f
	}
}

// WithFixedNodeType sets the Type of the node to a fixed value.
func WithFixedNodeType(t string) NodeOption {
	return WithNodeType(func(context.Context, guidgql.GUID) (string, error) {
		return t, nil
	})
}

type nodeOptions struct {
	nodeType func(context.Context, guidgql.GUID) (string, error)
}

func (c *Client) newNodeOpts(opts []NodeOption) *nodeOptions {
	nopts := &nodeOptions{}
	for _, opt := range opts {
		opt(nopts)
	}
	if nopts.nodeType == nil {
		nopts.nodeType = func(ctx context.Context, id guidgql.GUID) (string, error) {
			return "", fmt.Errorf("cannot resolve noder (%v) without its type", id)
		}
	}
	return nopts
}

// Noder returns a Node by its id. If the NodeType was not provided, it will
// be derived from the id value according to the universal-id configuration.
//
//	c.Noder(ctx, id)
//	c.Noder(ctx, id, ent.WithNodeType(typeResolver))
func (c *Client) Noder(ctx context.Context, id guidgql.GUID, opts ...NodeOption) (_ Noder, err error) {
	defer func() {
		if IsNotFound(err) {
			err = multierror.Append(err, entgql.ErrNodeNotFound(id))
		}
	}()
	table, err := c.newNodeOpts(opts).nodeType(ctx, id)
	if err != nil {
		return nil, err
	}
	return c.noder(ctx, table, id)
}

func (c *Client) noder(ctx context.Context, table string, id guidgql.GUID) (Noder, error) {
	switch table {
	case game.Table:
		var uid guidgql.GUID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Game.Query().
			Where(game.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, gameImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case gameversion.Table:
		var uid guidgql.GUID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.GameVersion.Query().
			Where(gameversion.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, gameversionImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case group.Table:
		var uid guidgql.GUID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Group.Query().
			Where(group.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, groupImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case groupmembership.Table:
		var uid guidgql.GUID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.GroupMembership.Query().
			Where(groupmembership.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, groupmembershipImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case groupmembershipapplication.Table:
		var uid guidgql.GUID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.GroupMembershipApplication.Query().
			Where(groupmembershipapplication.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, groupmembershipapplicationImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case groupsettings.Table:
		var uid guidgql.GUID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.GroupSettings.Query().
			Where(groupsettings.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, groupsettingsImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case match.Table:
		var uid guidgql.GUID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Match.Query().
			Where(match.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, matchImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case player.Table:
		var uid guidgql.GUID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Player.Query().
			Where(player.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, playerImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case playersupervisionrequest.Table:
		var uid guidgql.GUID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.PlayerSupervisionRequest.Query().
			Where(playersupervisionrequest.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, playersupervisionrequestImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case playersupervisionrequestapproval.Table:
		var uid guidgql.GUID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.PlayerSupervisionRequestApproval.Query().
			Where(playersupervisionrequestapproval.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, playersupervisionrequestapprovalImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case statdescription.Table:
		var uid guidgql.GUID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.StatDescription.Query().
			Where(statdescription.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, statdescriptionImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case statistic.Table:
		var uid guidgql.GUID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.Statistic.Query().
			Where(statistic.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, statisticImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	case user.Table:
		var uid guidgql.GUID
		if err := uid.UnmarshalGQL(id); err != nil {
			return nil, err
		}
		query := c.User.Query().
			Where(user.ID(uid))
		if fc := graphql.GetFieldContext(ctx); fc != nil {
			if err := query.collectField(ctx, true, graphql.GetOperationContext(ctx), fc.Field, nil, userImplementors...); err != nil {
				return nil, err
			}
		}
		return query.Only(ctx)
	default:
		return nil, fmt.Errorf("cannot resolve noder from table %q: %w", table, errNodeInvalidID)
	}
}

func (c *Client) Noders(ctx context.Context, ids []guidgql.GUID, opts ...NodeOption) ([]Noder, error) {
	switch len(ids) {
	case 1:
		noder, err := c.Noder(ctx, ids[0], opts...)
		if err != nil {
			return nil, err
		}
		return []Noder{noder}, nil
	case 0:
		return []Noder{}, nil
	}

	noders := make([]Noder, len(ids))
	errors := make([]error, len(ids))
	tables := make(map[string][]guidgql.GUID)
	id2idx := make(map[guidgql.GUID][]int, len(ids))
	nopts := c.newNodeOpts(opts)
	for i, id := range ids {
		table, err := nopts.nodeType(ctx, id)
		if err != nil {
			errors[i] = err
			continue
		}
		tables[table] = append(tables[table], id)
		id2idx[id] = append(id2idx[id], i)
	}

	for table, ids := range tables {
		nodes, err := c.noders(ctx, table, ids)
		if err != nil {
			for _, id := range ids {
				for _, idx := range id2idx[id] {
					errors[idx] = err
				}
			}
		} else {
			for i, id := range ids {
				for _, idx := range id2idx[id] {
					noders[idx] = nodes[i]
				}
			}
		}
	}

	for i, id := range ids {
		if errors[i] == nil {
			if noders[i] != nil {
				continue
			}
			errors[i] = entgql.ErrNodeNotFound(id)
		} else if IsNotFound(errors[i]) {
			errors[i] = multierror.Append(errors[i], entgql.ErrNodeNotFound(id))
		}
		ctx := graphql.WithPathContext(ctx,
			graphql.NewPathWithIndex(i),
		)
		graphql.AddError(ctx, errors[i])
	}
	return noders, nil
}

func (c *Client) noders(ctx context.Context, table string, ids []guidgql.GUID) ([]Noder, error) {
	noders := make([]Noder, len(ids))
	idmap := make(map[guidgql.GUID][]*Noder, len(ids))
	for i, id := range ids {
		idmap[id] = append(idmap[id], &noders[i])
	}
	switch table {
	case game.Table:
		query := c.Game.Query().
			Where(game.IDIn(ids...))
		query, err := query.CollectFields(ctx, gameImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case gameversion.Table:
		query := c.GameVersion.Query().
			Where(gameversion.IDIn(ids...))
		query, err := query.CollectFields(ctx, gameversionImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case group.Table:
		query := c.Group.Query().
			Where(group.IDIn(ids...))
		query, err := query.CollectFields(ctx, groupImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case groupmembership.Table:
		query := c.GroupMembership.Query().
			Where(groupmembership.IDIn(ids...))
		query, err := query.CollectFields(ctx, groupmembershipImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case groupmembershipapplication.Table:
		query := c.GroupMembershipApplication.Query().
			Where(groupmembershipapplication.IDIn(ids...))
		query, err := query.CollectFields(ctx, groupmembershipapplicationImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case groupsettings.Table:
		query := c.GroupSettings.Query().
			Where(groupsettings.IDIn(ids...))
		query, err := query.CollectFields(ctx, groupsettingsImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case match.Table:
		query := c.Match.Query().
			Where(match.IDIn(ids...))
		query, err := query.CollectFields(ctx, matchImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case player.Table:
		query := c.Player.Query().
			Where(player.IDIn(ids...))
		query, err := query.CollectFields(ctx, playerImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case playersupervisionrequest.Table:
		query := c.PlayerSupervisionRequest.Query().
			Where(playersupervisionrequest.IDIn(ids...))
		query, err := query.CollectFields(ctx, playersupervisionrequestImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case playersupervisionrequestapproval.Table:
		query := c.PlayerSupervisionRequestApproval.Query().
			Where(playersupervisionrequestapproval.IDIn(ids...))
		query, err := query.CollectFields(ctx, playersupervisionrequestapprovalImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case statdescription.Table:
		query := c.StatDescription.Query().
			Where(statdescription.IDIn(ids...))
		query, err := query.CollectFields(ctx, statdescriptionImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case statistic.Table:
		query := c.Statistic.Query().
			Where(statistic.IDIn(ids...))
		query, err := query.CollectFields(ctx, statisticImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case user.Table:
		query := c.User.Query().
			Where(user.IDIn(ids...))
		query, err := query.CollectFields(ctx, userImplementors...)
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	default:
		return nil, fmt.Errorf("cannot resolve noders from table %q: %w", table, errNodeInvalidID)
	}
	return noders, nil
}
