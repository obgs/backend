// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-boardgame-stats/backend/internal/ent/match"
	"github.com/open-boardgame-stats/backend/internal/ent/player"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
	"github.com/open-boardgame-stats/backend/internal/ent/statdescription"
	"github.com/open-boardgame-stats/backend/internal/ent/statistic"
)

// Statistic is the model entity for the Statistic schema.
type Statistic struct {
	config `json:"-"`
	// ID of the ent.
	ID guidgql.GUID `json:"id,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StatisticQuery when eager-loading is set.
	Edges                  StatisticEdges `json:"edges"`
	match_stats            *guidgql.GUID
	player_stats           *guidgql.GUID
	stat_description_stats *guidgql.GUID
	selectValues           sql.SelectValues
}

// StatisticEdges holds the relations/edges for other nodes in the graph.
type StatisticEdges struct {
	// Match holds the value of the match edge.
	Match *Match `json:"match,omitempty"`
	// StatDescription holds the value of the stat_description edge.
	StatDescription *StatDescription `json:"stat_description,omitempty"`
	// Player holds the value of the player edge.
	Player *Player `json:"player,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int
}

// MatchOrErr returns the Match value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatisticEdges) MatchOrErr() (*Match, error) {
	if e.Match != nil {
		return e.Match, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: match.Label}
	}
	return nil, &NotLoadedError{edge: "match"}
}

// StatDescriptionOrErr returns the StatDescription value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatisticEdges) StatDescriptionOrErr() (*StatDescription, error) {
	if e.StatDescription != nil {
		return e.StatDescription, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: statdescription.Label}
	}
	return nil, &NotLoadedError{edge: "stat_description"}
}

// PlayerOrErr returns the Player value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatisticEdges) PlayerOrErr() (*Player, error) {
	if e.Player != nil {
		return e.Player, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: player.Label}
	}
	return nil, &NotLoadedError{edge: "player"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Statistic) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case statistic.FieldID:
			values[i] = new(guidgql.GUID)
		case statistic.FieldValue:
			values[i] = new(sql.NullString)
		case statistic.ForeignKeys[0]: // match_stats
			values[i] = &sql.NullScanner{S: new(guidgql.GUID)}
		case statistic.ForeignKeys[1]: // player_stats
			values[i] = &sql.NullScanner{S: new(guidgql.GUID)}
		case statistic.ForeignKeys[2]: // stat_description_stats
			values[i] = &sql.NullScanner{S: new(guidgql.GUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Statistic fields.
func (s *Statistic) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case statistic.FieldID:
			if value, ok := values[i].(*guidgql.GUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case statistic.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				s.Value = value.String
			}
		case statistic.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field match_stats", values[i])
			} else if value.Valid {
				s.match_stats = new(guidgql.GUID)
				*s.match_stats = *value.S.(*guidgql.GUID)
			}
		case statistic.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field player_stats", values[i])
			} else if value.Valid {
				s.player_stats = new(guidgql.GUID)
				*s.player_stats = *value.S.(*guidgql.GUID)
			}
		case statistic.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field stat_description_stats", values[i])
			} else if value.Valid {
				s.stat_description_stats = new(guidgql.GUID)
				*s.stat_description_stats = *value.S.(*guidgql.GUID)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the Statistic.
// This includes values selected through modifiers, order, etc.
func (s *Statistic) GetValue(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryMatch queries the "match" edge of the Statistic entity.
func (s *Statistic) QueryMatch() *MatchQuery {
	return NewStatisticClient(s.config).QueryMatch(s)
}

// QueryStatDescription queries the "stat_description" edge of the Statistic entity.
func (s *Statistic) QueryStatDescription() *StatDescriptionQuery {
	return NewStatisticClient(s.config).QueryStatDescription(s)
}

// QueryPlayer queries the "player" edge of the Statistic entity.
func (s *Statistic) QueryPlayer() *PlayerQuery {
	return NewStatisticClient(s.config).QueryPlayer(s)
}

// Update returns a builder for updating this Statistic.
// Note that you need to call Statistic.Unwrap() before calling this method if this Statistic
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Statistic) Update() *StatisticUpdateOne {
	return NewStatisticClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Statistic entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Statistic) Unwrap() *Statistic {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Statistic is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Statistic) String() string {
	var builder strings.Builder
	builder.WriteString("Statistic(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("value=")
	builder.WriteString(s.Value)
	builder.WriteByte(')')
	return builder.String()
}

// Statistics is a parsable slice of Statistic.
type Statistics []*Statistic
