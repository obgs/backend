// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-boardgame-stats/backend/internal/ent/match"
	"github.com/open-boardgame-stats/backend/internal/ent/numericalstat"
	"github.com/open-boardgame-stats/backend/internal/ent/numericalstatdescription"
	"github.com/open-boardgame-stats/backend/internal/ent/player"
	"github.com/open-boardgame-stats/backend/internal/ent/predicate"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
)

// NumericalStatUpdate is the builder for updating NumericalStat entities.
type NumericalStatUpdate struct {
	config
	hooks    []Hook
	mutation *NumericalStatMutation
}

// Where appends a list predicates to the NumericalStatUpdate builder.
func (nsu *NumericalStatUpdate) Where(ps ...predicate.NumericalStat) *NumericalStatUpdate {
	nsu.mutation.Where(ps...)
	return nsu
}

// SetValue sets the "value" field.
func (nsu *NumericalStatUpdate) SetValue(f float64) *NumericalStatUpdate {
	nsu.mutation.ResetValue()
	nsu.mutation.SetValue(f)
	return nsu
}

// AddValue adds f to the "value" field.
func (nsu *NumericalStatUpdate) AddValue(f float64) *NumericalStatUpdate {
	nsu.mutation.AddValue(f)
	return nsu
}

// SetMatchID sets the "match" edge to the Match entity by ID.
func (nsu *NumericalStatUpdate) SetMatchID(id guidgql.GUID) *NumericalStatUpdate {
	nsu.mutation.SetMatchID(id)
	return nsu
}

// SetMatch sets the "match" edge to the Match entity.
func (nsu *NumericalStatUpdate) SetMatch(m *Match) *NumericalStatUpdate {
	return nsu.SetMatchID(m.ID)
}

// SetNumericalStatDescriptionID sets the "numerical_stat_description" edge to the NumericalStatDescription entity by ID.
func (nsu *NumericalStatUpdate) SetNumericalStatDescriptionID(id guidgql.GUID) *NumericalStatUpdate {
	nsu.mutation.SetNumericalStatDescriptionID(id)
	return nsu
}

// SetNumericalStatDescription sets the "numerical_stat_description" edge to the NumericalStatDescription entity.
func (nsu *NumericalStatUpdate) SetNumericalStatDescription(n *NumericalStatDescription) *NumericalStatUpdate {
	return nsu.SetNumericalStatDescriptionID(n.ID)
}

// SetPlayerID sets the "player" edge to the Player entity by ID.
func (nsu *NumericalStatUpdate) SetPlayerID(id guidgql.GUID) *NumericalStatUpdate {
	nsu.mutation.SetPlayerID(id)
	return nsu
}

// SetPlayer sets the "player" edge to the Player entity.
func (nsu *NumericalStatUpdate) SetPlayer(p *Player) *NumericalStatUpdate {
	return nsu.SetPlayerID(p.ID)
}

// Mutation returns the NumericalStatMutation object of the builder.
func (nsu *NumericalStatUpdate) Mutation() *NumericalStatMutation {
	return nsu.mutation
}

// ClearMatch clears the "match" edge to the Match entity.
func (nsu *NumericalStatUpdate) ClearMatch() *NumericalStatUpdate {
	nsu.mutation.ClearMatch()
	return nsu
}

// ClearNumericalStatDescription clears the "numerical_stat_description" edge to the NumericalStatDescription entity.
func (nsu *NumericalStatUpdate) ClearNumericalStatDescription() *NumericalStatUpdate {
	nsu.mutation.ClearNumericalStatDescription()
	return nsu
}

// ClearPlayer clears the "player" edge to the Player entity.
func (nsu *NumericalStatUpdate) ClearPlayer() *NumericalStatUpdate {
	nsu.mutation.ClearPlayer()
	return nsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nsu *NumericalStatUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(nsu.hooks) == 0 {
		if err = nsu.check(); err != nil {
			return 0, err
		}
		affected, err = nsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NumericalStatMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nsu.check(); err != nil {
				return 0, err
			}
			nsu.mutation = mutation
			affected, err = nsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(nsu.hooks) - 1; i >= 0; i-- {
			if nsu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (nsu *NumericalStatUpdate) SaveX(ctx context.Context) int {
	affected, err := nsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nsu *NumericalStatUpdate) Exec(ctx context.Context) error {
	_, err := nsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nsu *NumericalStatUpdate) ExecX(ctx context.Context) {
	if err := nsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nsu *NumericalStatUpdate) check() error {
	if _, ok := nsu.mutation.MatchID(); nsu.mutation.MatchCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "NumericalStat.match"`)
	}
	if _, ok := nsu.mutation.NumericalStatDescriptionID(); nsu.mutation.NumericalStatDescriptionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "NumericalStat.numerical_stat_description"`)
	}
	if _, ok := nsu.mutation.PlayerID(); nsu.mutation.PlayerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "NumericalStat.player"`)
	}
	return nil
}

func (nsu *NumericalStatUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   numericalstat.Table,
			Columns: numericalstat.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: numericalstat.FieldID,
			},
		},
	}
	if ps := nsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nsu.mutation.Value(); ok {
		_spec.SetField(numericalstat.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := nsu.mutation.AddedValue(); ok {
		_spec.AddField(numericalstat.FieldValue, field.TypeFloat64, value)
	}
	if nsu.mutation.MatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   numericalstat.MatchTable,
			Columns: []string{numericalstat.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: match.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nsu.mutation.MatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   numericalstat.MatchTable,
			Columns: []string{numericalstat.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: match.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nsu.mutation.NumericalStatDescriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   numericalstat.NumericalStatDescriptionTable,
			Columns: []string{numericalstat.NumericalStatDescriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: numericalstatdescription.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nsu.mutation.NumericalStatDescriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   numericalstat.NumericalStatDescriptionTable,
			Columns: []string{numericalstat.NumericalStatDescriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: numericalstatdescription.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nsu.mutation.PlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   numericalstat.PlayerTable,
			Columns: []string{numericalstat.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: player.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nsu.mutation.PlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   numericalstat.PlayerTable,
			Columns: []string{numericalstat.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: player.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{numericalstat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// NumericalStatUpdateOne is the builder for updating a single NumericalStat entity.
type NumericalStatUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NumericalStatMutation
}

// SetValue sets the "value" field.
func (nsuo *NumericalStatUpdateOne) SetValue(f float64) *NumericalStatUpdateOne {
	nsuo.mutation.ResetValue()
	nsuo.mutation.SetValue(f)
	return nsuo
}

// AddValue adds f to the "value" field.
func (nsuo *NumericalStatUpdateOne) AddValue(f float64) *NumericalStatUpdateOne {
	nsuo.mutation.AddValue(f)
	return nsuo
}

// SetMatchID sets the "match" edge to the Match entity by ID.
func (nsuo *NumericalStatUpdateOne) SetMatchID(id guidgql.GUID) *NumericalStatUpdateOne {
	nsuo.mutation.SetMatchID(id)
	return nsuo
}

// SetMatch sets the "match" edge to the Match entity.
func (nsuo *NumericalStatUpdateOne) SetMatch(m *Match) *NumericalStatUpdateOne {
	return nsuo.SetMatchID(m.ID)
}

// SetNumericalStatDescriptionID sets the "numerical_stat_description" edge to the NumericalStatDescription entity by ID.
func (nsuo *NumericalStatUpdateOne) SetNumericalStatDescriptionID(id guidgql.GUID) *NumericalStatUpdateOne {
	nsuo.mutation.SetNumericalStatDescriptionID(id)
	return nsuo
}

// SetNumericalStatDescription sets the "numerical_stat_description" edge to the NumericalStatDescription entity.
func (nsuo *NumericalStatUpdateOne) SetNumericalStatDescription(n *NumericalStatDescription) *NumericalStatUpdateOne {
	return nsuo.SetNumericalStatDescriptionID(n.ID)
}

// SetPlayerID sets the "player" edge to the Player entity by ID.
func (nsuo *NumericalStatUpdateOne) SetPlayerID(id guidgql.GUID) *NumericalStatUpdateOne {
	nsuo.mutation.SetPlayerID(id)
	return nsuo
}

// SetPlayer sets the "player" edge to the Player entity.
func (nsuo *NumericalStatUpdateOne) SetPlayer(p *Player) *NumericalStatUpdateOne {
	return nsuo.SetPlayerID(p.ID)
}

// Mutation returns the NumericalStatMutation object of the builder.
func (nsuo *NumericalStatUpdateOne) Mutation() *NumericalStatMutation {
	return nsuo.mutation
}

// ClearMatch clears the "match" edge to the Match entity.
func (nsuo *NumericalStatUpdateOne) ClearMatch() *NumericalStatUpdateOne {
	nsuo.mutation.ClearMatch()
	return nsuo
}

// ClearNumericalStatDescription clears the "numerical_stat_description" edge to the NumericalStatDescription entity.
func (nsuo *NumericalStatUpdateOne) ClearNumericalStatDescription() *NumericalStatUpdateOne {
	nsuo.mutation.ClearNumericalStatDescription()
	return nsuo
}

// ClearPlayer clears the "player" edge to the Player entity.
func (nsuo *NumericalStatUpdateOne) ClearPlayer() *NumericalStatUpdateOne {
	nsuo.mutation.ClearPlayer()
	return nsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nsuo *NumericalStatUpdateOne) Select(field string, fields ...string) *NumericalStatUpdateOne {
	nsuo.fields = append([]string{field}, fields...)
	return nsuo
}

// Save executes the query and returns the updated NumericalStat entity.
func (nsuo *NumericalStatUpdateOne) Save(ctx context.Context) (*NumericalStat, error) {
	var (
		err  error
		node *NumericalStat
	)
	if len(nsuo.hooks) == 0 {
		if err = nsuo.check(); err != nil {
			return nil, err
		}
		node, err = nsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NumericalStatMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nsuo.check(); err != nil {
				return nil, err
			}
			nsuo.mutation = mutation
			node, err = nsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nsuo.hooks) - 1; i >= 0; i-- {
			if nsuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nsuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, nsuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*NumericalStat)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from NumericalStatMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (nsuo *NumericalStatUpdateOne) SaveX(ctx context.Context) *NumericalStat {
	node, err := nsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nsuo *NumericalStatUpdateOne) Exec(ctx context.Context) error {
	_, err := nsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nsuo *NumericalStatUpdateOne) ExecX(ctx context.Context) {
	if err := nsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nsuo *NumericalStatUpdateOne) check() error {
	if _, ok := nsuo.mutation.MatchID(); nsuo.mutation.MatchCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "NumericalStat.match"`)
	}
	if _, ok := nsuo.mutation.NumericalStatDescriptionID(); nsuo.mutation.NumericalStatDescriptionCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "NumericalStat.numerical_stat_description"`)
	}
	if _, ok := nsuo.mutation.PlayerID(); nsuo.mutation.PlayerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "NumericalStat.player"`)
	}
	return nil
}

func (nsuo *NumericalStatUpdateOne) sqlSave(ctx context.Context) (_node *NumericalStat, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   numericalstat.Table,
			Columns: numericalstat.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: numericalstat.FieldID,
			},
		},
	}
	id, ok := nsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NumericalStat.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, numericalstat.FieldID)
		for _, f := range fields {
			if !numericalstat.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != numericalstat.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nsuo.mutation.Value(); ok {
		_spec.SetField(numericalstat.FieldValue, field.TypeFloat64, value)
	}
	if value, ok := nsuo.mutation.AddedValue(); ok {
		_spec.AddField(numericalstat.FieldValue, field.TypeFloat64, value)
	}
	if nsuo.mutation.MatchCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   numericalstat.MatchTable,
			Columns: []string{numericalstat.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: match.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nsuo.mutation.MatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   numericalstat.MatchTable,
			Columns: []string{numericalstat.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: match.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nsuo.mutation.NumericalStatDescriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   numericalstat.NumericalStatDescriptionTable,
			Columns: []string{numericalstat.NumericalStatDescriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: numericalstatdescription.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nsuo.mutation.NumericalStatDescriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   numericalstat.NumericalStatDescriptionTable,
			Columns: []string{numericalstat.NumericalStatDescriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: numericalstatdescription.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nsuo.mutation.PlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   numericalstat.PlayerTable,
			Columns: []string{numericalstat.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: player.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nsuo.mutation.PlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   numericalstat.PlayerTable,
			Columns: []string{numericalstat.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: player.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NumericalStat{config: nsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{numericalstat.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
