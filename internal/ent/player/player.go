// Code generated by ent, DO NOT EDIT.

package player

import (
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
)

const (
	// Label holds the string label denoting the player type in the database.
	Label = "player"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeSupervisors holds the string denoting the supervisors edge name in mutations.
	EdgeSupervisors = "supervisors"
	// EdgeSupervisionRequests holds the string denoting the supervision_requests edge name in mutations.
	EdgeSupervisionRequests = "supervision_requests"
	// Table holds the table name of the player in the database.
	Table = "players"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "players"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_main_player"
	// SupervisorsTable is the table that holds the supervisors relation/edge. The primary key declared below.
	SupervisorsTable = "user_players"
	// SupervisorsInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	SupervisorsInverseTable = "users"
	// SupervisionRequestsTable is the table that holds the supervision_requests relation/edge.
	SupervisionRequestsTable = "player_supervision_requests"
	// SupervisionRequestsInverseTable is the table name for the PlayerSupervisionRequest entity.
	// It exists in this package in order to avoid circular dependency with the "playersupervisionrequest" package.
	SupervisionRequestsInverseTable = "player_supervision_requests"
	// SupervisionRequestsColumn is the table column denoting the supervision_requests relation/edge.
	SupervisionRequestsColumn = "player_supervision_requests"
)

// Columns holds all SQL columns for player fields.
var Columns = []string{
	FieldID,
	FieldName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "players"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_main_player",
}

var (
	// SupervisorsPrimaryKey and SupervisorsColumn2 are the table columns denoting the
	// primary key for the supervisors relation (M2M).
	SupervisorsPrimaryKey = []string{"user_id", "player_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() guidgql.GUID
)
