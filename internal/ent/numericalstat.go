// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/open-boardgame-stats/backend/internal/ent/match"
	"github.com/open-boardgame-stats/backend/internal/ent/numericalstat"
	"github.com/open-boardgame-stats/backend/internal/ent/numericalstatdescription"
	"github.com/open-boardgame-stats/backend/internal/ent/player"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
)

// NumericalStat is the model entity for the NumericalStat schema.
type NumericalStat struct {
	config `json:"-"`
	// ID of the ent.
	ID guidgql.GUID `json:"id,omitempty"`
	// Value holds the value of the "value" field.
	Value float64 `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NumericalStatQuery when eager-loading is set.
	Edges                                      NumericalStatEdges `json:"edges"`
	match_numerical_stats                      *guidgql.GUID
	numerical_stat_description_numerical_stats *guidgql.GUID
	player_numerical_stats                     *guidgql.GUID
}

// NumericalStatEdges holds the relations/edges for other nodes in the graph.
type NumericalStatEdges struct {
	// Match holds the value of the match edge.
	Match *Match `json:"match,omitempty"`
	// NumericalStatDescription holds the value of the numerical_stat_description edge.
	NumericalStatDescription *NumericalStatDescription `json:"numerical_stat_description,omitempty"`
	// Player holds the value of the player edge.
	Player *Player `json:"player,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int
}

// MatchOrErr returns the Match value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NumericalStatEdges) MatchOrErr() (*Match, error) {
	if e.loadedTypes[0] {
		if e.Match == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: match.Label}
		}
		return e.Match, nil
	}
	return nil, &NotLoadedError{edge: "match"}
}

// NumericalStatDescriptionOrErr returns the NumericalStatDescription value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NumericalStatEdges) NumericalStatDescriptionOrErr() (*NumericalStatDescription, error) {
	if e.loadedTypes[1] {
		if e.NumericalStatDescription == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: numericalstatdescription.Label}
		}
		return e.NumericalStatDescription, nil
	}
	return nil, &NotLoadedError{edge: "numerical_stat_description"}
}

// PlayerOrErr returns the Player value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NumericalStatEdges) PlayerOrErr() (*Player, error) {
	if e.loadedTypes[2] {
		if e.Player == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: player.Label}
		}
		return e.Player, nil
	}
	return nil, &NotLoadedError{edge: "player"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NumericalStat) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case numericalstat.FieldID:
			values[i] = new(guidgql.GUID)
		case numericalstat.FieldValue:
			values[i] = new(sql.NullFloat64)
		case numericalstat.ForeignKeys[0]: // match_numerical_stats
			values[i] = &sql.NullScanner{S: new(guidgql.GUID)}
		case numericalstat.ForeignKeys[1]: // numerical_stat_description_numerical_stats
			values[i] = &sql.NullScanner{S: new(guidgql.GUID)}
		case numericalstat.ForeignKeys[2]: // player_numerical_stats
			values[i] = &sql.NullScanner{S: new(guidgql.GUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type NumericalStat", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NumericalStat fields.
func (ns *NumericalStat) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case numericalstat.FieldID:
			if value, ok := values[i].(*guidgql.GUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ns.ID = *value
			}
		case numericalstat.FieldValue:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				ns.Value = value.Float64
			}
		case numericalstat.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field match_numerical_stats", values[i])
			} else if value.Valid {
				ns.match_numerical_stats = new(guidgql.GUID)
				*ns.match_numerical_stats = *value.S.(*guidgql.GUID)
			}
		case numericalstat.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field numerical_stat_description_numerical_stats", values[i])
			} else if value.Valid {
				ns.numerical_stat_description_numerical_stats = new(guidgql.GUID)
				*ns.numerical_stat_description_numerical_stats = *value.S.(*guidgql.GUID)
			}
		case numericalstat.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field player_numerical_stats", values[i])
			} else if value.Valid {
				ns.player_numerical_stats = new(guidgql.GUID)
				*ns.player_numerical_stats = *value.S.(*guidgql.GUID)
			}
		}
	}
	return nil
}

// QueryMatch queries the "match" edge of the NumericalStat entity.
func (ns *NumericalStat) QueryMatch() *MatchQuery {
	return (&NumericalStatClient{config: ns.config}).QueryMatch(ns)
}

// QueryNumericalStatDescription queries the "numerical_stat_description" edge of the NumericalStat entity.
func (ns *NumericalStat) QueryNumericalStatDescription() *NumericalStatDescriptionQuery {
	return (&NumericalStatClient{config: ns.config}).QueryNumericalStatDescription(ns)
}

// QueryPlayer queries the "player" edge of the NumericalStat entity.
func (ns *NumericalStat) QueryPlayer() *PlayerQuery {
	return (&NumericalStatClient{config: ns.config}).QueryPlayer(ns)
}

// Update returns a builder for updating this NumericalStat.
// Note that you need to call NumericalStat.Unwrap() before calling this method if this NumericalStat
// was returned from a transaction, and the transaction was committed or rolled back.
func (ns *NumericalStat) Update() *NumericalStatUpdateOne {
	return (&NumericalStatClient{config: ns.config}).UpdateOne(ns)
}

// Unwrap unwraps the NumericalStat entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ns *NumericalStat) Unwrap() *NumericalStat {
	_tx, ok := ns.config.driver.(*txDriver)
	if !ok {
		panic("ent: NumericalStat is not a transactional entity")
	}
	ns.config.driver = _tx.drv
	return ns
}

// String implements the fmt.Stringer.
func (ns *NumericalStat) String() string {
	var builder strings.Builder
	builder.WriteString("NumericalStat(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ns.ID))
	builder.WriteString("value=")
	builder.WriteString(fmt.Sprintf("%v", ns.Value))
	builder.WriteByte(')')
	return builder.String()
}

// NumericalStats is a parsable slice of NumericalStat.
type NumericalStats []*NumericalStat

func (ns NumericalStats) config(cfg config) {
	for _i := range ns {
		ns[_i].config = cfg
	}
}
