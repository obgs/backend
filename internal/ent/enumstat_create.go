// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-boardgame-stats/backend/internal/ent/enumstat"
	"github.com/open-boardgame-stats/backend/internal/ent/enumstatdescription"
	"github.com/open-boardgame-stats/backend/internal/ent/match"
	"github.com/open-boardgame-stats/backend/internal/ent/player"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
)

// EnumStatCreate is the builder for creating a EnumStat entity.
type EnumStatCreate struct {
	config
	mutation *EnumStatMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetValue sets the "value" field.
func (esc *EnumStatCreate) SetValue(s string) *EnumStatCreate {
	esc.mutation.SetValue(s)
	return esc
}

// SetID sets the "id" field.
func (esc *EnumStatCreate) SetID(gu guidgql.GUID) *EnumStatCreate {
	esc.mutation.SetID(gu)
	return esc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (esc *EnumStatCreate) SetNillableID(gu *guidgql.GUID) *EnumStatCreate {
	if gu != nil {
		esc.SetID(*gu)
	}
	return esc
}

// SetMatchID sets the "match" edge to the Match entity by ID.
func (esc *EnumStatCreate) SetMatchID(id guidgql.GUID) *EnumStatCreate {
	esc.mutation.SetMatchID(id)
	return esc
}

// SetMatch sets the "match" edge to the Match entity.
func (esc *EnumStatCreate) SetMatch(m *Match) *EnumStatCreate {
	return esc.SetMatchID(m.ID)
}

// SetEnumStatDescriptionID sets the "enum_stat_description" edge to the EnumStatDescription entity by ID.
func (esc *EnumStatCreate) SetEnumStatDescriptionID(id guidgql.GUID) *EnumStatCreate {
	esc.mutation.SetEnumStatDescriptionID(id)
	return esc
}

// SetEnumStatDescription sets the "enum_stat_description" edge to the EnumStatDescription entity.
func (esc *EnumStatCreate) SetEnumStatDescription(e *EnumStatDescription) *EnumStatCreate {
	return esc.SetEnumStatDescriptionID(e.ID)
}

// SetPlayerID sets the "player" edge to the Player entity by ID.
func (esc *EnumStatCreate) SetPlayerID(id guidgql.GUID) *EnumStatCreate {
	esc.mutation.SetPlayerID(id)
	return esc
}

// SetPlayer sets the "player" edge to the Player entity.
func (esc *EnumStatCreate) SetPlayer(p *Player) *EnumStatCreate {
	return esc.SetPlayerID(p.ID)
}

// Mutation returns the EnumStatMutation object of the builder.
func (esc *EnumStatCreate) Mutation() *EnumStatMutation {
	return esc.mutation
}

// Save creates the EnumStat in the database.
func (esc *EnumStatCreate) Save(ctx context.Context) (*EnumStat, error) {
	var (
		err  error
		node *EnumStat
	)
	esc.defaults()
	if len(esc.hooks) == 0 {
		if err = esc.check(); err != nil {
			return nil, err
		}
		node, err = esc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EnumStatMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = esc.check(); err != nil {
				return nil, err
			}
			esc.mutation = mutation
			if node, err = esc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(esc.hooks) - 1; i >= 0; i-- {
			if esc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = esc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, esc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*EnumStat)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from EnumStatMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (esc *EnumStatCreate) SaveX(ctx context.Context) *EnumStat {
	v, err := esc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (esc *EnumStatCreate) Exec(ctx context.Context) error {
	_, err := esc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (esc *EnumStatCreate) ExecX(ctx context.Context) {
	if err := esc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (esc *EnumStatCreate) defaults() {
	if _, ok := esc.mutation.ID(); !ok {
		v := enumstat.DefaultID()
		esc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (esc *EnumStatCreate) check() error {
	if _, ok := esc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "EnumStat.value"`)}
	}
	if _, ok := esc.mutation.MatchID(); !ok {
		return &ValidationError{Name: "match", err: errors.New(`ent: missing required edge "EnumStat.match"`)}
	}
	if _, ok := esc.mutation.EnumStatDescriptionID(); !ok {
		return &ValidationError{Name: "enum_stat_description", err: errors.New(`ent: missing required edge "EnumStat.enum_stat_description"`)}
	}
	if _, ok := esc.mutation.PlayerID(); !ok {
		return &ValidationError{Name: "player", err: errors.New(`ent: missing required edge "EnumStat.player"`)}
	}
	return nil
}

func (esc *EnumStatCreate) sqlSave(ctx context.Context) (*EnumStat, error) {
	_node, _spec := esc.createSpec()
	if err := sqlgraph.CreateNode(ctx, esc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*guidgql.GUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (esc *EnumStatCreate) createSpec() (*EnumStat, *sqlgraph.CreateSpec) {
	var (
		_node = &EnumStat{config: esc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: enumstat.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: enumstat.FieldID,
			},
		}
	)
	_spec.OnConflict = esc.conflict
	if id, ok := esc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := esc.mutation.Value(); ok {
		_spec.SetField(enumstat.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if nodes := esc.mutation.MatchIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enumstat.MatchTable,
			Columns: []string{enumstat.MatchColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: match.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.match_enum_stats = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := esc.mutation.EnumStatDescriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enumstat.EnumStatDescriptionTable,
			Columns: []string{enumstat.EnumStatDescriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: enumstatdescription.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.enum_stat_description_enum_stats = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := esc.mutation.PlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   enumstat.PlayerTable,
			Columns: []string{enumstat.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: player.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.player_enum_stats = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EnumStat.Create().
//		SetValue(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EnumStatUpsert) {
//			SetValue(v+v).
//		}).
//		Exec(ctx)
func (esc *EnumStatCreate) OnConflict(opts ...sql.ConflictOption) *EnumStatUpsertOne {
	esc.conflict = opts
	return &EnumStatUpsertOne{
		create: esc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EnumStat.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (esc *EnumStatCreate) OnConflictColumns(columns ...string) *EnumStatUpsertOne {
	esc.conflict = append(esc.conflict, sql.ConflictColumns(columns...))
	return &EnumStatUpsertOne{
		create: esc,
	}
}

type (
	// EnumStatUpsertOne is the builder for "upsert"-ing
	//  one EnumStat node.
	EnumStatUpsertOne struct {
		create *EnumStatCreate
	}

	// EnumStatUpsert is the "OnConflict" setter.
	EnumStatUpsert struct {
		*sql.UpdateSet
	}
)

// SetValue sets the "value" field.
func (u *EnumStatUpsert) SetValue(v string) *EnumStatUpsert {
	u.Set(enumstat.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *EnumStatUpsert) UpdateValue() *EnumStatUpsert {
	u.SetExcluded(enumstat.FieldValue)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.EnumStat.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(enumstat.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *EnumStatUpsertOne) UpdateNewValues() *EnumStatUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(enumstat.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EnumStat.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EnumStatUpsertOne) Ignore() *EnumStatUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EnumStatUpsertOne) DoNothing() *EnumStatUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EnumStatCreate.OnConflict
// documentation for more info.
func (u *EnumStatUpsertOne) Update(set func(*EnumStatUpsert)) *EnumStatUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EnumStatUpsert{UpdateSet: update})
	}))
	return u
}

// SetValue sets the "value" field.
func (u *EnumStatUpsertOne) SetValue(v string) *EnumStatUpsertOne {
	return u.Update(func(s *EnumStatUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *EnumStatUpsertOne) UpdateValue() *EnumStatUpsertOne {
	return u.Update(func(s *EnumStatUpsert) {
		s.UpdateValue()
	})
}

// Exec executes the query.
func (u *EnumStatUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EnumStatCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EnumStatUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EnumStatUpsertOne) ID(ctx context.Context) (id guidgql.GUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: EnumStatUpsertOne.ID is not supported by MySQL driver. Use EnumStatUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EnumStatUpsertOne) IDX(ctx context.Context) guidgql.GUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EnumStatCreateBulk is the builder for creating many EnumStat entities in bulk.
type EnumStatCreateBulk struct {
	config
	builders []*EnumStatCreate
	conflict []sql.ConflictOption
}

// Save creates the EnumStat entities in the database.
func (escb *EnumStatCreateBulk) Save(ctx context.Context) ([]*EnumStat, error) {
	specs := make([]*sqlgraph.CreateSpec, len(escb.builders))
	nodes := make([]*EnumStat, len(escb.builders))
	mutators := make([]Mutator, len(escb.builders))
	for i := range escb.builders {
		func(i int, root context.Context) {
			builder := escb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EnumStatMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, escb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = escb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, escb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, escb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (escb *EnumStatCreateBulk) SaveX(ctx context.Context) []*EnumStat {
	v, err := escb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (escb *EnumStatCreateBulk) Exec(ctx context.Context) error {
	_, err := escb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (escb *EnumStatCreateBulk) ExecX(ctx context.Context) {
	if err := escb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.EnumStat.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EnumStatUpsert) {
//			SetValue(v+v).
//		}).
//		Exec(ctx)
func (escb *EnumStatCreateBulk) OnConflict(opts ...sql.ConflictOption) *EnumStatUpsertBulk {
	escb.conflict = opts
	return &EnumStatUpsertBulk{
		create: escb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.EnumStat.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (escb *EnumStatCreateBulk) OnConflictColumns(columns ...string) *EnumStatUpsertBulk {
	escb.conflict = append(escb.conflict, sql.ConflictColumns(columns...))
	return &EnumStatUpsertBulk{
		create: escb,
	}
}

// EnumStatUpsertBulk is the builder for "upsert"-ing
// a bulk of EnumStat nodes.
type EnumStatUpsertBulk struct {
	create *EnumStatCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.EnumStat.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(enumstat.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *EnumStatUpsertBulk) UpdateNewValues() *EnumStatUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(enumstat.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.EnumStat.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EnumStatUpsertBulk) Ignore() *EnumStatUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EnumStatUpsertBulk) DoNothing() *EnumStatUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EnumStatCreateBulk.OnConflict
// documentation for more info.
func (u *EnumStatUpsertBulk) Update(set func(*EnumStatUpsert)) *EnumStatUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EnumStatUpsert{UpdateSet: update})
	}))
	return u
}

// SetValue sets the "value" field.
func (u *EnumStatUpsertBulk) SetValue(v string) *EnumStatUpsertBulk {
	return u.Update(func(s *EnumStatUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *EnumStatUpsertBulk) UpdateValue() *EnumStatUpsertBulk {
	return u.Update(func(s *EnumStatUpsert) {
		s.UpdateValue()
	})
}

// Exec executes the query.
func (u *EnumStatUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EnumStatCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EnumStatCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EnumStatUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
