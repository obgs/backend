// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-boardgame-stats/backend/internal/ent/gameversion"
	"github.com/open-boardgame-stats/backend/internal/ent/match"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
)

// Match is the model entity for the Match schema.
type Match struct {
	config
	// ID of the ent.
	ID guidgql.GUID `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MatchQuery when eager-loading is set.
	Edges                MatchEdges `json:"edges"`
	game_version_matches *guidgql.GUID
	selectValues         sql.SelectValues
}

// MatchEdges holds the relations/edges for other nodes in the graph.
type MatchEdges struct {
	// GameVersion holds the value of the game_version edge.
	GameVersion *GameVersion `json:"game_version,omitempty"`
	// Players holds the value of the players edge.
	Players []*Player `json:"players,omitempty"`
	// Stats holds the value of the stats edge.
	Stats []*Statistic `json:"stats,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedPlayers map[string][]*Player
	namedStats   map[string][]*Statistic
}

// GameVersionOrErr returns the GameVersion value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MatchEdges) GameVersionOrErr() (*GameVersion, error) {
	if e.GameVersion != nil {
		return e.GameVersion, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: gameversion.Label}
	}
	return nil, &NotLoadedError{edge: "game_version"}
}

// PlayersOrErr returns the Players value or an error if the edge
// was not loaded in eager-loading.
func (e MatchEdges) PlayersOrErr() ([]*Player, error) {
	if e.loadedTypes[1] {
		return e.Players, nil
	}
	return nil, &NotLoadedError{edge: "players"}
}

// StatsOrErr returns the Stats value or an error if the edge
// was not loaded in eager-loading.
func (e MatchEdges) StatsOrErr() ([]*Statistic, error) {
	if e.loadedTypes[2] {
		return e.Stats, nil
	}
	return nil, &NotLoadedError{edge: "stats"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Match) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case match.FieldID:
			values[i] = new(guidgql.GUID)
		case match.ForeignKeys[0]: // game_version_matches
			values[i] = &sql.NullScanner{S: new(guidgql.GUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Match fields.
func (m *Match) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case match.FieldID:
			if value, ok := values[i].(*guidgql.GUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				m.ID = *value
			}
		case match.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field game_version_matches", values[i])
			} else if value.Valid {
				m.game_version_matches = new(guidgql.GUID)
				*m.game_version_matches = *value.S.(*guidgql.GUID)
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Match.
// This includes values selected through modifiers, order, etc.
func (m *Match) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryGameVersion queries the "game_version" edge of the Match entity.
func (m *Match) QueryGameVersion() *GameVersionQuery {
	return NewMatchClient(m.config).QueryGameVersion(m)
}

// QueryPlayers queries the "players" edge of the Match entity.
func (m *Match) QueryPlayers() *PlayerQuery {
	return NewMatchClient(m.config).QueryPlayers(m)
}

// QueryStats queries the "stats" edge of the Match entity.
func (m *Match) QueryStats() *StatisticQuery {
	return NewMatchClient(m.config).QueryStats(m)
}

// Update returns a builder for updating this Match.
// Note that you need to call Match.Unwrap() before calling this method if this Match
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Match) Update() *MatchUpdateOne {
	return NewMatchClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Match entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Match) Unwrap() *Match {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Match is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Match) String() string {
	var builder strings.Builder
	builder.WriteString("Match(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteByte(')')
	return builder.String()
}

// NamedPlayers returns the Players named value or an error if the edge was not
// loaded in eager-loading with this name.
func (m *Match) NamedPlayers(name string) ([]*Player, error) {
	if m.Edges.namedPlayers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := m.Edges.namedPlayers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (m *Match) appendNamedPlayers(name string, edges ...*Player) {
	if m.Edges.namedPlayers == nil {
		m.Edges.namedPlayers = make(map[string][]*Player)
	}
	if len(edges) == 0 {
		m.Edges.namedPlayers[name] = []*Player{}
	} else {
		m.Edges.namedPlayers[name] = append(m.Edges.namedPlayers[name], edges...)
	}
}

// NamedStats returns the Stats named value or an error if the edge was not
// loaded in eager-loading with this name.
func (m *Match) NamedStats(name string) ([]*Statistic, error) {
	if m.Edges.namedStats == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := m.Edges.namedStats[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (m *Match) appendNamedStats(name string, edges ...*Statistic) {
	if m.Edges.namedStats == nil {
		m.Edges.namedStats = make(map[string][]*Statistic)
	}
	if len(edges) == 0 {
		m.Edges.namedStats[name] = []*Statistic{}
	} else {
		m.Edges.namedStats[name] = append(m.Edges.namedStats[name], edges...)
	}
}

// Matches is a parsable slice of Match.
type Matches []*Match
