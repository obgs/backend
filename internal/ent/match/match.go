// Code generated by ent, DO NOT EDIT.

package match

import (
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
)

const (
	// Label holds the string label denoting the match type in the database.
	Label = "match"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeGame holds the string denoting the game edge name in mutations.
	EdgeGame = "game"
	// EdgePlayers holds the string denoting the players edge name in mutations.
	EdgePlayers = "players"
	// EdgeNumericalStats holds the string denoting the numerical_stats edge name in mutations.
	EdgeNumericalStats = "numerical_stats"
	// EdgeEnumStats holds the string denoting the enum_stats edge name in mutations.
	EdgeEnumStats = "enum_stats"
	// Table holds the table name of the match in the database.
	Table = "matches"
	// GameTable is the table that holds the game relation/edge.
	GameTable = "matches"
	// GameInverseTable is the table name for the Game entity.
	// It exists in this package in order to avoid circular dependency with the "game" package.
	GameInverseTable = "games"
	// GameColumn is the table column denoting the game relation/edge.
	GameColumn = "game_matches"
	// PlayersTable is the table that holds the players relation/edge. The primary key declared below.
	PlayersTable = "match_players"
	// PlayersInverseTable is the table name for the Player entity.
	// It exists in this package in order to avoid circular dependency with the "player" package.
	PlayersInverseTable = "players"
	// NumericalStatsTable is the table that holds the numerical_stats relation/edge.
	NumericalStatsTable = "numerical_stats"
	// NumericalStatsInverseTable is the table name for the NumericalStat entity.
	// It exists in this package in order to avoid circular dependency with the "numericalstat" package.
	NumericalStatsInverseTable = "numerical_stats"
	// NumericalStatsColumn is the table column denoting the numerical_stats relation/edge.
	NumericalStatsColumn = "match_numerical_stats"
	// EnumStatsTable is the table that holds the enum_stats relation/edge.
	EnumStatsTable = "enum_stats"
	// EnumStatsInverseTable is the table name for the EnumStat entity.
	// It exists in this package in order to avoid circular dependency with the "enumstat" package.
	EnumStatsInverseTable = "enum_stats"
	// EnumStatsColumn is the table column denoting the enum_stats relation/edge.
	EnumStatsColumn = "match_enum_stats"
)

// Columns holds all SQL columns for match fields.
var Columns = []string{
	FieldID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "matches"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"game_matches",
}

var (
	// PlayersPrimaryKey and PlayersColumn2 are the table columns denoting the
	// primary key for the players relation (M2M).
	PlayersPrimaryKey = []string{"match_id", "player_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() guidgql.GUID
)
