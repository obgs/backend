// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-boardgame-stats/backend/internal/ent/groupmembership"
	"github.com/open-boardgame-stats/backend/internal/ent/groupmembershipapplication"
	"github.com/open-boardgame-stats/backend/internal/ent/player"
	"github.com/open-boardgame-stats/backend/internal/ent/playersupervisionrequest"
	"github.com/open-boardgame-stats/backend/internal/ent/playersupervisionrequestapproval"
	"github.com/open-boardgame-stats/backend/internal/ent/predicate"
	"github.com/open-boardgame-stats/backend/internal/ent/schema/guidgql"
	"github.com/open-boardgame-stats/backend/internal/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableName(s *string) *UserUpdate {
	if s != nil {
		uu.SetName(*s)
	}
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetAvatarURL sets the "avatar_url" field.
func (uu *UserUpdate) SetAvatarURL(s string) *UserUpdate {
	uu.mutation.SetAvatarURL(s)
	return uu
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAvatarURL(s *string) *UserUpdate {
	if s != nil {
		uu.SetAvatarURL(*s)
	}
	return uu
}

// AddPlayerIDs adds the "players" edge to the Player entity by IDs.
func (uu *UserUpdate) AddPlayerIDs(ids ...guidgql.GUID) *UserUpdate {
	uu.mutation.AddPlayerIDs(ids...)
	return uu
}

// AddPlayers adds the "players" edges to the Player entity.
func (uu *UserUpdate) AddPlayers(p ...*Player) *UserUpdate {
	ids := make([]guidgql.GUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddPlayerIDs(ids...)
}

// SetMainPlayerID sets the "main_player" edge to the Player entity by ID.
func (uu *UserUpdate) SetMainPlayerID(id guidgql.GUID) *UserUpdate {
	uu.mutation.SetMainPlayerID(id)
	return uu
}

// SetNillableMainPlayerID sets the "main_player" edge to the Player entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableMainPlayerID(id *guidgql.GUID) *UserUpdate {
	if id != nil {
		uu = uu.SetMainPlayerID(*id)
	}
	return uu
}

// SetMainPlayer sets the "main_player" edge to the Player entity.
func (uu *UserUpdate) SetMainPlayer(p *Player) *UserUpdate {
	return uu.SetMainPlayerID(p.ID)
}

// AddSentSupervisionRequestIDs adds the "sent_supervision_requests" edge to the PlayerSupervisionRequest entity by IDs.
func (uu *UserUpdate) AddSentSupervisionRequestIDs(ids ...guidgql.GUID) *UserUpdate {
	uu.mutation.AddSentSupervisionRequestIDs(ids...)
	return uu
}

// AddSentSupervisionRequests adds the "sent_supervision_requests" edges to the PlayerSupervisionRequest entity.
func (uu *UserUpdate) AddSentSupervisionRequests(p ...*PlayerSupervisionRequest) *UserUpdate {
	ids := make([]guidgql.GUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddSentSupervisionRequestIDs(ids...)
}

// AddSupervisionRequestApprovalIDs adds the "supervision_request_approvals" edge to the PlayerSupervisionRequestApproval entity by IDs.
func (uu *UserUpdate) AddSupervisionRequestApprovalIDs(ids ...guidgql.GUID) *UserUpdate {
	uu.mutation.AddSupervisionRequestApprovalIDs(ids...)
	return uu
}

// AddSupervisionRequestApprovals adds the "supervision_request_approvals" edges to the PlayerSupervisionRequestApproval entity.
func (uu *UserUpdate) AddSupervisionRequestApprovals(p ...*PlayerSupervisionRequestApproval) *UserUpdate {
	ids := make([]guidgql.GUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddSupervisionRequestApprovalIDs(ids...)
}

// AddGroupMembershipIDs adds the "group_memberships" edge to the GroupMembership entity by IDs.
func (uu *UserUpdate) AddGroupMembershipIDs(ids ...guidgql.GUID) *UserUpdate {
	uu.mutation.AddGroupMembershipIDs(ids...)
	return uu
}

// AddGroupMemberships adds the "group_memberships" edges to the GroupMembership entity.
func (uu *UserUpdate) AddGroupMemberships(g ...*GroupMembership) *UserUpdate {
	ids := make([]guidgql.GUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.AddGroupMembershipIDs(ids...)
}

// AddGroupMembershipApplicationIDs adds the "group_membership_applications" edge to the GroupMembershipApplication entity by IDs.
func (uu *UserUpdate) AddGroupMembershipApplicationIDs(ids ...guidgql.GUID) *UserUpdate {
	uu.mutation.AddGroupMembershipApplicationIDs(ids...)
	return uu
}

// AddGroupMembershipApplications adds the "group_membership_applications" edges to the GroupMembershipApplication entity.
func (uu *UserUpdate) AddGroupMembershipApplications(g ...*GroupMembershipApplication) *UserUpdate {
	ids := make([]guidgql.GUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.AddGroupMembershipApplicationIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearPlayers clears all "players" edges to the Player entity.
func (uu *UserUpdate) ClearPlayers() *UserUpdate {
	uu.mutation.ClearPlayers()
	return uu
}

// RemovePlayerIDs removes the "players" edge to Player entities by IDs.
func (uu *UserUpdate) RemovePlayerIDs(ids ...guidgql.GUID) *UserUpdate {
	uu.mutation.RemovePlayerIDs(ids...)
	return uu
}

// RemovePlayers removes "players" edges to Player entities.
func (uu *UserUpdate) RemovePlayers(p ...*Player) *UserUpdate {
	ids := make([]guidgql.GUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemovePlayerIDs(ids...)
}

// ClearMainPlayer clears the "main_player" edge to the Player entity.
func (uu *UserUpdate) ClearMainPlayer() *UserUpdate {
	uu.mutation.ClearMainPlayer()
	return uu
}

// ClearSentSupervisionRequests clears all "sent_supervision_requests" edges to the PlayerSupervisionRequest entity.
func (uu *UserUpdate) ClearSentSupervisionRequests() *UserUpdate {
	uu.mutation.ClearSentSupervisionRequests()
	return uu
}

// RemoveSentSupervisionRequestIDs removes the "sent_supervision_requests" edge to PlayerSupervisionRequest entities by IDs.
func (uu *UserUpdate) RemoveSentSupervisionRequestIDs(ids ...guidgql.GUID) *UserUpdate {
	uu.mutation.RemoveSentSupervisionRequestIDs(ids...)
	return uu
}

// RemoveSentSupervisionRequests removes "sent_supervision_requests" edges to PlayerSupervisionRequest entities.
func (uu *UserUpdate) RemoveSentSupervisionRequests(p ...*PlayerSupervisionRequest) *UserUpdate {
	ids := make([]guidgql.GUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemoveSentSupervisionRequestIDs(ids...)
}

// ClearSupervisionRequestApprovals clears all "supervision_request_approvals" edges to the PlayerSupervisionRequestApproval entity.
func (uu *UserUpdate) ClearSupervisionRequestApprovals() *UserUpdate {
	uu.mutation.ClearSupervisionRequestApprovals()
	return uu
}

// RemoveSupervisionRequestApprovalIDs removes the "supervision_request_approvals" edge to PlayerSupervisionRequestApproval entities by IDs.
func (uu *UserUpdate) RemoveSupervisionRequestApprovalIDs(ids ...guidgql.GUID) *UserUpdate {
	uu.mutation.RemoveSupervisionRequestApprovalIDs(ids...)
	return uu
}

// RemoveSupervisionRequestApprovals removes "supervision_request_approvals" edges to PlayerSupervisionRequestApproval entities.
func (uu *UserUpdate) RemoveSupervisionRequestApprovals(p ...*PlayerSupervisionRequestApproval) *UserUpdate {
	ids := make([]guidgql.GUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemoveSupervisionRequestApprovalIDs(ids...)
}

// ClearGroupMemberships clears all "group_memberships" edges to the GroupMembership entity.
func (uu *UserUpdate) ClearGroupMemberships() *UserUpdate {
	uu.mutation.ClearGroupMemberships()
	return uu
}

// RemoveGroupMembershipIDs removes the "group_memberships" edge to GroupMembership entities by IDs.
func (uu *UserUpdate) RemoveGroupMembershipIDs(ids ...guidgql.GUID) *UserUpdate {
	uu.mutation.RemoveGroupMembershipIDs(ids...)
	return uu
}

// RemoveGroupMemberships removes "group_memberships" edges to GroupMembership entities.
func (uu *UserUpdate) RemoveGroupMemberships(g ...*GroupMembership) *UserUpdate {
	ids := make([]guidgql.GUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.RemoveGroupMembershipIDs(ids...)
}

// ClearGroupMembershipApplications clears all "group_membership_applications" edges to the GroupMembershipApplication entity.
func (uu *UserUpdate) ClearGroupMembershipApplications() *UserUpdate {
	uu.mutation.ClearGroupMembershipApplications()
	return uu
}

// RemoveGroupMembershipApplicationIDs removes the "group_membership_applications" edge to GroupMembershipApplication entities by IDs.
func (uu *UserUpdate) RemoveGroupMembershipApplicationIDs(ids ...guidgql.GUID) *UserUpdate {
	uu.mutation.RemoveGroupMembershipApplicationIDs(ids...)
	return uu
}

// RemoveGroupMembershipApplications removes "group_membership_applications" edges to GroupMembershipApplication entities.
func (uu *UserUpdate) RemoveGroupMembershipApplications(g ...*GroupMembershipApplication) *UserUpdate {
	ids := make([]guidgql.GUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.RemoveGroupMembershipApplicationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(uu.hooks) == 0 {
		if err = uu.check(); err != nil {
			return 0, err
		}
		affected, err = uu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uu.check(); err != nil {
				return 0, err
			}
			uu.mutation = mutation
			affected, err = uu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uu.hooks) - 1; i >= 0; i-- {
			if uu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "User.password": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: user.FieldID,
			},
		},
	}
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uu.mutation.AvatarURL(); ok {
		_spec.SetField(user.FieldAvatarURL, field.TypeString, value)
	}
	if uu.mutation.PlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PlayersTable,
			Columns: user.PlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: player.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedPlayersIDs(); len(nodes) > 0 && !uu.mutation.PlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PlayersTable,
			Columns: user.PlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: player.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PlayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PlayersTable,
			Columns: user.PlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: player.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.MainPlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.MainPlayerTable,
			Columns: []string{user.MainPlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: player.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.MainPlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.MainPlayerTable,
			Columns: []string{user.MainPlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: player.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SentSupervisionRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SentSupervisionRequestsTable,
			Columns: []string{user.SentSupervisionRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: playersupervisionrequest.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSentSupervisionRequestsIDs(); len(nodes) > 0 && !uu.mutation.SentSupervisionRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SentSupervisionRequestsTable,
			Columns: []string{user.SentSupervisionRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: playersupervisionrequest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SentSupervisionRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SentSupervisionRequestsTable,
			Columns: []string{user.SentSupervisionRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: playersupervisionrequest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SupervisionRequestApprovalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SupervisionRequestApprovalsTable,
			Columns: []string{user.SupervisionRequestApprovalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: playersupervisionrequestapproval.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSupervisionRequestApprovalsIDs(); len(nodes) > 0 && !uu.mutation.SupervisionRequestApprovalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SupervisionRequestApprovalsTable,
			Columns: []string{user.SupervisionRequestApprovalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: playersupervisionrequestapproval.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SupervisionRequestApprovalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SupervisionRequestApprovalsTable,
			Columns: []string{user.SupervisionRequestApprovalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: playersupervisionrequestapproval.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.GroupMembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroupMembershipsTable,
			Columns: []string{user.GroupMembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: groupmembership.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedGroupMembershipsIDs(); len(nodes) > 0 && !uu.mutation.GroupMembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroupMembershipsTable,
			Columns: []string{user.GroupMembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: groupmembership.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.GroupMembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroupMembershipsTable,
			Columns: []string{user.GroupMembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: groupmembership.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.GroupMembershipApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.GroupMembershipApplicationsTable,
			Columns: user.GroupMembershipApplicationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: groupmembershipapplication.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedGroupMembershipApplicationsIDs(); len(nodes) > 0 && !uu.mutation.GroupMembershipApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.GroupMembershipApplicationsTable,
			Columns: user.GroupMembershipApplicationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: groupmembershipapplication.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.GroupMembershipApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.GroupMembershipApplicationsTable,
			Columns: user.GroupMembershipApplicationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: groupmembershipapplication.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetName(*s)
	}
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetAvatarURL sets the "avatar_url" field.
func (uuo *UserUpdateOne) SetAvatarURL(s string) *UserUpdateOne {
	uuo.mutation.SetAvatarURL(s)
	return uuo
}

// SetNillableAvatarURL sets the "avatar_url" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAvatarURL(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAvatarURL(*s)
	}
	return uuo
}

// AddPlayerIDs adds the "players" edge to the Player entity by IDs.
func (uuo *UserUpdateOne) AddPlayerIDs(ids ...guidgql.GUID) *UserUpdateOne {
	uuo.mutation.AddPlayerIDs(ids...)
	return uuo
}

// AddPlayers adds the "players" edges to the Player entity.
func (uuo *UserUpdateOne) AddPlayers(p ...*Player) *UserUpdateOne {
	ids := make([]guidgql.GUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddPlayerIDs(ids...)
}

// SetMainPlayerID sets the "main_player" edge to the Player entity by ID.
func (uuo *UserUpdateOne) SetMainPlayerID(id guidgql.GUID) *UserUpdateOne {
	uuo.mutation.SetMainPlayerID(id)
	return uuo
}

// SetNillableMainPlayerID sets the "main_player" edge to the Player entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableMainPlayerID(id *guidgql.GUID) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetMainPlayerID(*id)
	}
	return uuo
}

// SetMainPlayer sets the "main_player" edge to the Player entity.
func (uuo *UserUpdateOne) SetMainPlayer(p *Player) *UserUpdateOne {
	return uuo.SetMainPlayerID(p.ID)
}

// AddSentSupervisionRequestIDs adds the "sent_supervision_requests" edge to the PlayerSupervisionRequest entity by IDs.
func (uuo *UserUpdateOne) AddSentSupervisionRequestIDs(ids ...guidgql.GUID) *UserUpdateOne {
	uuo.mutation.AddSentSupervisionRequestIDs(ids...)
	return uuo
}

// AddSentSupervisionRequests adds the "sent_supervision_requests" edges to the PlayerSupervisionRequest entity.
func (uuo *UserUpdateOne) AddSentSupervisionRequests(p ...*PlayerSupervisionRequest) *UserUpdateOne {
	ids := make([]guidgql.GUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddSentSupervisionRequestIDs(ids...)
}

// AddSupervisionRequestApprovalIDs adds the "supervision_request_approvals" edge to the PlayerSupervisionRequestApproval entity by IDs.
func (uuo *UserUpdateOne) AddSupervisionRequestApprovalIDs(ids ...guidgql.GUID) *UserUpdateOne {
	uuo.mutation.AddSupervisionRequestApprovalIDs(ids...)
	return uuo
}

// AddSupervisionRequestApprovals adds the "supervision_request_approvals" edges to the PlayerSupervisionRequestApproval entity.
func (uuo *UserUpdateOne) AddSupervisionRequestApprovals(p ...*PlayerSupervisionRequestApproval) *UserUpdateOne {
	ids := make([]guidgql.GUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddSupervisionRequestApprovalIDs(ids...)
}

// AddGroupMembershipIDs adds the "group_memberships" edge to the GroupMembership entity by IDs.
func (uuo *UserUpdateOne) AddGroupMembershipIDs(ids ...guidgql.GUID) *UserUpdateOne {
	uuo.mutation.AddGroupMembershipIDs(ids...)
	return uuo
}

// AddGroupMemberships adds the "group_memberships" edges to the GroupMembership entity.
func (uuo *UserUpdateOne) AddGroupMemberships(g ...*GroupMembership) *UserUpdateOne {
	ids := make([]guidgql.GUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.AddGroupMembershipIDs(ids...)
}

// AddGroupMembershipApplicationIDs adds the "group_membership_applications" edge to the GroupMembershipApplication entity by IDs.
func (uuo *UserUpdateOne) AddGroupMembershipApplicationIDs(ids ...guidgql.GUID) *UserUpdateOne {
	uuo.mutation.AddGroupMembershipApplicationIDs(ids...)
	return uuo
}

// AddGroupMembershipApplications adds the "group_membership_applications" edges to the GroupMembershipApplication entity.
func (uuo *UserUpdateOne) AddGroupMembershipApplications(g ...*GroupMembershipApplication) *UserUpdateOne {
	ids := make([]guidgql.GUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.AddGroupMembershipApplicationIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearPlayers clears all "players" edges to the Player entity.
func (uuo *UserUpdateOne) ClearPlayers() *UserUpdateOne {
	uuo.mutation.ClearPlayers()
	return uuo
}

// RemovePlayerIDs removes the "players" edge to Player entities by IDs.
func (uuo *UserUpdateOne) RemovePlayerIDs(ids ...guidgql.GUID) *UserUpdateOne {
	uuo.mutation.RemovePlayerIDs(ids...)
	return uuo
}

// RemovePlayers removes "players" edges to Player entities.
func (uuo *UserUpdateOne) RemovePlayers(p ...*Player) *UserUpdateOne {
	ids := make([]guidgql.GUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemovePlayerIDs(ids...)
}

// ClearMainPlayer clears the "main_player" edge to the Player entity.
func (uuo *UserUpdateOne) ClearMainPlayer() *UserUpdateOne {
	uuo.mutation.ClearMainPlayer()
	return uuo
}

// ClearSentSupervisionRequests clears all "sent_supervision_requests" edges to the PlayerSupervisionRequest entity.
func (uuo *UserUpdateOne) ClearSentSupervisionRequests() *UserUpdateOne {
	uuo.mutation.ClearSentSupervisionRequests()
	return uuo
}

// RemoveSentSupervisionRequestIDs removes the "sent_supervision_requests" edge to PlayerSupervisionRequest entities by IDs.
func (uuo *UserUpdateOne) RemoveSentSupervisionRequestIDs(ids ...guidgql.GUID) *UserUpdateOne {
	uuo.mutation.RemoveSentSupervisionRequestIDs(ids...)
	return uuo
}

// RemoveSentSupervisionRequests removes "sent_supervision_requests" edges to PlayerSupervisionRequest entities.
func (uuo *UserUpdateOne) RemoveSentSupervisionRequests(p ...*PlayerSupervisionRequest) *UserUpdateOne {
	ids := make([]guidgql.GUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemoveSentSupervisionRequestIDs(ids...)
}

// ClearSupervisionRequestApprovals clears all "supervision_request_approvals" edges to the PlayerSupervisionRequestApproval entity.
func (uuo *UserUpdateOne) ClearSupervisionRequestApprovals() *UserUpdateOne {
	uuo.mutation.ClearSupervisionRequestApprovals()
	return uuo
}

// RemoveSupervisionRequestApprovalIDs removes the "supervision_request_approvals" edge to PlayerSupervisionRequestApproval entities by IDs.
func (uuo *UserUpdateOne) RemoveSupervisionRequestApprovalIDs(ids ...guidgql.GUID) *UserUpdateOne {
	uuo.mutation.RemoveSupervisionRequestApprovalIDs(ids...)
	return uuo
}

// RemoveSupervisionRequestApprovals removes "supervision_request_approvals" edges to PlayerSupervisionRequestApproval entities.
func (uuo *UserUpdateOne) RemoveSupervisionRequestApprovals(p ...*PlayerSupervisionRequestApproval) *UserUpdateOne {
	ids := make([]guidgql.GUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemoveSupervisionRequestApprovalIDs(ids...)
}

// ClearGroupMemberships clears all "group_memberships" edges to the GroupMembership entity.
func (uuo *UserUpdateOne) ClearGroupMemberships() *UserUpdateOne {
	uuo.mutation.ClearGroupMemberships()
	return uuo
}

// RemoveGroupMembershipIDs removes the "group_memberships" edge to GroupMembership entities by IDs.
func (uuo *UserUpdateOne) RemoveGroupMembershipIDs(ids ...guidgql.GUID) *UserUpdateOne {
	uuo.mutation.RemoveGroupMembershipIDs(ids...)
	return uuo
}

// RemoveGroupMemberships removes "group_memberships" edges to GroupMembership entities.
func (uuo *UserUpdateOne) RemoveGroupMemberships(g ...*GroupMembership) *UserUpdateOne {
	ids := make([]guidgql.GUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.RemoveGroupMembershipIDs(ids...)
}

// ClearGroupMembershipApplications clears all "group_membership_applications" edges to the GroupMembershipApplication entity.
func (uuo *UserUpdateOne) ClearGroupMembershipApplications() *UserUpdateOne {
	uuo.mutation.ClearGroupMembershipApplications()
	return uuo
}

// RemoveGroupMembershipApplicationIDs removes the "group_membership_applications" edge to GroupMembershipApplication entities by IDs.
func (uuo *UserUpdateOne) RemoveGroupMembershipApplicationIDs(ids ...guidgql.GUID) *UserUpdateOne {
	uuo.mutation.RemoveGroupMembershipApplicationIDs(ids...)
	return uuo
}

// RemoveGroupMembershipApplications removes "group_membership_applications" edges to GroupMembershipApplication entities.
func (uuo *UserUpdateOne) RemoveGroupMembershipApplications(g ...*GroupMembershipApplication) *UserUpdateOne {
	ids := make([]guidgql.GUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.RemoveGroupMembershipApplicationIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	var (
		err  error
		node *User
	)
	if len(uuo.hooks) == 0 {
		if err = uuo.check(); err != nil {
			return nil, err
		}
		node, err = uuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uuo.check(); err != nil {
				return nil, err
			}
			uuo.mutation = mutation
			node, err = uuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uuo.hooks) - 1; i >= 0; i-- {
			if uuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, uuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*User)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "User.password": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: user.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if value, ok := uuo.mutation.AvatarURL(); ok {
		_spec.SetField(user.FieldAvatarURL, field.TypeString, value)
	}
	if uuo.mutation.PlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PlayersTable,
			Columns: user.PlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: player.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedPlayersIDs(); len(nodes) > 0 && !uuo.mutation.PlayersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PlayersTable,
			Columns: user.PlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: player.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PlayersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.PlayersTable,
			Columns: user.PlayersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: player.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.MainPlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.MainPlayerTable,
			Columns: []string{user.MainPlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: player.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.MainPlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.MainPlayerTable,
			Columns: []string{user.MainPlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: player.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SentSupervisionRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SentSupervisionRequestsTable,
			Columns: []string{user.SentSupervisionRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: playersupervisionrequest.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSentSupervisionRequestsIDs(); len(nodes) > 0 && !uuo.mutation.SentSupervisionRequestsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SentSupervisionRequestsTable,
			Columns: []string{user.SentSupervisionRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: playersupervisionrequest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SentSupervisionRequestsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SentSupervisionRequestsTable,
			Columns: []string{user.SentSupervisionRequestsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: playersupervisionrequest.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SupervisionRequestApprovalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SupervisionRequestApprovalsTable,
			Columns: []string{user.SupervisionRequestApprovalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: playersupervisionrequestapproval.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSupervisionRequestApprovalsIDs(); len(nodes) > 0 && !uuo.mutation.SupervisionRequestApprovalsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SupervisionRequestApprovalsTable,
			Columns: []string{user.SupervisionRequestApprovalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: playersupervisionrequestapproval.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SupervisionRequestApprovalsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SupervisionRequestApprovalsTable,
			Columns: []string{user.SupervisionRequestApprovalsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: playersupervisionrequestapproval.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.GroupMembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroupMembershipsTable,
			Columns: []string{user.GroupMembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: groupmembership.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedGroupMembershipsIDs(); len(nodes) > 0 && !uuo.mutation.GroupMembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroupMembershipsTable,
			Columns: []string{user.GroupMembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: groupmembership.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.GroupMembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.GroupMembershipsTable,
			Columns: []string{user.GroupMembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: groupmembership.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.GroupMembershipApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.GroupMembershipApplicationsTable,
			Columns: user.GroupMembershipApplicationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: groupmembershipapplication.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedGroupMembershipApplicationsIDs(); len(nodes) > 0 && !uuo.mutation.GroupMembershipApplicationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.GroupMembershipApplicationsTable,
			Columns: user.GroupMembershipApplicationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: groupmembershipapplication.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.GroupMembershipApplicationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.GroupMembershipApplicationsTable,
			Columns: user.GroupMembershipApplicationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: groupmembershipapplication.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
